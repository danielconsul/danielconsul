'Programa que calcula projeções da inflação de preços livres por meio de VÁRIOS modelos VAR.

'Os modelos VAR trabalham com conjuntos diferentes de variáveis endógenas. Esses conjuntos são escolhidos pelo usuário. 
'A escolha é feita por meio de um objeto do tipo "table".
'Esse objeto se chama VARCONJ.
'Obs1: o número máximo de variáveis endógenas em cada VAR é 6!
'Obs2: o número máximo de variáveis exógenas em cada VAR é 6!
'Obs3: o número máximo de modelos VAR é 12!
'Obs4: a primeira variável na lista de endógenas é aquela para a qual desejamos calcular projeções! (no exemplo do BCB, é a inflação de preços livres).

' O número de defasagens é escolhido pelo critério de Schwartz.

'Os modelos VAR geram previsões para a inflação de preços livres que, combinadas às projeções da inflação de preços administrados (obtidas de forma independente através de modelos auxiliares ou simplesmente tomando as projeções divulgadas pelo BCB), compõem as previsões da inflação plena mensurada pelo Índice Nacional de Preços ao Consumidor Amplo (IPCA).
'Referência principal: Box do Relatório de Inflação de setembro de 2012, "Revisão dos Modelos de Vetores Autorregressivos com Fundamentação Econômica – 2012".
'Referências adicionais: os modelos VAR estimados pelo BCB foram abordados anteriormente nos boxes “Vetores Auto-Regressivos” (Relatório de Inflação de junho de '2004), “Modelos de Vetores Auto-Regressivos” (Relatório de Inflação de março de 2008) e “Modelos de Vetores Autorregressivos” (Relatório de Inflação de junho de 2010).

'Utilização de amostras que são adicionadas de uma observação à medida que se avança no tempo. O tamanho da janela de estimação aumenta à medida que o tempo passa.

'Horizontes preditivos: 1 a 24.

'Dados inseridos manualmente, havendo necessidade de editar o programa.

'----------------------------------------------------------------------------------------------------

mode quiet

smpl @all

'Copiando os objetos/variáveis de interesse para a folha VAR2 do workfile.
copy(o) Dados\ipca_livres VAR3\ipca_livres
copy(o) Dados\ipca_administrados VAR3\ipca_administrados
copy(o) Dados\v_dolar_1 VAR3\v_dolar_1
copy(o) Dados\v_dolar_4 VAR3\v_dolar_4
copy(o) Dados\juro_real_6 VAR3\juro_real_6
copy(o) Dados\juro_real_5 VAR3\juro_real_5
copy(o) Dados\igpm VAR3\igpm

'Escolha do número máximo de defasagens dos modelos VAR. Para isso é criado um objeto com número = 4.
scalar maxdef = 4

'Definição da amostra de estimação inicial.
'Definição da amostra de teste inicial (comparação entre valores projetados e observados).
'A primeira janela de estimação começa em %lim_inf_first e termina em %lim_sup_first.
%lim_inf_first = "1999m06"
%lim_sup_first = "2010m12"
'A última janela de estimação começa em %lim_inf_last e termina em %lim_sup_last .
%lim_inf_last = "1999m06"
%lim_sup_last = "2020m12"

'O workfile termina na observação %lim_sup:
%lim_sup = "2023m12"

'Fixa o parâmetro que define o horizonte preditivo máximo:
scalar horizon = 24

'O número de execuções do programa é...
scalar a = @dtoo(%lim_sup_first)
scalar b = @dtoo(%lim_sup_last)
scalar col = b - a + 1

'Leitura do número de modelos VAR a ser testado pelo usuário.
string num = varconj(1,1) 'Posição (1, 1) da matriz varconj traz o número de modelos VAR, que é 3.
scalar N = @val(num) 'Transforma a string num em valor, ou seja, 3 é uma string em num e passa a ser um scalar numérico 3 em N.

'Cria as séries com os erros de projeção para 1 a 24 passos à frente.
'Cria as séries com as projeções para 1 a 24 passos à frente.
'Os horizontes de projeção são indexados pelo índice h.
for !h = 1 to horizon 
	delete(noerr) erro_var_{!h}
	delete(noerr) proj_var_{!h}
	series erro_var_{!h} 'erro_var_1 ... até erro_var_24
	series proj_var_{!h}
next

'Cria matrizes que guardarão as projeções feitas por cada modelo para cada horizonte prospectivo.
'Trata-se de matrizes com 24 colunas cada uma.
'A primeira linha informa as projeções calculadas na data equivalente à observação a, a segunda linha informa as projeções calculadas na data equivalente à observação a + 1 e assim por diante.
for !mod = 1 to N 'Para modelos 1 a 3
	delete(noerr) proj_mod{!mod}
	matrix(col, 24) proj_mod{!mod} 'Cria as matrizes proj_mod_1 ... até proj_mod_3 com col = 121 linhas e 24 colunas (= horizonte preditivo)
next

'Cria matrizes que guardarão os erros de projeção cometidos por cada modelo para cada horizonte prospectivo.
'Trata-se de matrizes com 24 colunas cada uma.
'A primeira coluna informa a data na qual as projeções foram calculadas.
'A posição dos erros segue o mesmo padrão das projeções.
for !mod = 1 to N
	delete(noerr) erro_mod{!mod}
	matrix(col, 24) erro_mod{!mod}
next

'Cria matriz que guardará o número ótimo de defasagens para cada modelo VAR e para cada instante de tempo entre a + 1 e a + col.
'A matriz tem col linhas e N colunas.
delete(noerr) opt_lags
matrix(col, N) opt_lags 'col linhas = 121 e N colunas = 3. Ou seja, todos os meses de projeção para cada um dos três modelos VAR.
'O critério de informação selecionou 2 como o número ótimo de defasagens.

'Cria matrizes que guardarão os valores assumidos pelo critério de informação para cada modelo VAR, para cada instante de tempo entre a + 1 e a + col e para cada número de defasagens.
'A matriz tem col linhas e maxdef colunas.
for !mod = 1 to N
	delete(noerr) var_lags_{!mod} 'var_lags_1 ... até var_lags_3
	matrix(col, maxdef) var_lags_{!mod} 'col linhas = 3 e maxdef = 4 colunas.
next 'O menor valor indica o lag escolhido pelo critério de informação de Schwarz.

'Essa parte do programa estima cada um dos modelos VAR que o usuário escolhe para fazer projeções da inflação dos preços livres.
'O procedimento executado com cada VAR é o seguinte:
'1) fixa a amostra para estimação do modelo.
'2) encontra o numero ótimo de defasagens.
'3) estima o modelo com o número ótimo de defasagens.
'4) gera previsões para o período que se inicia no mês imediatamente posterior ao final da amostra de estimação. A base é o modelo estimado no passo anterior.
'5) volta para o passo 1 colocando mais uma observação na amostra.

for !mod = 1 to N

	'Leitura do número de variáveis endógenas do modelo.
	string num_end = varconj(!mod + 1, 2) 'O número de variáveis endógenas é lido como uma "palavra"
	scalar N_end = @val(num_end) 'A "palavra" é convertida para o número correspondente. Obtém os números 4 e 5, número de variáveis endógenas dos modelos 1 e 2, e 3, respectivamente.
	if ((N_end <= 1) or (N_end >= 7)) then  
		%error = "O número de variáveis endógenas do modelo " + @str(!mod) + " é inválido!" 'Porque o máximo de variáveis endógenas é 6. Se algum dos modelos tiver o número de variáveis endógenas como igual ou superior a 7 aparecerá um aviso na tela indicando o modelo problemático.
		@uiprompt(%error)
		stop
	endif

	'Leitura das variáveis endógenas do modelo.
	'Copia as séries correspondentes às variáveis definidas acima para a folha "VAR3" do workfile.
	'Forma uma lista de variáveis endógenas.
	string lista = " "
	for !z = 1 to N_end 'O número máximo de endógenas da tabela varconj é 5. Assim, !z = 1 to 5
		string end{!z} = varconj(!mod + 1, !z + 2) 'Lê o nome da z-ésima variável endógena. A tabela varconj é lida de cima pra baixo e da esquerda pra direita
		string name = end{!z} 
		copy(o) Dados\{name} VAR3\{name} 'Copia a série temporal cujo nome acabou de ser lido.
		lista = lista + name + " " 'Atualiza a lista de variáveis endógenas.
	next

	'Leitura do número de variáveis exógenas do modelo.
	string num_exo = varconj(!mod + 1, 9) 'Linhas 2 a 4 e coluna 9 = número zero
	scalar N_exo = @val(num_exo)
	if ((N_exo < 0) or (N_exo >= 7)) then  
		%error = "O número de variáveis exógenas do modelo " + @str(!mod) + " é inválido!" 'Número máximo de variáveis endógenas é 6, e o mínimo zero.
		@uiprompt(%error)
		stop
	endif

	'Se não há variáveis exógenas, então a lista é simplesmente o intercepto.
	if (N_exo = 0) then  
		string lista_exo = "c" 'Cria uma string só contendo a constante "c".
	endif

	'Se há variáveis exógenas, então a lista deve incorporá-las.
	if ((N_exo >= 1) and (N_exo <= 6)) then  

		'Leitura das variáveis exógenas do modelo.
		'Copia as séries correspondentes às variáveis definidas acima para a folha "VAR3" do workfile.
		'Forma lista de variáveis enxógenas.
		string lista_exo = "c"
		for !z = 1 to N_exo
			string exo{!z} = varconj(!mod + 1, !z + 9) 'Lê o nome da z-ésima variável exógena
			string name = exo{!z} 
			copy(o) Dados\{name} VAR3\{name} 'Copia a série temporal cujo nome acabou de ser lido.
			lista_exo = lista_exo + name + " " 'Atualiza a lista de variáveis exógenas. Como não tem variáveis exógenas predefinidas, inclui-se apenas a constante "c".
		next

	endif

for !i = 1 to col '1 a 121

		!mincrit = 1e12  'Ajusta o valor mínimo inicial do critério de informação em um patamar extremamente elevado.		
		
		'Ajusta a amostra de estimação.
		smpl %lim_inf_first %lim_sup_first + !i -1

		'Escolha do número ótimo de defasagens.
		for !lag = 1 to maxdef 

			'Estima o modelo VAR com !lag defasagens.
			var mod_var.ls 1 {!lag} {lista} @ {lista_exo} '1 a 4 defasagens

'----------------------------------------------------------------------------------------------------
			'Obs: como estimar um modelo VAR:

			'Estimate VAR specification.
			'Syntax: var_name.ls(options) lag_pairs endog_list [@ exog_list]
			'ls estimates an unrestricted VAR using equation-by-equation OLS. You must specify the order of the VAR (using one or more pairs of lag intervals), and then provide a list of series or groups to be used as endogenous variables. You may include exogenous variables such as trends and seasonal dummies in the VAR by including an “@-sign” followed by a list of series or groups. A constant is automatically added to the list of exogenous variables; to estimate a specification without a constant, you should use the option “noconst”.
'----------------------------------------------------------------------------------------------------

			'Calcula o valor assumido pelo critério de informação.
		     !crit = mod_var.@schwarz 'Usamos o critério de informação de Schwarz
			
			'Armazena o resultado na matriz var_lags_{!mod}.
			var_lags_{!mod}(!i, !lag) = !crit '121 linhas e 4 colunas, pois o lag máximo é 4. var_lags_1 ... até var_lags_3
					      		
			'Determinação do menor valor assumido pelo critério de informação escolhido; escolha do melhor VAR.
			if !crit < !mincrit then
				!mincrit = !crit
			   	!best_lag = !lag 'Armazena o melhor número de defasagens do modelo VAR. !lag é de 1 a !maxdef = 4
			endif	

			delete mod_var
					
		next 'Fecha o loop responsável por procurar o melhor número de defasagens dos modelos VAR. Esse loop é indexado por !lag.

		'Salva o número ótimo de defasagens para cada modelo VAR e para cada instante de tempo entre lim_sup_first e lim_sup_last.
		opt_lags(!i, !mod) = !best_lag 'best lag = 2. 121 linhas com as projeções e três colunas dos três modelos.
				
		'Estima o modelo VAR com o número ótimo de defasagens e obtém as projeções.
		var mod_var.ls 1 {!best_lag} {lista} @ {lista_exo} 'Defasagens vão de 1 até o melhor lag escolhido pelo critério de Schwarz.
		mod_var.makemodel(vv)
		smpl %lim_sup_first + !i %lim_sup
		vv.solve
		rename {end1}_0 y_f{!i}
		
		'Cálculo das projeções e dos erros de previsão.
		for !h = 1 to horizon 'De 1 até 24
			proj_var_{!h}(a + !i + !h-1) = y_f{!i}(a + !i + !h-1) 'Projeção.
			erro_var_{!h}(a + !i + !h-1) = ({end1}(a + !i + !h-1) - proj_var_{!h}(a + !i + !h-1))^2 'Erro.
		next 'fecha o loop de for indexado por h, que "varre" os horizontes preditivos.	

		'Armazenamento das projeções e dos erros de previsão em matrizes.
		for !h = 1 to horizon
			proj_mod{!mod}(!i, !h) = proj_var_{!h}(a + !i + !h-1)
			erro_mod{!mod}(!i, !h) = erro_var_{!h}(a + !i + !h-1)
		next 'fecha o loop de for indexado por h, que "varre" os horizontes preditivos.

		delete y_*

	next 'Fecha o loop que "varre" a amostra de teste ou, de outra forma, que representa a passagem do tempo. Esse loop é indexado por i.

	'CÁLCULO DOS ERROS MÉDIOS QUADRÁTICOS
	
	matrix(1, 4) result_mod{!mod} = na
				
	smpl %lim_sup_first + 1 %lim_sup
		
	result_mod{!mod}(1, 1) = @mean(erro_var_1)
	result_mod{!mod}(1, 2) = @mean(erro_var_6)
	result_mod{!mod}(1, 3) = @mean(erro_var_12)
	result_mod{!mod}(1, 4) = @mean(erro_var_24)

next 'Fecha o loop que "varre" os modelos VAR que devem ser testados. Esse loop é indexado por mod.

delete(noerr) result_var
table(N + 1, 5) result_var
setcell(result_var, 1, 2, "1", "c")
setcell(result_var, 1, 3, "6", "c")
setcell(result_var, 1, 4, "12", "c")
setcell(result_var, 1, 5, "24", "c")
for !mod = 1 to N
	setcell(result_var, !mod+1, 1, "var" + @str(!mod), "c")
next

for !mod =  1 to N
	for !coluna = 1 to 4	
		setcell(result_var, !mod+1, !coluna+1, result_mod{!mod}(1,!coluna), 3)
	next
next

string s1 = @str(N + 1)
result_var.setlines(a1:a{s1}) +o
result_var.setlines(b1:b{s1}) +o
result_var.setlines(c1:c{s1}) +o
result_var.setlines(d1:d{s1}) +o
result_var.setlines(e1:e{s1}) +o
for !z = 1 to (N+1)
	result_var.setlines(a{!z}:e{!z}) +o
next
delete s1

'Apaga objetos desnecessários
delete a
delete b
delete col
delete *_0
delete vv
delete y_*
delete end*
delete lista*
delete mod_var
delete n
delete n_end
delete n_exo
delete name
delete num
delete num_end
delete num_exo
delete erro_var_*
delete proj_var_*
delete maxdef
delete horizon
delete opt_lags
delete erro_*
delete var_lags_*
delete proj_*
delete result_mod*
