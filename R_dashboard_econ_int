---
title: "Estatísticas do setor externo brasileiro"
output: 
  flexdashboard::flex_dashboard:
    social: [ "menu" ]
    theme: spacelab
    favicon: icon.png
    orientation: columns
    vertical_layout: fill
runtime: shiny
---

<style>
p {
  text-align: center;
  margin-right: 10px;
}
</style>

```{r setup, include=FALSE}
library(flexdashboard)
library(tidyverse)
library(rbcb)
library(reactable)
library(plotly)
library(scales)
library(shiny)
library(WDI)
library(ipeadatar)
library(fredr)
library(zoo)
```

```{r, cache=TRUE}
# Coleta de dados:

# API key FRED
fredr_set_key("0087fc9b146c214d78104e3737039ea4")

# Trigo
trigo <- fredr(
  series_id = "PWHEAMTUSDM"
) %>% mutate(
  valor = value
) %>% mutate(
  var_mg = (valor / lag(valor) - 1) * 100,
  var_12m = (valor / lag(valor, 12) - 1) * 100
) %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    valor = number(valor, decimal.mark = ",", accuracy = 0.01),
    var_mg = number(var_mg, decimal.mark = ",", accuracy = 0.01),
    var_12m = number(var_12m, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, valor, var_mg, var_12m, date)

# Minério de ferro
miner_ferro <- fredr(
  series_id = "PIORECRUSDM"
) %>% mutate(
  valor = value
) %>% mutate(
  var_mg = (valor / lag(valor) - 1) * 100,
  var_12m = (valor / lag(valor, 12) - 1) * 100
) %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    valor = number(valor, decimal.mark = ",", accuracy = 0.01),
    var_mg = number(var_mg, decimal.mark = ",", accuracy = 0.01),
    var_12m = number(var_12m, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, valor, var_mg, var_12m, date)

# Café
cafe_arab <- fredr(
  series_id = "PCOFFOTMUSDM"
) %>% mutate(
  valor_arab = value
) %>% mutate(
  var_mg_arab = (valor_arab / lag(valor_arab) - 1) * 100,
  var_12m_arab = (valor_arab / lag(valor_arab, 12) - 1) * 100
) %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_arab = number(valor_arab, decimal.mark = ",", accuracy = 0.01),
    var_mg_arab = number(var_mg_arab, decimal.mark = ",", accuracy = 0.01),
    var_12m_arab = number(var_12m_arab, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, valor_arab, var_mg_arab, var_12m_arab, date)

cafe_rob <- fredr(
  series_id = "PCOFFROBUSDM"
) %>% mutate(
  valor_rob = value
) %>% mutate(
  var_mg_rob = (valor_rob / lag(valor_rob) - 1) * 100,
  var_12m_rob = (valor_rob / lag(valor_rob, 12) - 1) * 100
) %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rob = number(valor_rob, decimal.mark = ",", accuracy = 0.01),
    var_mg_rob = number(var_mg_rob, decimal.mark = ",", accuracy = 0.01),
    var_12m_rob = number(var_12m_rob, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, valor_rob, var_mg_rob, var_12m_rob, date)

cafe <- left_join(cafe_arab, cafe_rob) %>% drop_na() %>%
  select(data_fmt, valor_arab, var_mg_arab, var_12m_arab, valor_rob, var_mg_rob, var_12m_rob, date)

# Taxa de câmbio - Livre - Diária - Dólar americano (compra e venda):
cambio_venda1 <- get_series(
  code = c(valor_venda = 1),
  start_date = "1994-07-01",
  end_date = "2002-12-31"
)

cambio_venda2 <- get_series(
  code = c(valor_venda = 1),
  start_date = "2003-01-01",
  end_date = "2012-12-31"
)

cambio_venda3 <- get_series(
  code = c(valor_venda = 1),
  start_date = "2013-01-01",
  end_date = "2022-12-31"
)

cambio_venda4 <- get_series(
  code = c(valor_venda = 1),
  start_date = "2023-01-01"
)

cambio_compra1 <- get_series(
  code = c(valor_compra = 10813),
  start_date = "1994-07-01",
  end_date = "2002-12-31"
)

cambio_compra2 <- get_series(
  code = c(valor_compra = 10813),
  start_date = "2003-01-01",
  end_date = "2012-12-31"
)

cambio_compra3 <- get_series(
  code = c(valor_compra = 10813),
  start_date = "2013-01-01",
  end_date = "2022-12-31"
)

cambio_compra4 <- get_series(
  code = c(valor_compra = 10813),
  start_date = "2023-01-01"
)

cambio_venda <- bind_rows(cambio_venda1, cambio_venda2, cambio_venda3, cambio_venda4)
cambio_compra <- bind_rows(cambio_compra1, cambio_compra2, cambio_compra3, cambio_compra4)

cambio_nom <- left_join(cambio_venda, cambio_compra)

cambio_nom$cambio_nom <- (cambio_nom$valor_venda + cambio_nom$valor_compra)/2

cambio_nom <- cambio_nom %>%
  mutate(
    var_mg = (cambio_nom / lag(cambio_nom) - 1) * 100
  ) %>% 
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_compra = number(valor_compra, decimal.mark = ",", accuracy = 0.0001),
    valor_venda = number(valor_venda, decimal.mark = ",", accuracy = 0.0001),
    cambio_nom = number(cambio_nom, decimal.mark = ",", accuracy = 0.01),
    var_mg = number(var_mg, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, valor_compra, valor_venda, cambio_nom, var_mg, date)

# Taxa de câmbio - Livre - mensal - Dólar americano (compra e venda):
cambio_venda_mensal <- get_series(
  code = c(valor_venda = 3696),
  start_date = "1994-07-01"
)

cambio_compra_mensal <- get_series(
  code = c(valor_compra = 3695),
  start_date = "1994-07-01"
)

cambio_nom_mensal <- left_join(cambio_venda_mensal, cambio_compra_mensal)

cambio_nom_mensal$cambio_nom_mensal <- (cambio_nom_mensal$valor_venda + cambio_nom_mensal$valor_compra)/2

cambio_nom_mensal <- cambio_nom_mensal %>%
  mutate(
    var_mg = (cambio_nom_mensal / lag(cambio_nom_mensal) - 1) * 100,
    var_12m = (cambio_nom_mensal / lag(cambio_nom_mensal, 12) - 1) * 100
  ) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_compra = number(valor_compra, decimal.mark = ",", accuracy = 0.01),
    valor_venda = number(valor_venda, decimal.mark = ",", accuracy = 0.01),
    cambio_nom_mensal = number(cambio_nom_mensal, decimal.mark = ",", accuracy = 0.01),
    var_mg = number(var_mg, decimal.mark = ",", accuracy = 0.01),
    var_12m = number(var_12m, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, valor_compra, valor_venda, cambio_nom_mensal, var_mg, var_12m, date)

# Taxa de câmbio real (IPCA) - Jun/1994 = 100 - (códigos 11753 e 11752):
cambio_real_dol <- get_series(
  code = c(valor_dol = 11753),
  start_date = "1994-07-01"
) %>%
  mutate(
    var_mg_dol = (valor_dol / lag(valor_dol) - 1) * 100,
    var_12m_dol = (valor_dol / lag(valor_dol, 12) - 1) * 100
  ) %>%
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_dol = number(valor_dol, decimal.mark = ",", accuracy = 0.01),
    var_mg_dol = number(var_mg_dol, decimal.mark = ",", accuracy = 0.01),
    var_12m_dol = number(var_12m_dol, decimal.mark = ",", accuracy = 0.01)
  )

cambio_real_efet <- get_series(
  code = c(valor_efet = 11752),
  start_date = "1994-07-01"
) %>%
  mutate(
    var_mg_efet = (valor_efet / lag(valor_efet) - 1) * 100,
    var_12m_efet = (valor_efet / lag(valor_efet, 12) - 1) * 100
  ) %>%
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_efet = number(valor_efet, decimal.mark = ",", accuracy = 0.01),
    var_mg_efet = number(var_mg_efet, decimal.mark = ",", accuracy = 0.01),
    var_12m_efet = number(var_12m_efet, decimal.mark = ",", accuracy = 0.01)
  )

cambio_real <- left_join(cambio_real_dol, cambio_real_efet)

cambio_real <- cambio_real %>%
  arrange(desc(date)) %>%
  select(data_fmt, valor_dol, var_mg_dol, var_12m_dol,
         valor_efet, var_mg_efet, var_12m_efet, date)

# Termos de troca
tt <- ipeadata(code = "FUNCEX12_TTR12") %>% mutate(valor_tt = value) %>% mutate(
    var_mg_tt = (valor_tt / lag(valor_tt) - 1) * 100,
    var_12m_tt = (valor_tt / lag(valor_tt, 12) - 1) * 100
  ) %>%
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_tt = number(valor_tt, decimal.mark = ",", accuracy = 0.01),
    var_mg_tt = number(var_mg_tt, decimal.mark = ",", accuracy = 0.01),
    var_12m_tt = number(var_12m_tt, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, valor_tt, var_mg_tt, var_12m_tt, date)

# Reservas internacionais (código 3546):
res_int <- get_series(
  code = c(valor = 3546),
  start_date = "1970-12-01"
) %>% mutate(
    valor = valor / 1000,
    var_mg = (valor / lag(valor) - 1) * 100,
    var_12m = (valor / lag(valor, 12) - 1) * 100
  ) %>%
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor = number(valor, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    var_mg = number(var_mg, decimal.mark = ",", accuracy = 0.01),
    var_12m = number(var_12m, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, valor, var_mg, var_12m, date)

# Dívida externa bruta (códigos 3684 e 11407):
div_bruta_usd <- get_series(
  code = c(valor_usd = 3684),
  start_date = "1981-01-01"
) %>%
  mutate(
    valor_usd = valor_usd / 1000,
    data_fmt = format(date, "%m/%Y"),
    valor_usd = number(valor_usd, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  )

div_bruta_pib <- get_series(
  code = c(valor_pib = 11407),
  start_date = "1981-01-01"
) %>%
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_pib = number(valor_pib, big.mark = ".", decimal.mark = ",", accuracy = 0.1)
  )
  
div_bruta <- left_join(div_bruta_usd,div_bruta_pib) %>% arrange(desc(date)) %>%
  select(data_fmt, valor_usd, valor_pib, date)

# Dívida externa líquida (códigos 3685 e 11409):
div_liq_usd <- get_series(
  code = c(valor_usd = 3685),
  start_date = "1981-01-01"
) %>%
  mutate(
    valor_usd = valor_usd / 1000,
    data_fmt = format(date, "%m/%Y"),
    valor_usd = number(valor_usd, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  )

div_liq_pib <- get_series(
  code = c(valor_pib = 11409),
  start_date = "1981-01-01"
) %>%
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_pib = number(valor_pib, big.mark = ".", decimal.mark = ",", accuracy = 0.1)
  )
  
div_liq <- left_join(div_liq_usd,div_liq_pib) %>% arrange(desc(date)) %>%
  select(data_fmt, valor_usd, valor_pib, date)

# Reservas internacionais totais como % da dívida externa total (código FI.RES.TOTL.DT.ZS):
res_int_div_ext <- WDI(
  country = "BR",
  indicator = "FI.RES.TOTL.DT.ZS",
  start = 1971
) %>% mutate(
  ano = year,
  valor = FI.RES.TOTL.DT.ZS,
  valor = number(valor, decimal.mark = ",", accuracy = 0.01)
) %>% select(ano, valor)

# Reservas internacionais (em meses de importações) (código FI.RES.TOTL.MO):
res_int_imports <- WDI(
  country = "BR",
  indicator = "FI.RES.TOTL.MO",
  start = 1975
) %>% mutate(
  ano = year,
  valor = FI.RES.TOTL.MO,
  valor = number(valor, decimal.mark = ",", accuracy = 0.01)
) %>% select(ano, valor)

# Câmbio contratado comercial exportação (código 13962):
cambio_exp1 <- get_series(
  code = c(valor_exp = 13962),
  start_date = "2008-09-01",
  end_date = "2017-12-31"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_exp = number(valor_exp, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_exp, date)

cambio_exp2 <- get_series(
  code = c(valor_exp = 13962),
  start_date = "2018-01-01"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_exp = number(valor_exp, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_exp, date)

cambio_exp <- bind_rows(cambio_exp1, cambio_exp2) %>%
  arrange(desc(date)) 

# Câmbio contratado comercial importação (código 13966):
cambio_imp1 <- get_series(
  code = c(valor_imp = 13966),
  start_date = "2008-09-01",
  end_date = "2017-12-31" # No máximo 10 anos
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_imp = number(valor_imp, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_imp, date)

cambio_imp2 <- get_series(
  code = c(valor_imp = 13966),
  start_date = "2018-01-01"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_imp = number(valor_imp, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_imp, date)

cambio_imp <- bind_rows(cambio_imp1, cambio_imp2) %>%
  arrange(desc(date)) 

# Câmbio contratado comercial saldo (código 13967):
cambio_saldo_com1 <- get_series(
  code = c(valor_saldo_com = 13967),
  start_date = "2008-09-01",
  end_date = "2017-12-31"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_saldo_com = number(valor_saldo_com, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_saldo_com, date)

cambio_saldo_com2 <- get_series(
  code = c(valor_saldo_com = 13967),
  start_date = "2018-01-01"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_saldo_com = number(valor_saldo_com, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_saldo_com, date)

cambio_saldo_com <- bind_rows(cambio_saldo_com1, cambio_saldo_com2) %>%
  arrange(desc(date))

cambio_com <- left_join(cambio_exp, cambio_imp)
cambio_com <- left_join(cambio_com, cambio_saldo_com)

cambio_com <- cambio_com %>% select(data_fmt, valor_exp, valor_imp, valor_saldo_com, date)

# Câmbio contratado financeiro compra (código 13968):
cambio_compra1 <- get_series(
  code = c(valor_compra = 13968),
  start_date = "2008-09-01",
  end_date = "2017-12-31"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_compra = number(valor_compra, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_compra, date)

cambio_compra2 <- get_series(
  code = c(valor_compra = 13968),
  start_date = "2018-01-01"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_compra = number(valor_compra, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_compra, date)

cambio_compra <- bind_rows(cambio_compra1, cambio_compra2) %>% arrange(desc(date))

# Câmbio contratado financeiro venda (código 13968):
cambio_venda1 <- get_series(
  code = c(valor_venda = 13969),
  start_date = "2008-09-01",
  end_date = "2017-12-31"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_venda = number(valor_venda, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_venda, date)

cambio_venda2 <- get_series(
  code = c(valor_venda = 13969),
  start_date = "2018-01-01"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_venda = number(valor_venda, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_venda, date)

cambio_venda <- bind_rows(cambio_venda1, cambio_venda2) %>% arrange(desc(date))

# Câmbio contratado financeiro saldo (código 13970):
cambio_saldo_financ1 <- get_series(
  code = c(valor_saldo_financ = 13970),
  start_date = "2008-09-01",
  end_date = "2017-12-31"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_saldo_financ = number(valor_saldo_financ, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_saldo_financ, date)

cambio_saldo_financ2 <- get_series(
  code = c(valor_saldo_financ = 13970),
  start_date = "2018-01-01"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_saldo_financ = number(valor_saldo_financ, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_saldo_financ, date)

cambio_saldo_financ <- bind_rows(cambio_saldo_financ1, cambio_saldo_financ2) %>%
  arrange(desc(date))

cambio_financ <- left_join(cambio_compra, cambio_venda)
cambio_financ <- left_join(cambio_financ, cambio_saldo_financ)

cambio_financ <- cambio_financ %>% select(data_fmt, valor_compra, valor_venda, valor_saldo_financ, date)

cambio_contratado <- full_join(cambio_com, cambio_financ) %>% select(-date)

# Câmbio contratado saldo total (código 13961):
cambio_saldo_total1 <- get_series(
  code = c(valor_saldo_total = 13961),
  start_date = "2008-09-01",
  end_date = "2017-12-31"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_saldo_total = number(valor_saldo_total, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_saldo_total, date)

cambio_saldo_total2 <- get_series(
  code = c(valor_saldo_total = 13961),
  start_date = "2018-01-01"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_saldo_total = number(valor_saldo_total, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_saldo_total, date)

cambio_saldo_total <- bind_rows(cambio_saldo_total1, cambio_saldo_total2) %>%
  arrange(desc(date))

cambio_contratado <- full_join(cambio_contratado, cambio_saldo_total)

# Transações correntes (códigos 22701, 22702 e 22703):

trans_cor_rec <- get_series(
  code = c(valor_rec = 22702)
)

trans_cor_desp <- get_series(
  code = c(valor_desp = 22703)
)

trans_cor_saldo <- get_series(
  code = c(valor_saldo = 22701)
)

trans_cor <- left_join(trans_cor_rec, trans_cor_desp)
trans_cor <- left_join(trans_cor, trans_cor_saldo)

trans_cor <- trans_cor %>% mutate(
    valor_rec = valor_rec / 1000,
    valor_desp = valor_desp / 1000,
    valor_saldo = valor_saldo / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rec = number(valor_rec, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_desp = number(valor_desp, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_saldo = number(valor_saldo, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  ) %>% select(data_fmt, valor_rec, valor_desp, valor_saldo, date) %>% 
  arrange(desc(date))

# Transações correntes como % do PIB:
pib_dol <- get_series(
  code = c(valor_pib_dol = 4385)
)

pib_dol <- pib_dol %>% mutate(
  pib_dol_12m = rollsum(valor_pib_dol, k = 12,  align = "right", na.pad = TRUE)
)

trans_corr_12m <- get_series(
  code = c(valor_trans_corr_12m = 22701)
)

trans_corr_12m <- trans_corr_12m %>% mutate(
  trans_corr_12m = rollsum(valor_trans_corr_12m, k = 12,  align = "right", na.pad = TRUE)
)

trans_corr_pib <- left_join(as_tibble(trans_corr_12m), as_tibble(pib_dol)) %>% drop_na() %>% select(
  date, trans_corr_12m, pib_dol_12m
) %>% mutate(
  trans_corr_pib = (trans_corr_12m/pib_dol_12m) * 100
)

trans_corr_pib <- trans_corr_pib %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    trans_corr_pib = number(trans_corr_pib, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, trans_corr_pib, date)

trans_cor <- left_join(trans_cor, trans_corr_pib) %>%
  select(data_fmt, valor_rec, valor_desp, valor_saldo, trans_corr_pib, date)


# Balança comercial (códigos 22707, 22708 e 22709)
bc_exp <- get_series(
  code = c(valor_exp = 22708)
)

bc_imp <- get_series(
  code = c(valor_imp = 22709)
)

bc_saldo <- get_series(
  code = c(valor_saldo = 22707)
)

bal_com <- left_join(bc_exp, bc_imp)
bal_com <- left_join(bal_com, bc_saldo)

bal_com <- bal_com %>% mutate(
    valor_exp = valor_exp / 1000,
    valor_imp = valor_imp / 1000,
    valor_saldo = valor_saldo / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_exp = number(valor_exp, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_imp = number(valor_imp, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_saldo = number(valor_saldo, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  ) %>% select(data_fmt, valor_exp, valor_imp, valor_saldo, date) %>% 
  arrange(desc(date))

# Balança comercial como % do PIB:
bal_com_12m <- get_series(
  code = c(valor_bal_com_12m = 22707)
)

bal_com_12m <- bal_com_12m %>% mutate(
  bal_com_12m = rollsum(valor_bal_com_12m, k = 12,  align = "right", na.pad = TRUE)
)

bal_com_pib <- left_join(as_tibble(bal_com_12m), as_tibble(pib_dol)) %>% drop_na() %>% select(
  date, bal_com_12m, pib_dol_12m
) %>% mutate(
  bal_com_pib = (bal_com_12m/pib_dol_12m) * 100
)

bal_com_pib <- bal_com_pib %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    bal_com_pib = number(bal_com_pib, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, bal_com_pib, date)

bal_com <- left_join(bal_com, bal_com_pib) %>%
  select(data_fmt, valor_exp, valor_imp, valor_saldo, bal_com_pib, date)

# Importações
imp1 <- ipeadata(code = "SECEX12_MVTOT12") %>% mutate(
  valor_imp = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_imp = valor_imp / 1000
) %>% mutate(
  valor_imp = number(valor_imp, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_imp, date) %>% 
  arrange(desc(date))

imp2 <- ipeadata(code = "FUNCEX12_MDPT12") %>% mutate(
  ind_imp = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  ind_imp = number(ind_imp, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, ind_imp, date) %>% 
  arrange(desc(date))

imp3 <- ipeadata(code = "FUNCEX12_MDQT12") %>% mutate(
  qt_imp = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  qt_imp = number(qt_imp, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, qt_imp, date) %>% 
  arrange(desc(date))

import <- left_join(imp1, imp2)
import <- left_join(import, imp3) %>% select(data_fmt, valor_imp, ind_imp, qt_imp, date)

# Importações como % do PIB:
imp_12m <- get_series(
  code = c(valor_imp_12m = 22712)
)

imp_12m <- imp_12m %>% mutate(
  imp_12m = rollsum(valor_imp_12m, k = 12,  align = "right", na.pad = TRUE)
)

imp_pib <- left_join(as_tibble(imp_12m), as_tibble(pib_dol)) %>% drop_na() %>% select(
  date, imp_12m, pib_dol_12m
) %>% mutate(
  imp_pib = (imp_12m/pib_dol_12m) * 100
)

imp_pib <- imp_pib %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    imp_pib = number(imp_pib, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, imp_pib, date)

import <- left_join(import, imp_pib) %>%
  select(data_fmt, valor_imp, ind_imp, qt_imp, imp_pib, date)

# Exportações
exp1 <- ipeadata(code = "SECEX12_XVTOT12") %>% mutate(
  valor_exp = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_exp = valor_exp / 1000
) %>% mutate(
  valor_exp = number(valor_exp, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_exp, date) %>% 
  arrange(desc(date))

exp2 <- ipeadata(code = "FUNCEX12_XPT12") %>% mutate(
  ind_exp = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  ind_exp = number(ind_exp, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, ind_exp, date) %>% 
  arrange(desc(date))

exp3 <- ipeadata(code = "FUNCEX12_XQT12") %>% mutate(
  qt_exp = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  qt_exp = number(qt_exp, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, qt_exp, date) %>% 
  arrange(desc(date))

export <- left_join(exp1, exp2)
export <- left_join(export, exp3) %>% select(data_fmt, valor_exp, ind_exp, qt_exp, date)

# Exportações como % do PIB:
exp_12m <- get_series(
  code = c(valor_exp_12m = 22711)
)

exp_12m <- exp_12m %>% mutate(
  exp_12m = rollsum(valor_exp_12m, k = 12,  align = "right", na.pad = TRUE)
)

exp_pib <- left_join(as_tibble(exp_12m), as_tibble(pib_dol)) %>% drop_na() %>% select(
  date, exp_12m, pib_dol_12m
) %>% mutate(
  exp_pib = (exp_12m/pib_dol_12m) * 100
)

exp_pib <- exp_pib %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    exp_pib = number(exp_pib, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, exp_pib, date)

export <- left_join(export, exp_pib) %>%
  select(data_fmt, valor_exp, ind_exp, qt_exp, exp_pib, date)

# Exportações de bens de capital
bk1_exp <- ipeadata(code = "FUNCEX12_XVBKGCE12") %>% mutate(
  valor_bk = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_bk = valor_bk / 1000
) %>% mutate(
  valor_bk = number(valor_bk, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_bk, date) %>% 
  arrange(desc(date))

bk2_exp <- ipeadata(code = "FUNCEX12_XQBKGCE12") %>% mutate(
  qt_bk = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  qt_bk = number(qt_bk, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, qt_bk, date) %>% 
  arrange(desc(date))

bk_exp <- left_join(bk1_exp, bk2_exp) %>% select(data_fmt, valor_bk, qt_bk, date)

# Importações de bens de capital
bk1 <- ipeadata(code = "FUNCEX12_MDVBKGCE12") %>% mutate(
  valor_bk = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_bk = valor_bk / 1000
) %>% mutate(
  valor_bk = number(valor_bk, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_bk, date) %>% 
  arrange(desc(date))

bk2 <- ipeadata(code = "FUNCEX12_MDPBKGCE12") %>% mutate(
  ind_bk = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  ind_bk = number(ind_bk, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, ind_bk, date) %>% 
  arrange(desc(date))

bk3 <- ipeadata(code = "FUNCEX12_MDQBKGCE12") %>% mutate(
  qt_bk = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  qt_bk = number(qt_bk, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, qt_bk, date) %>% 
  arrange(desc(date))

bk <- left_join(bk1, bk2)
bk <- left_join(bk, bk3)

bk <- bk %>% select(data_fmt, valor_bk, ind_bk, qt_bk, date)

# Importações de bens intermediários
bi1 <- ipeadata(code = "FUNCEX12_MDVBIGCE12") %>% mutate(
  valor_bi = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_bi = valor_bi / 1000
) %>% mutate(
  valor_bi = number(valor_bi, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_bi, date) %>% 
  arrange(desc(date))

bi2 <- ipeadata(code = "FUNCEX12_MDPBIGCE12") %>% mutate(
  ind_bi = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  ind_bi = number(ind_bi, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, ind_bi, date) %>% 
  arrange(desc(date))

bi3 <- ipeadata(code = "FUNCEX12_MDQBIGCE12") %>% mutate(
  qt_bi = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  qt_bi = number(qt_bi, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, qt_bi, date) %>% 
  arrange(desc(date))

bi <- left_join(bi1, bi2)
bi <- left_join(bi, bi3)

bi <- bi %>% select(data_fmt, valor_bi, ind_bi, qt_bi, date)

# Exportações de bens intermediários
bi1_exp <- ipeadata(code = "FUNCEX12_XVBIGCE12") %>% mutate(
  valor_bi = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_bi = valor_bi / 1000
) %>% mutate(
  valor_bi = number(valor_bi, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_bi, date) %>% 
  arrange(desc(date))

bi2_exp <- ipeadata(code = "FUNCEX12_XQBIGCE12") %>% mutate(
  qt_bi = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  qt_bi = number(qt_bi, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, qt_bi, date) %>% 
  arrange(desc(date))

bi_exp <- left_join(bi1_exp, bi2_exp) %>% select(data_fmt, valor_bi, qt_bi, date)

# Importações de bens de consumo
bc <- ipeadata(code = "SECEX12_MBENCONGCE12") %>% mutate(
  valor_bc = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_bc = valor_bc / 1000
) %>% mutate(
  valor_bc = number(valor_bc, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_bc, date) %>% 
  arrange(desc(date))

# Exportações de bens de consumo
exp_bc <- ipeadata(code = "SECEX12_XBENCONGCE12") %>% mutate(
  valor_bc = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_bc = valor_bc / 1000
) %>% mutate(
  valor_bc = number(valor_bc, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_bc, date) %>% 
  arrange(desc(date))

# Importações de bens de consumo duráveis
bcd1 <- ipeadata(code = "FUNCEX12_MDVBCDGCE12") %>% mutate(
  valor_bcd = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_bcd = valor_bcd / 1000
) %>% mutate(
  valor_bcd = number(valor_bcd, bcdg.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_bcd, date) %>% 
  arrange(desc(date))

bcd2 <- ipeadata(code = "FUNCEX12_MDQBCDGCE12") %>% mutate(
  qt_bcd = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  qt_bcd = number(qt_bcd, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, qt_bcd, date) %>% 
  arrange(desc(date))

bcd <- left_join(bcd1, bcd2) %>% select(data_fmt, valor_bcd, qt_bcd, date)

# Exportações de bens de consumo duráveis
bcd1_exp <- ipeadata(code = "FUNCEX12_XVBCDGCE12") %>% mutate(
  valor_bcd = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_bcd = valor_bcd / 1000
) %>% mutate(
  valor_bcd = number(valor_bcd, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_bcd, date) %>% 
  arrange(desc(date))

bcd2_exp <- ipeadata(code = "FUNCEX12_XPBCDGCE12") %>% mutate(
  ind_bcd = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  ind_bcd = number(ind_bcd, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, ind_bcd, date) %>% 
  arrange(desc(date))

bcd3_exp <- ipeadata(code = "FUNCEX12_XQBCDGCE12") %>% mutate(
  qt_bcd = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  qt_bcd = number(qt_bcd, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, qt_bcd, date) %>% 
  arrange(desc(date))

bcd_exp <- left_join(bcd1_exp, bcd2_exp)
bcd_exp <- left_join(bcd_exp, bcd3_exp)

bcd_exp <- bcd_exp %>% select(data_fmt, valor_bcd, ind_bcd, qt_bcd, date)

# Importações de bens de consumo não duráveis
bcnd1 <- ipeadata(code = "FUNCEX12_MDVBCNDGCE12") %>% mutate(
  valor_bcnd = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_bcnd = valor_bcnd / 1000
) %>% mutate(
  valor_bcnd = number(valor_bcnd, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_bcnd, date) %>% 
  arrange(desc(date))

bcnd2 <- ipeadata(code = "FUNCEX12_MDQBCNDGCE12") %>% mutate(
  qt_bcnd = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  qt_bcnd = number(qt_bcnd, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, qt_bcnd, date) %>% 
  arrange(desc(date))

bcnd <- left_join(bcnd1, bcnd2) %>% select(data_fmt, valor_bcnd, qt_bcnd, date)

# Exportações de bens de consumo não duráveis
bcnd1_exp <- ipeadata(code = "FUNCEX12_XVBCNDGCE12") %>% mutate(
  valor_bcnd = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_bcnd = valor_bcnd / 1000
) %>% mutate(
  valor_bcnd = number(valor_bcnd, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_bcnd, date) %>% 
  arrange(desc(date))

bcnd2_exp <- ipeadata(code = "FUNCEX12_XQBCNDGCE12") %>% mutate(
  qt_bcnd = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  qt_bcnd = number(qt_bcnd, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, qt_bcnd, date) %>% 
  arrange(desc(date))

bcnd_exp <- left_join(bcnd1_exp, bcnd2_exp) %>% select(data_fmt, valor_bcnd, qt_bcnd, date)

# Importações de combustíveis
comb1 <- ipeadata(code = "FUNCEX12_MDVCOMBGCE12") %>% mutate(
  valor_comb = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_comb = valor_comb / 1000
) %>% mutate(
  valor_comb = number(valor_comb, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_comb, date) %>% 
  arrange(desc(date))

comb2 <- ipeadata(code = "FUNCEX12_MDPCOMBGCE12") %>% mutate(
  ind_comb = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  ind_comb = number(ind_comb, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, ind_comb, date) %>% 
  arrange(desc(date))

comb3 <- ipeadata(code = "FUNCEX12_MDQCOMBGCE12") %>% mutate(
  qt_comb = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  qt_comb = number(qt_comb, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, qt_comb, date) %>% 
  arrange(desc(date))

comb <- left_join(comb1, comb2)
comb <- left_join(comb, comb3)

comb <- comb %>% select(data_fmt, valor_comb, ind_comb, qt_comb, date)

# Exportações de combustíveis
comb1_exp <- ipeadata(code = "FUNCEX12_XVCOMBGCE12") %>% mutate(
  valor_comb = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_comb = valor_comb / 1000
) %>% mutate(
  valor_comb = number(valor_comb, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_comb, date) %>% 
  arrange(desc(date))

comb2_exp <- ipeadata(code = "FUNCEX12_XPCOMBGCE12") %>% mutate(
  ind_comb = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  ind_comb = number(ind_comb, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, ind_comb, date) %>% 
  arrange(desc(date))

comb3_exp <- ipeadata(code = "FUNCEX12_XQCOMBGCE12") %>% mutate(
  qt_comb = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  qt_comb = number(qt_comb, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, qt_comb, date) %>% 
  arrange(desc(date))

comb_exp <- left_join(comb1_exp, comb2_exp)
comb_exp <- left_join(comb_exp, comb3_exp)

comb_exp <- comb_exp %>% select(data_fmt, valor_comb, ind_comb, qt_comb, date)

# Balança de serviços (códigos 22719, 22720 e 22721)
bs_rec <- get_series(
  code = c(valor_rec = 22720)
)

bs_desp <- get_series(
  code = c(valor_desp = 22721)
)

bs_saldo <- get_series(
  code = c(valor_saldo = 22719)
)

bs <- left_join(bs_rec, bs_desp)
bs <- left_join(bs, bs_saldo)

bs <- bs %>% mutate(
    valor_rec = valor_rec / 1000,
    valor_desp = valor_desp / 1000,
    valor_saldo = valor_saldo / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rec = number(valor_rec, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_desp = number(valor_desp, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_saldo = number(valor_saldo, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  ) %>% select(data_fmt, valor_rec, valor_desp, valor_saldo, date) %>% 
  arrange(desc(date))

# Renda primária (códigos 22800, 22801 e 22802)
rp_rec <- get_series(
  code = c(valor_rec = 22801)
)

rp_desp <- get_series(
  code = c(valor_desp = 22802)
)

rp_saldo <- get_series(
  code = c(valor_saldo = 22800)
)

rp <- left_join(rp_rec, rp_desp)
rp <- left_join(rp, rp_saldo)

rp <- rp %>% mutate(
    valor_rec = valor_rec / 1000,
    valor_desp = valor_desp / 1000,
    valor_saldo = valor_saldo / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rec = number(valor_rec, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_desp = number(valor_desp, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_saldo = number(valor_saldo, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  ) %>% select(data_fmt, valor_rec, valor_desp, valor_saldo, date) %>% 
  arrange(desc(date))

# Renda primária como % do PIB:
rp_12m <- get_series(
  code = c(valor_rp_12m = 22800)
)

rp_12m <- rp_12m %>% mutate(
  rp_12m = rollsum(valor_rp_12m, k = 12,  align = "right", na.pad = TRUE)
)

rp_pib <- left_join(as_tibble(rp_12m), as_tibble(pib_dol)) %>% drop_na() %>% select(
  date, rp_12m, pib_dol_12m
) %>% mutate(
  rp_pib = (rp_12m/pib_dol_12m) * 100
)

rp_pib <- rp_pib %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    rp_pib = number(rp_pib, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, rp_pib, date)

rp <- left_join(rp, rp_pib) %>%
  select(data_fmt, valor_rec, valor_desp, valor_saldo, rp_pib, date)

# Renda secundária (códigos 22838, 22839 e 22840)
rs_rec <- get_series(
  code = c(valor_rec = 22839)
)

rs_desp <- get_series(
  code = c(valor_desp = 22840)
)

rs_saldo <- get_series(
  code = c(valor_saldo = 22838)
)

rs <- left_join(rs_rec, rs_desp)
rs <- left_join(rs, rs_saldo)

rs <- rs %>% mutate(
    valor_rec = valor_rec / 1000,
    valor_desp = valor_desp / 1000,
    valor_saldo = valor_saldo / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rec = number(valor_rec, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_desp = number(valor_desp, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_saldo = number(valor_saldo, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  ) %>% select(data_fmt, valor_rec, valor_desp, valor_saldo, date) %>% 
  arrange(desc(date))

# Conta capital (códigos 22851, 22852 e 22853)
cc_rec <- get_series(
  code = c(valor_rec = 22852)
)

cc_desp <- get_series(
  code = c(valor_desp = 22853)
)

cc_saldo <- get_series(
  code = c(valor_saldo = 22851)
)

cc <- left_join(cc_rec, cc_desp)
cc <- left_join(cc, cc_saldo)

cc <- cc %>% mutate(
    valor_rec = valor_rec / 1000,
    valor_desp = valor_desp / 1000,
    valor_saldo = valor_saldo / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rec = number(valor_rec, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_desp = number(valor_desp, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_saldo = number(valor_saldo, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  ) %>% select(data_fmt, valor_rec, valor_desp, valor_saldo, date) %>% 
  arrange(desc(date))

# Conta capital como % do PIB:
cc_12m <- get_series(
  code = c(valor_cc_12m = 22851)
)

cc_12m <- cc_12m %>% mutate(
  cc_12m = rollsum(valor_cc_12m, k = 12,  align = "right", na.pad = TRUE)
)

cc_pib <- left_join(as_tibble(cc_12m), as_tibble(pib_dol)) %>% drop_na() %>% select(
  date, cc_12m, pib_dol_12m
) %>% mutate(
  cc_pib = (cc_12m/pib_dol_12m) * 100
)

cc_pib <- cc_pib %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    cc_pib = number(cc_pib, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, cc_pib, date)

cc <- left_join(cc, cc_pib) %>%
  select(data_fmt, valor_rec, valor_desp, valor_saldo, cc_pib, date)

# Conta capital - Ativos não financeiros não produzidos (códigos 22854, 22855 e 22856)
cc_anfnp_rec <- get_series(
  code = c(valor_rec = 22855)
)

cc_anfnp_desp <- get_series(
  code = c(valor_desp = 22856)
)

cc_anfnp_saldo <- get_series(
  code = c(valor_saldo = 22854)
)

cc_anfnp <- left_join(cc_anfnp_rec, cc_anfnp_desp)
cc_anfnp <- left_join(cc_anfnp, cc_anfnp_saldo)

cc_anfnp <- cc_anfnp %>% mutate(
    valor_rec = valor_rec / 1000,
    valor_desp = valor_desp / 1000,
    valor_saldo = valor_saldo / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rec = number(valor_rec, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_desp = number(valor_desp, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_saldo = number(valor_saldo, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  ) %>% select(data_fmt, valor_rec, valor_desp, valor_saldo, date) %>% 
  arrange(desc(date))

# Conta capital - Ativos não financeiros não produzidos (passes de atletas) (códigos 22857, 22858 e 22859)
cc_anfnp_ps_rec <- get_series(
  code = c(valor_rec = 22858)
)

cc_anfnp_ps_desp <- get_series(
  code = c(valor_desp = 22859)
)

cc_anfnp_ps_saldo <- get_series(
  code = c(valor_saldo = 22857)
)

cc_anfnp_ps <- left_join(cc_anfnp_ps_rec, cc_anfnp_ps_desp)
cc_anfnp_ps <- left_join(cc_anfnp_ps, cc_anfnp_ps_saldo)

cc_anfnp_ps <- cc_anfnp_ps %>% mutate(
    valor_rec = valor_rec / 1000 * 1000,
    valor_desp = valor_desp / 1000 * 1000,
    valor_saldo = valor_saldo / 1000 * 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rec = number(valor_rec, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_desp = number(valor_desp, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_saldo = number(valor_saldo, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  ) %>% select(data_fmt, valor_rec, valor_desp, valor_saldo, date) %>% 
  arrange(desc(date))

# Conta financeira (código 22863)
cf <- get_series(
  code = c(valor = 22863)
)

cf <- cf %>% mutate(
    valor = valor / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor = number(valor, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  ) %>% select(data_fmt, valor, date) %>% 
  arrange(desc(date))

# Conta financeira como % do PIB:
cf_12m <- get_series(
  code = c(valor_cf_12m = 22863)
)

cf_12m <- cf_12m %>% mutate(
  cf_12m = rollsum(valor_cf_12m, k = 12,  align = "right", na.pad = TRUE)
)

cf_pib <- left_join(as_tibble(cf_12m), as_tibble(pib_dol)) %>% drop_na() %>% select(
  date, cf_12m, pib_dol_12m
) %>% mutate(
  cf_pib = (cf_12m/pib_dol_12m) * 100
)

cf_pib <- cf_pib %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    cf_pib = number(cf_pib, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, cf_pib, date)

cf <- left_join(cf, cf_pib) %>%
  select(data_fmt, valor, cf_pib, date)

# Investimento direto (códigos 22864, 22865 e 22885)
ide <- get_series(
  code = c(valor_ide = 22865)
)

idp <- get_series(
  code = c(valor_idp = 22885)
)

id <- get_series(
  code = c(valor_id = 22864)
)

inv_dir <- left_join(ide, idp)
inv_dir <- left_join(inv_dir, id)

inv_dir <- inv_dir %>% mutate(
    valor_ide = valor_ide / 1000,
    valor_idp = valor_idp / 1000,
    valor_id = valor_id / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_ide = number(valor_ide, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_idp = number(valor_idp, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_id = number(valor_id, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  ) %>% select(data_fmt, valor_ide, valor_idp, valor_id, date) %>% 
  arrange(desc(date))

# Investimento em carteira (código 22905)
inv_cart <- get_series(
  code = c(valor = 22905)
)

inv_cart <- inv_cart %>% mutate(
    valor = valor / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor = number(valor, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  ) %>% select(data_fmt, valor, date) %>% 
  arrange(desc(date))

# Conta financeira (outros investimentos) (códigos 22969, 22970 e 22971)
outros_inv_ativos <- get_series(
  code = c(valor_outros_inv_ativos = 22970)
)

outros_inv_passivos <- get_series(
  code = c(valor_outros_inv_passivos = 22971)
)

outros_inv_liq <- get_series(
  code = c(valor_outros_inv_liq = 22969)
)

outros_inv <- left_join(outros_inv_ativos, outros_inv_passivos)
outros_inv <- left_join(outros_inv, outros_inv_liq)

outros_inv <- outros_inv %>% mutate(
    valor_outros_inv_ativos = valor_outros_inv_ativos / 1000,
    valor_outros_inv_passivos = valor_outros_inv_passivos / 1000,
    valor_outros_inv_liq = valor_outros_inv_liq / 1000
) %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_outros_inv_ativos = number(valor_outros_inv_ativos, big.mark = ".",
                                     decimal.mark = ",", accuracy = 0.001),
    valor_outros_inv_passivos = number(valor_outros_inv_passivos, big.mark = ".",
                                       decimal.mark = ",", accuracy = 0.001),
    valor_outros_inv_liq = number(valor_outros_inv_liq, big.mark = ".",
                                  decimal.mark = ",", accuracy = 0.001)) %>% select(
                                    data_fmt, valor_outros_inv_ativos, valor_outros_inv_passivos, valor_outros_inv_liq, date) %>% arrange(desc(date))

# Erros e omissões (código 23060)
eo <- get_series(
  code = c(valor = 23060)
) %>% mutate(
    valor = valor / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor = number(valor, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  ) %>% select(data_fmt, valor, date) %>% 
  arrange(desc(date))

# Ativos de reservas (código 23043)
ativ_res <- get_series(
  code = c(valor = 23043)
) %>% mutate(
    valor = valor / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor = number(valor, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  ) %>% select(data_fmt, valor, date) %>% 
  arrange(desc(date))

# Índice de commodities - Brasil (códigos 22574 e 29042)
commod_bra <- get_series(
  code = c(valor_rs = 27574)
) %>% mutate(
  valor_rs_mg = (valor_rs/lag(valor_rs) - 1) * 100,
  valor_rs_12m = (valor_rs/lag(valor_rs, 12) - 1) * 100
)

commod_usd <- get_series(
  code = c(valor_usd = 29042)
) %>% mutate(
  valor_usd_mg = (valor_usd/lag(valor_usd) - 1) * 100,
  valor_usd_12m = (valor_usd/lag(valor_usd, 12) - 1) * 100
)

commod <- left_join(commod_bra, commod_usd) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rs = number(valor_rs, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_rs_mg = number(valor_rs_mg, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_rs_12m = number(valor_rs_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd = number(valor_usd, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd_mg = number(valor_usd_mg, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd_12m = number(valor_usd_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>% select(data_fmt, valor_rs, valor_rs_mg, valor_rs_12m, valor_usd, valor_usd_mg, valor_usd_12m, date) %>% 
  arrange(desc(date))

# Índice de commodities - Agropecuária (códigos 22574 e 29042)
commod_agrop <- get_series(
  code = c(valor_rs = 27575)
) %>% mutate(
  valor_rs_mg = (valor_rs/lag(valor_rs) - 1) * 100,
  valor_rs_12m = (valor_rs/lag(valor_rs, 12) - 1) * 100
)

commod_usd_agrop <- get_series(
  code = c(valor_usd = 29041)
) %>% mutate(
  valor_usd_mg = (valor_usd/lag(valor_usd) - 1) * 100,
  valor_usd_12m = (valor_usd/lag(valor_usd, 12) - 1) * 100
)

commod_agrop <- left_join(commod_agrop, commod_usd_agrop) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rs = number(valor_rs, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_rs_mg = number(valor_rs_mg, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_rs_12m = number(valor_rs_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd = number(valor_usd, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd_mg = number(valor_usd_mg, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd_12m = number(valor_usd_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>% select(data_fmt, valor_rs, valor_rs_mg, valor_rs_12m, valor_usd, valor_usd_mg, valor_usd_12m, date) %>% 
  arrange(desc(date))

# Índice de commodities - Metal (códigos 27576 e 29040)
commod_metal <- get_series(
  code = c(valor_rs = 27576)
) %>% mutate(
  valor_rs_mg = (valor_rs/lag(valor_rs) - 1) * 100,
  valor_rs_12m = (valor_rs/lag(valor_rs, 12) - 1) * 100
)

commod_usd_metal <- get_series(
  code = c(valor_usd = 29040)
) %>% mutate(
  valor_usd_mg = (valor_usd/lag(valor_usd) - 1) * 100,
  valor_usd_12m = (valor_usd/lag(valor_usd, 12) - 1) * 100
)

commod_metal <- left_join(commod_metal, commod_usd_metal) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rs = number(valor_rs, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_rs_mg = number(valor_rs_mg, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_rs_12m = number(valor_rs_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd = number(valor_usd, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd_mg = number(valor_usd_mg, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd_12m = number(valor_usd_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>% select(data_fmt, valor_rs, valor_rs_mg, valor_rs_12m, valor_usd, valor_usd_mg, valor_usd_12m, date) %>% 
  arrange(desc(date))

# Índice de commodities - Energia (códigos 27577 e 29039)
commod_energia <- get_series(
  code = c(valor_rs = 27577)
) %>% mutate(
  valor_rs_mg = (valor_rs/lag(valor_rs) - 1) * 100,
  valor_rs_12m = (valor_rs/lag(valor_rs, 12) - 1) * 100
)

commod_usd_energia <- get_series(
  code = c(valor_usd = 29039)
) %>% mutate(
  valor_usd_mg = (valor_usd/lag(valor_usd) - 1) * 100,
  valor_usd_12m = (valor_usd/lag(valor_usd, 12) - 1) * 100
)

commod_energia <- left_join(commod_energia, commod_usd_energia) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rs = number(valor_rs, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_rs_mg = number(valor_rs_mg, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_rs_12m = number(valor_rs_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd = number(valor_usd, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd_mg = number(valor_usd_mg, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd_12m = number(valor_usd_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>% select(data_fmt, valor_rs, valor_rs_mg, valor_rs_12m, valor_usd, valor_usd_mg, valor_usd_12m, date) %>% 
  arrange(desc(date))

# Petróleo Brent e WTI
brent <- ipeadata(code = "EIA366_PBRENT366") %>% mutate(
  var_mg_brent = (value / lag(value) - 1) * 100
) %>% mutate(
  data_fmt = format(date, "%d/%m/%Y"),
  valor_brent = value
) %>% mutate(
  valor_brent = number(valor_brent, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
  var_mg_brent = number(var_mg_brent, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
) %>% select(data_fmt, valor_brent, var_mg_brent, date) %>%
    arrange(desc(date))

brent_mensal <- ipeadata(code = "EIA366_PBRENT366") %>% mutate(
  valor_brent = value,
  ano_mes = format(date, "%Y-%m")
) %>% aggregate(
  valor_brent ~ ano_mes,
  FUN = "mean"
) %>% mutate(
  var_mg_brent = (valor_brent / lag(valor_brent) - 1) * 100,
  var_12m_brent = (valor_brent / lag(valor_brent, 12) - 1) * 100
) %>% mutate(
  valor_brent = number(valor_brent, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
  var_mg_brent = number(var_mg_brent, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
  var_12m_brent = number(var_12m_brent, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
) %>% select(ano_mes, valor_brent, var_mg_brent, var_12m_brent) %>%
    arrange(desc(ano_mes))

wti <- wti <- wti <- ipeadata(code = "EIA366_PWTI366") %>% mutate(
  var_mg_wti = (value / lag(value) - 1) * 100
) %>% mutate(
  data_fmt = format(date, "%d/%m/%Y"),
  valor_wti = value
) %>% mutate(
  valor_wti = number(valor_wti, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
  var_mg_wti = number(var_mg_wti, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
) %>% select(data_fmt, valor_wti, var_mg_wti, date) %>%
    arrange(desc(date))

wti_mensal <- ipeadata(code = "EIA366_PWTI366") %>% mutate(
  valor_wti = value,
  ano_mes = format(date, "%Y-%m")
) %>% aggregate(
  valor_wti ~ ano_mes,
  FUN = "mean"
) %>% mutate(
  var_mg_wti = (valor_wti / lag(valor_wti) - 1) * 100,
  var_12m_wti = (valor_wti / lag(valor_wti, 12) - 1) * 100
) %>% mutate(
  valor_wti = number(valor_wti, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
  var_mg_wti = number(var_mg_wti, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
  var_12m_wti = number(var_12m_wti, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
) %>% select(ano_mes, valor_wti, var_mg_wti, var_12m_wti) %>%
    arrange(desc(ano_mes))

petroleo <- left_join(brent, wti) %>% select(
  data_fmt, valor_brent, var_mg_brent, valor_wti, var_mg_wti, date
)

petroleo_mensal <- left_join(brent_mensal, wti_mensal) %>% mutate(
  date = ym(ano_mes)
) %>% mutate(
  data_fmt = format(date, "%m/%Y")
) %>% select(data_fmt, valor_brent, var_mg_brent, var_12m_brent, valor_wti, var_mg_wti, var_12m_wti,
             date)

# Soja
soja <- ipeadata(code = "IFS12_SOJAGP12") %>% mutate(
  var_mg = (value / lag(value) - 1) * 100,
  var_12m = (value / lag(value, 12) - 1) * 100
) %>% mutate(
  data_fmt = format(date, "%m/%Y"),
  valor = value
) %>% mutate(
  valor = number(valor, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
  var_mg = number(var_mg, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
  var_12m = number(var_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
) %>% select(data_fmt, valor, var_mg, var_12m, date) %>%
    arrange(desc(date))

```

# Visão geral
Columns {.sidebar} {data-width=250}
-----------------------------------------------------------------------

<br><br><br><br><br><br><br><br><br><br>

<div style="font-size:18px">
O presente _dashboard_ objetiva apresentar de forma centralizada uma série de dados macroeconômicos relacionados às contas externas da economia brasileira nas últimas décadas.
São apresentadas informações referentes ao balanço de pagamentos, preços e índices de commodities, dívida externa, reservas internacionais, taxa de câmbio e termos de troca, através de dados com frequências diárias, mensais, trimestrais e anuais. O painel é automatizado e atualizado diariamente.


<br><br>

**Autor:** [Daniel Consul de Antoni](http://lattes.cnpq.br/3579437273217709)

**Contato:** daniel.consul@outlook.com

<br><br>

**Última atualização:** `r format(Sys.Date(), format = "%d/%m/%Y")`
</div>

Columns {data-width=750}
-----------------------------------------------------------------------

```{r, out.width="90%", fig.align='center', vertical_layout = fill}
knitr::include_graphics("visao_geral.png")
```

# 1) Transações correntes {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

O **balanço de pagamentos (BP)** é uma peça contábil que resume as transações econômicas entre residentes no país e não residentes em um determinado período de tempo. A compilação das estatísticas de BP no Brasil tem como principal fonte de informação as transações financeiras registradas no Sistema Câmbio do Banco Central do Brasil (BCB) (no jargão internacional, um sistema do tipo International Transactions Reporting System (ITRS)). Dessa forma, o BP brasileiro é compilado fundamentalmente a partir dos registros individuais das transações (microdados), permitindo ao Banco Central do Brasil o acompanhamento tempestivo dos fluxos da economia brasileira com o exterior.

<br>

A rubrica de **transações correntes (TC)** agrega os seguintes itens: balança comercial (bens), balança de serviços, renda primária e renda secundária, e **registra todas as transações entre os residentes no Brasil e os residentes no exterior, independentemente da moeda utilizada**, realizadas por intermédio do sistema bancário ou de agentes credenciados pelo Banco Central do Brasil.

<br>

Os dados como % do PIB referem-se ao acumulado em 12 meses.

<br>

**Fonte:** Códigos 22702 (receita), 22703 (despesa), 22701 (saldo TC) e 4385 (PIB em dólares) no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Receitas (1)
```{r}
plot_ly(
  data = trans_cor, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_rec)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### Despesas (2)
```{r}
plot_ly(
  data = trans_cor, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_desp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### Saldo TC (3) (1-2)
```{r}
plot_ly(
  data = trans_cor, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_saldo)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### % do PIB
```{r}
plot_ly(
  data = trans_corr_pib, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", trans_corr_pib)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "% do PIB")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese TC
```{r}
reactable(
  trans_cor[, -6],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rec = colDef(
      name = "Receitas (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_desp = colDef(
      name = "Despesas (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo = colDef(
      name = "Saldo TC (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    trans_corr_pib = colDef(
      name = "% do PIB",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1) Balança comercial (bens) {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A **balança Comercial (bens) (BC)** contabiliza as transações de itens que são resultados de atividades produtivas, tangíveis, e sobre os quais direitos de propriedade podem ser estabelecidos e transferidos através de transações. A BC é dividida em exportações e importações. As **exportações** registram a venda de bens de residentes a não residentes, enquanto as **importações** registram a compra de bens por residentes de não residentes. A rubrica é fundada nas estatísticas de comércio exterior compiladas pelo Ministério do Desenvolvimento, Indústria, Comércio e Serviços (MDIC), com base nos registros alfandegários do Siscomex, que são ajustadas pelo Banco Central com o intuito de ampliação da cobertura. Por conta disso, às importações publicadas pelo MDIC são incorporadas as compras de energia elétrica sem registro no Siscomex. Adicionalmente, exportações e importações são ajustadas pela inclusão das operações fictas, nas quais o produto é transacionado com um não residente, mas não atravessa a fronteira do país em que se encontra; e, por fim, a balança comercial do balanço de pagamentos incorpora encomendas postais internacionais.

<br>

Os dados como % do PIB referem-se ao acumulado em 12 meses.

<br>

**Fonte**: Códigos 22708 (exportações), 22709 (importações), 22707 (saldo BC) e 4385 (PIB em dólares) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Exportações (1)
```{r}
plot_ly(
  data = bal_com, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_exp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### Importações (2)
```{r}
plot_ly(
  data = bal_com, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_imp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### Saldo BC (3) (1-2)
```{r}
plot_ly(
  data = bal_com, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_saldo)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### % do PIB
```{r}
plot_ly(
  data = bal_com, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", bal_com_pib)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "% do PIB")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese BC
```{r}
reactable(
  bal_com[, -6],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_exp = colDef(
      name = "Exportações (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_imp = colDef(
      name = "Importações (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo = colDef(
      name = "Saldo BC (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    bal_com_pib = colDef(
      name = "% do PIB",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.1) Exportações {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

As **exportações** são os valores das vendas para o exterior e outras remessas de bens de propriedade de residentes no país, registrado na Balança Comercial do Balanço de Pagamentos. O valor _free on board_ (FOB) representa o preço em dólares no embarque, sendo o importador responsável pelo frete, seguro e custos posteriores. Neste caso, considera-se a exportação referente ao volume total do país.

<br>

Os dados como % do PIB referem-se ao acumulado em 12 meses.

<br>

**Fonte:** Secretaria de Comércio Exterior (SECEX) do Ministério do Desenvolvimento, Indústria, Comércio e Serviços (MDIC), Fundação Centro de Estudos do Comércio Exterior (FUNCEX) via Ipeadata e códigos 22711 (exportações) e 4385 (PIB em dólares) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil (SGST/BCB).

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = export, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_exp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 5
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índíce de preços
```{r}
plot_ly(
  data = export, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", ind_exp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 10
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de quantum
```{r}
plot_ly(
  data = export, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", qt_exp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 20
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### % do PIB
```{r}
plot_ly(
  data = export, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", exp_pib)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "% do PIB",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese exportações totais
```{r}
reactable(
  export[, -6],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_exp = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    ind_exp = colDef(
      name = "Índice de preços",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    qt_exp = colDef(
      name = "Índice de quantum",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    exp_pib = colDef(
      name = "% do PIB",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.1.1) Bens de capital {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

O setor de exportação de **bens de capital** (BK) é utilizado para a produção de outros bens e inclui, por exemplo, máquinas e ferramentas, tratores e material de transporte.

O índice de preços e o índice de quantum (médias 2018 = 100) captam o efeito das variações das quantidades físicas exportadas sobre a evolução do valor de exportação. São obtidos, implicitamente, por meio do deflacionamento dos valores exportados pelas variações dos índices de preço de exportação.

<br>

**Fonte:** Fundação Centro de Estudos do Comércio Exterior (FUNCEX) via Ipeadata.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = bk_exp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_bk)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de quantum
```{r}
plot_ly(
  data = bk_exp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", qt_bk)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 20
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Síntese exportações de bens de capital
```{r}
reactable(
  bk_exp[, -4],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_bk = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    qt_bk = colDef(
      name = "Índice de quantum",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.1.2) Bens intermediários {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

O setor de exportação de **bens intermediários** (BI) é utilizado como insumo para a produção de outros bens e incluem, entre outros itens, partes e peças para veículos, componentes eletro-eletrônicos, minérios e produtos siderúrgicos básicos, elementos e compostos químicos e soja em grão. 

O índice de preços e o índice de quantum (médias 2018 = 100) captam o efeito das variações das quantidades físicas exportadas sobre a evolução do valor de exportação. São obtidos, implicitamente, por meio do deflacionamento dos valores exportados pelas variações dos índices de preço de exportação.

<br>

**Fonte:** Fundação Centro de Estudos do Comércio Exterior (FUNCEX) via Ipeadata.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = bi_exp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_bi)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 2
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de quantum
```{r}
plot_ly(
  data = bi_exp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", qt_bi)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 20
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Síntese exportações de bens intermediários
```{r}
reactable(
  bi_exp[, -4],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_bi = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    qt_bi = colDef(
      name = "Índice de quantum",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.1.3) Bens de consumo {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A exportação de **bens de consumo** refere-se a bens duráveis e não duráveis destinados ao uso de consumidores finais.

<br>

**Fonte:** Secretaria de Comércio Exterior (SECEX) do Ministério do Desenvolvimento, Indústria, Comércio e Serviços (MDIC) via Ipeadata.

Column {data-width=600} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = exp_bc, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_bc)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=200} {.tabset}
-----------------------------------------------------------------------

### Síntese exportações de bens de consumo
```{r}
reactable(
  exp_bc[, -3],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_bc = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.1.3.1) Bens de consumo duráveis {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

O setor de exportação de **bens de consumo duráveis** compreende bens que possuem uma vida útil esperada de 1 a 3 anos ou mais e com valores relativamente elevados, tais como refrigeradores, máquinas de lavar, automóveis de passeio, motocicletas, aparelhos eletrodomésticos e aparelhos celulares.

Os índices de preços e de quantum (médias 2018 = 100) captam o efeito das variações das quantidades físicas exportadas sobre a evolução do valor de exportação. São obtidos, implicitamente, por meio do deflacionamento dos valores exportados pelas variações dos índices de preço de exportação.

<br>

**Fonte:** Fundação Centro de Estudos do Comércio Exterior (FUNCEX) via Ipeadata.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = bcd_exp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_bcd)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 0.1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de preços
```{r}
plot_ly(
  data = bcd_exp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", ind_bcd)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 5
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de quantum
```{r}
plot_ly(
  data = bcd_exp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", qt_bcd)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 10
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Síntese exportações de bens de consumo duráveis
```{r}
reactable(
  bcd_exp[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_bcd = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
      ind_bcd = colDef(
      name = "Índice de preços",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    qt_bcd = colDef(
      name = "Índice de quantum",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.1.3.2) Bens de consumo não duráveis {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

O setor de exportação de **bens de consumo não duráveis** é compreendido por bens que possuem uma vida útil inferior a um ano e inclui produtos de alimentação e bebidas em geral, os artigos de vestuário e os brinquedos, entre outros.

O índice de quantum (média 2018 = 100) capta o efeito das variações das quantidades físicas exportadas sobre a evolução do valor de exportação. É obtido, implicitamente, por meio do deflacionamento dos valores exportados pelas variações dos índices de preço de exportação.

<br>

**Fonte:** Fundação Centro de Estudos do Comércio Exterior (FUNCEX) via Ipeadata.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = bcnd_exp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_bcnd)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de quantum
```{r}
plot_ly(
  data = bcnd_exp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", qt_bcnd)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 10
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Síntese exportações de bens de consumo não duráveis
```{r}
reactable(
  bcnd_exp[, -4],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_bcnd = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    qt_bcnd = colDef(
      name = "Índice de quantum",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.1.4) Combustíveis {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

Estão agregados, entre outros, na grande categoria econômica **combustíveis** os óleos brutos de petróleo, a gasolina e o álcool carburante e também os combustíveis e lubrificantes utilizados em aeronaves e embarcações de trânsito internacional, ou seja, aqueles considerados como consumo de bordo. 

O índice de preços e o índice de quantum (médias 2018 = 100) captam o efeito das variações das quantidades físicas importadas sobre a evolução do valor de importação. São obtidos, implicitamente, por meio do deflacionamento dos valores importados pelas variações dos índices de preço de importação.

<br>

**Fonte:** Fundação Centro de Estudos do Comércio Exterior (FUNCEX) via Ipeadata.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = comb_exp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_comb)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de preços
```{r}
plot_ly(
  data = comb_exp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", ind_comb)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 20
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de quantum
```{r}
plot_ly(
  data = comb_exp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", qt_comb)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 20
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Síntese exportações de combustíveis
```{r}
reactable(
  comb_exp[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_comb = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    ind_comb = colDef(
      name = "Índice de preços",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    qt_comb = colDef(
      name = "Índice de quantum",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.2) Importações {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

As **importações** correspondem às compras de mercadorias por residentes no país, registradas na Balança Comercial. O valor _free on board_ (FOB) representa o preço em dólares no embarque, sendo o importador responsável pelo frete, seguro e custos posteriores. Neste caso, considera-se a importação referente ao volume total do país.

<br>

Os dados como % do PIB referem-se ao acumulado em 12 meses.

<br>

**Fonte:** Ministério do Desenvolvimento, Indústria, Comércio e Serviços (MDIC), Fundação Centro de Estudos do Comércio Exterior (FUNCEX) via Ipeadata e códigos 22712 (importações) e 4385 (PIB em dólares) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil (SGST/BCB).

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = import, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_imp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 5
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índíce de preços
```{r}
plot_ly(
  data = import, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", ind_imp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 10
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de quantum
```{r}
plot_ly(
  data = import, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", qt_imp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 20
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### % do PIB
```{r}
plot_ly(
  data = import, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", imp_pib)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "%",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese importações totais
```{r}
reactable(
  import[, -6],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_imp = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    ind_imp = colDef(
      name = "Índice de preços",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    qt_imp = colDef(
      name = "Índice de quantum",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    imp_pib = colDef(
      name = "% do PIB",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.2.1) Bens de capital {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

O setor de importação de **bens de capital** (BK) é utilizado para a produção de outros bens e inclui, por exemplo, máquinas e ferramentas, tratores e material de transporte.

O índice de preços e o índice de quantum (médias 2018 = 100) captam o efeito das variações das quantidades físicas importadas sobre a evolução do valor de importação. São obtidos, implicitamente, por meio do deflacionamento dos valores importados pelas variações dos índices de preço de importação.

<br>

**Fonte:** Fundação Centro de Estudos do Comércio Exterior (FUNCEX) via Ipeadata.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = bk, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_bk)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de preços
```{r}
plot_ly(
  data = bk, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", ind_bk)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 10
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de quantum
```{r}
plot_ly(
  data = bk, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", qt_bk)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 50
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Síntese importações de bens de capital
```{r}
reactable(
  bk[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_bk = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    ind_bk = colDef(
      name = "Índice de preços",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    qt_bk = colDef(
      name = "Índice de quantum",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.2.2) Bens intermediários {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

O setor de importação de **bens intermediários** (BI) é utilizado como insumo para a produção de outros bens e incluem, entre outros itens, partes e peças para veículos, componentes eletro-eletrônicos, minérios e produtos siderúrgicos básicos, elementos e compostos químicos e soja em grão. 

O índice de preços e o índice de quantum (médias 2018 = 100) captam o efeito das variações das quantidades físicas importadas sobre a evolução do valor de importação. São obtidos, implicitamente, por meio do deflacionamento dos valores importados pelas variações dos índices de preço de importação.

<br>

**Fonte:** Fundação Centro de Estudos do Comércio Exterior (FUNCEX) via Ipeadata.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = bi, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_bi)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 2
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de preços
```{r}
plot_ly(
  data = bi, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", ind_bi)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 10
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de quantum
```{r}
plot_ly(
  data = bi, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", qt_bi)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 20
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Síntese importações de bens intermediários
```{r}
reactable(
  bi[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_bi = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    ind_bi = colDef(
      name = "Índice de preços",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    qt_bi = colDef(
      name = "Índice de quantum",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.2.3) Bens de consumo {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A importação de **bens de consumo** refere-se a bens duráveis e não duráveis destinados ao uso de consumidores finais.

<br>

**Fonte:** Secretaria de Comércio Exterior (SECEX) do Ministério do Desenvolvimento, Indústria, Comércio e Serviços (MDIC) via Ipeadata.

Column {data-width=600} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = bc, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_bc)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=200} {.tabset}
-----------------------------------------------------------------------

### Síntese importações de bens de consumo
```{r}
reactable(
  bc[, -3],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_bc = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.2.3.1) Bens de consumo duráveis {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

O setor de importação de **bens de consumo duráveis** compreende bens que possuem uma vida útil esperada de 1 a 3 anos ou mais e com valores relativamente elevados, tais como refrigeradores, máquinas de lavar, automóveis de passeio, motocicletas, aparelhos eletrodomésticos e aparelhos celulares.

O índice de quantum (média 2018 = 100) capta o efeito das variações das quantidades físicas importadas sobre a evolução do valor de importação. É obtido, implicitamente, por meio do deflacionamento dos valores importados pelas variações dos índices de preço de importação.

<br>

**Fonte:** Fundação Centro de Estudos do Comércio Exterior (FUNCEX) via Ipeadata.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = bcd, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_bcd)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de quantum
```{r}
plot_ly(
  data = bcd, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", qt_bcd)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 40
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Síntese importações de bens de consumo duráveis
```{r}
reactable(
  bcd[, -4],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_bcd = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    qt_bcd = colDef(
      name = "Índice de quantum",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.2.3.2) Bens de consumo não duráveis {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

O setor de **bens de consumo não duráveis** compreende bens que possuem uma vida útil inferior a um ano e incluem produtos de alimentação e bebidas em geral, os artigos de vestuário e os brinquedos, entre outros.

O índice de quantum (média 2018 = 100) capta o efeito das variações das quantidades físicas importadas sobre a evolução do valor de importação. É obtido, implicitamente, por meio do deflacionamento dos valores importados pelas variações dos índices de preço de importação.

<br>

**Fonte:** Fundação Centro de Estudos do Comércio Exterior (FUNCEX) via Ipeadata.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = bcnd, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_bcnd)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 2
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de quantum
```{r}
plot_ly(
  data = bcnd, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", qt_bcnd)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 20
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Síntese importações de bens de consumo não duráveis
```{r}
reactable(
  bcnd[, -4],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_bcnd = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    qt_bcnd = colDef(
      name = "Índice de quantum",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.2.4) Combustíveis {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

Estão agregados, entre outros, na grande categoria econômica **combustíveis** os óleos brutos de petróleo, a gasolina e o álcool carburante e também os combustíveis e lubrificantes utilizados em aeronaves e embarcações de trânsito internacional, ou seja, aqueles considerados como consumo de bordo. 

O índice de preços e o índice de quantum (médias 2018 = 100) captam o efeito das variações das quantidades físicas importadas sobre a evolução do valor de importação. São obtidos, implicitamente, por meio do deflacionamento dos valores importados pelas variações dos índices de preço de importação.

<br>

**Fonte:** Fundação Centro de Estudos do Comércio Exterior (FUNCEX) via Ipeadata.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = comb, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_comb)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de preços
```{r}
plot_ly(
  data = comb, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", ind_comb)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 20
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de quantum
```{r}
plot_ly(
  data = comb, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", qt_comb)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 20
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Síntese importações de combustíveis
```{r}
reactable(
  comb[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_comb = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    ind_comb = colDef(
      name = "Índice de preços",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    qt_comb = colDef(
      name = "Índice de quantum",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```


# 1.2) Balança de serviços {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A **balança de serviços (BS)** é composta por serviços relativos a transportes, viagens internacionais, seguros, financeiros, construção, computação e informações, royalties e licenças, aluguel de equipamentos, serviços pessoais, culturais e de entretenimento e serviços governamentais.

<br>

**Fonte**: Códigos 22720 (receitas), 22721 (despesas) e 22719 (saldo BS) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Receitas (1)
```{r}
plot_ly(
  data = bs, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_rec)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Despesas (2)
```{r}
plot_ly(
  data = bs, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_desp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### Saldo BS (3) (1-2)
```{r}
plot_ly(
  data = bs, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_saldo)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese BS (US$ bilhões)
```{r}
reactable(
  bs[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rec = colDef(
      name = "Receitas (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_desp = colDef(
      name = "Despesas (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo = colDef(
      name = "Saldo BS (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.3) Renda primária {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A **renda primária (RP)** indica os montantes a pagar ou a receber em troca do uso temporário de recursos financeiros, trabalho ou ativos não financeiros não produzidos, a saber, remuneração de trabalhadores, renda de investimentos e demais rendas primárias. Fazem parte da primeira a remuneração do trabalho assalariado (salários e ordenados); da segunda, renda de investimento direto, renda de investimento em carteira, renda de outros investimentos e renda de ativos de reserva; e da terceira, tributos sobre a produção e importação, subsídios e aluguéis.

<br>

Os dados como % do PIB referem-se ao acumulado em 12 meses.

<br>

**Fonte**: Códigos 22801 (receitas), 22802 (despesas), 22800 (saldo RP) e 4385 (PIB em dólares) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Receitas (1)
```{r}
plot_ly(
  data = rp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_rec)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Despesas (2)
```{r}
plot_ly(
  data = rp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_desp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Saldo RP (3) (1-2)
```{r}
plot_ly(
  data = rp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_saldo)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### % do PIB
```{r}
plot_ly(
  data = rp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", rp_pib)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "%",
      tick0 = 0,
      dtick = 0.5
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese RP (US$ bilhões)
```{r}
reactable(
  rp[, -6],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rec = colDef(
      name = "Receitas (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_desp = colDef(
      name = "Despesas (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo = colDef(
      name = "Saldo RP (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    rp_pib = colDef(
      name = "% do PIB",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.4 Renda secundária {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A **renda secundária (RS)**, antes denominada “transferências unilaterais correntes”, tem sua nomenclatura ajustada às contas nacionais, e apresenta a renda gerada em uma economia e distribuída para outra. Setoriza as transferências em dois componentes: governo e demais setores. No primeiro caso, estão registrados os tributos correntes sobre a renda, contribuições e benefícios sociais, cooperação internacional corrente e demais transferências correntes do governo; já no segundo, estão as transferências pessoais (transferências correntes entre famílias residentes e não residentes) e outras transferências correntes.

<br>

**Fonte**: Códigos 22839 (receitas), 22840 (despesas) e 22838 (saldo RS) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Receitas (1)
```{r}
plot_ly(
  data = rs, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_rec)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      dtick = 1,
      range = c(0, 2)
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Despesas (2)
```{r}
plot_ly(
  data = rs, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_desp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      range = c(0, 2),
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Saldo RS (3) (1-2)
```{r}
plot_ly(
  data = rs, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_saldo)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      range = c(-1, 1),
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese RS (US$ bilhões)
```{r}
reactable(
  rs[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rec = colDef(
      name = "Receitas (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_desp = colDef(
      name = "Despesas (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo = colDef(
      name = "Saldo RS (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 2) Conta capital {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A **conta capital (CC)** registra as transações envolvendo compra e venda de ativos não financeiros não produzidos, e transferências de capital. As transferências de capital relacionadas com patrimônio de migrantes não mais impactam essa conta.

<br>

Os dados como % do PIB referem-se ao acumulado em 12 meses.

<br>

**Fonte**: Códigos 22852 (receitas), 22853 (despesas), 22851 (saldo CC) e 4385 (PIB em dólares) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Receitas (1)
```{r}
plot_ly(
  data = cc, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_rec)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Despesas (2)
```{r}
plot_ly(
  data = cc, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_desp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Saldo CC (3) (1-2)
```{r}
plot_ly(
  data = cc, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_saldo)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### % do PIB
```{r}
plot_ly(
  data = cc, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", cc_pib)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "%",
      tick0 = 0,
      dtick = 0.1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese CC (US$ bilhões)
```{r}
reactable(
  cc[, -6],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rec = colDef(
      name = "Receitas (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_desp = colDef(
      name = "Despesas (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo = colDef(
      name = "Saldo CC (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    cc_pib = colDef(
      name = "% do PIB",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 2.1) Ativos não financeiros não produzidos {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A **conta capital (ativos não financeiros não produzidos)** inclui ativos intangíveis não produzidos e terrenos e outros ativos materiais não produzidos que podem ser usados na produção de bens e serviços. 

<br>

**Fonte**: Códigos 22855 (receitas), 22856 (despesas) e 22855 (saldo CC (ativos não financeiros não produzidos)) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Receitas (1)
```{r}
plot_ly(
  data = cc_anfnp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_rec)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Despesas (2)
```{r}
plot_ly(
  data = cc_anfnp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_desp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Saldo CC (ativos não financeiros não produzidos) (3) (1-2)
```{r}
plot_ly(
  data = cc_anfnp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_saldo)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese CC (ativos não financeiros não produzidos) (US$ bilhões)
```{r}
reactable(
  cc_anfnp[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rec = colDef(
      name = "Receitas (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_desp = colDef(
      name = "Despesas (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo = colDef(
      name = "Saldo CC (ativos não financeiros não produzidos) (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 2.1.1) Passes de atletas {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A **conta capital (ativos não financeiros não produzidos - passes de atletas)** registra as transações de compra e venda de passes de atletas profissionais realizadas entre residentes e não-residentes.

<br>

**Fonte**: Códigos 22858 (receitas), 22859 (despesas) e 22857 (saldo CC (ativos não financeiros não produzidos - passes de atletas)) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Receitas (1)
```{r}
plot_ly(
  data = cc_anfnp_ps, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_rec)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 10
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Despesas (2)
```{r}
plot_ly(
  data = cc_anfnp_ps, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_desp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      dtick = 5
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Saldo CC (ativos não financeiros não produzidos - passes de atletas) (3) (1-2)
```{r}
plot_ly(
  data = cc_anfnp_ps, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_saldo)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      dtick = 10
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese CC (ativos não financeiros não produzidos - passes de atletas) (US$ milhões)
```{r}
reactable(
  cc_anfnp_ps[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rec = colDef(
      name = "Receitas (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_desp = colDef(
      name = "Despesas (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo = colDef(
      name = "Saldo CC (ativos não financeiros não produzidos - passes de atletas) (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 3) Conta financeira {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A **conta financeira (CF)** registra fluxos decorrentes de transações com ativos e passivos financeiros entre residentes e não residentes, sendo dividida em cinco grupos funcionais: investimento direto, investimentos em carteira, derivativos financeiros (exclusive reservas) e opções de compra de ações por parte de empregados, outros investimentos e ativos de reserva. Cada conta é desdobrada em ativos e passivos, ou seja, há um item destinado a registrar fluxos envolvendo ativos externos detidos por residentes no Brasil e outro para registrar a emissão de passivos por residentes cujo credor é não residente.

<br>

Obs.: Valores negativos indicam entrada líquida de recursos no país.

<br>

Os dados como % do PIB referem-se ao acumulado em 12 meses.

<br>

**Fonte**: Códigos 22863 (conta financeira) e 4385 (PIB em dólares) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Conta financeira
```{r}
plot_ly(
  data = cf, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### % do PIB
```{r}
plot_ly(
  data = cf, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", cf_pib)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "%",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese CF (US$ bilhões)
```{r}
reactable(
  cf[, -4],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor = colDef(
      name = "Saldo CF",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    cf_pib = colDef(
      name = "% do PIB",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 3.1) Investimento direto {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

**Investimento direto no exterior (IDE)** registra os fluxos financeiros de ativos externos detidos por residentes brasileiros, nos quais os agentes institucionais possuem uma relação de controle ou forte poder de influência entre si. Divide-se em dois instrumentos principais: participação no capital e operações intercompanhia.

**Investimento direto no país (IDP)** registra os fluxos financeiros de passivos emitidos por residentes brasileiros para credores não residentes, nos quais os agentes institucionais possuem uma relação de controle ou forte poder de influência entre si. Divide-se em dois instrumentos principais: participação no capital e operações intercompanhia.

**Investimento direto (ID)** representa o fluxo líquido entre os investimentos diretos no exterior (ativos) e os investimentos diretos no país (passivos).

<br>

Obs.: Valores negativos indicam entrada líquida de recursos no país.

<br>

**Fonte**: Códigos 22865 (IDE), 22885 (IDP) e 22864 (saldo ID) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### IDE (1)
```{r}
plot_ly(
  data = inv_dir, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_ide)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### IDP (2)
```{r}
plot_ly(
  data = inv_dir, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_idp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### Saldo ID (3) (1-2)
```{r}
plot_ly(
  data = inv_dir, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_id)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Saldo ID (US$ bilhões)

```{r}
reactable(
  inv_dir[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_ide = colDef(
      name = "IDE (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_idp = colDef(
      name = "IDP (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_id = colDef(
      name = "Saldo ID (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 3.2) Investimento em carteira {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=300}
-----------------------------------------------------------------------

**Investimento em carteira** é dividido em ativos e passivos. **Investimento em carteira ativos** são definidos como transações e posições realizadas através de títulos de dívida ou de capital, distintos dos incluídos em investimento direto ou ativos de reserva. São registrados fluxos constituídos pela emissão de títulos de crédito comumente negociados em mercados secundários. Divide-se em dois instrumentos principais: ações e cotas em fundos, e título de renda fixa. Ações e cotas em fundos compreendem todos os instrumentos e registros que reconhecem, uma vez liquidados todos os direitos dos credores, os direitos frente ao valor residual da empresa. Os títulos de participação no capital englobam as ações negociadas ou não em bolsa e outros tipos de participação no capital. Títulos de renda fixa são os instrumentos de dívida que exigem pagamento de juros e/ou principal em algum momento futuro. Os instrumentos de dívida que sensibilizam essa conta são aqueles que podem ser negociados em mercados secundários. Os papéis com prazo de vencimento original inferior a um ano são considerados de curto prazo, e os com vencimento original superior a esse prazo, de longo prazo. **Investimento em carteira passivos** são definidos como transações e posições realizadas através de títulos de dívida ou de capital, distintos dos incluídos em investimento direto. São registrados fluxos constituídos pela emissão de títulos de crédito comumente negociados em mercados secundários. Divide-se em dois instrumentos principais: ações e cotas em fundos e título de renda fixa. Ações e cotas em fundos compreendem todos os instrumentos e registros que reconhecem, uma vez liquidados todos os direitos dos credores, os direitos frente ao valor residual da empresa. Os títulos de participação no capital englobam as ações negociadas ou não em bolsa e outros tipos de participação no capital. Títulos de renda fixa são os instrumentos de dívida exigem pagamento de juros e/ou principal em algum momento futuro. Os instrumentos de dívida que sensibilizam essa conta são aqueles que podem ser negociados em mercados secundários. Os papéis com prazo de vencimento original inferior a um ano são considerados de curto prazo, e os com vencimento original superior a esse prazo, de longo prazo.

<br>

Obs.: Valores negativos indicam entrada líquida de recursos no país.

<br>

**Fonte**: Código 22905 do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=350}  {.tabset}
-----------------------------------------------------------------------

### CF (investimento em carteira)
```{r}
plot_ly(
  data = inv_cart, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 5
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=350}  {.tabset}
-----------------------------------------------------------------------

### Síntese CF (investimento em carteira) (US$ bilhões)
```{r}
reactable(
  inv_cart[, -3],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor = colDef(
      name = "CF (investimento em carteira)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 3.3) Outros investimentos {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

**Outros investimentos** é uma conta residual da conta financeira, dividida em ativos e passivos. Transações não incluídas em investimento direto, de carteira, derivativos financeiros ou ativos de reserva são registradas como outros investimentos, a exemplo de empréstimos, financiamento, créditos comerciais e depósitos. Os fluxos ativos e passivos se classificam principalmente por categorias dos instrumentos, por setores institucionais do residente e por prazo de vencimento.

<br>

Obs.: Valores negativos indicam entrada líquida de recursos no país.

<br>

**Fonte**: Códigos 22970 (ativos), 22971 (passivos) e 22969 (saldo outros investimentos) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Ativos (1)
```{r}
plot_ly(
  data = outros_inv, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_outros_inv_ativos)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### Passivos (2)
```{r}
plot_ly(
  data = outros_inv, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_outros_inv_passivos)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### Saldo CF (outros investimentos) (3) (1-2)
```{r}
plot_ly(
  data = outros_inv, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_outros_inv_liq)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### CF (outros investimentos) (US$ bilhões)

```{r}
reactable(
  outros_inv[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_outros_inv_ativos = colDef(
      name = "Ativos (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_outros_inv_passivos = colDef(
      name = "Passivos (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_outros_inv_liq = colDef(
      name = "Saldo outros investimentos (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 3.4) Ativos de reserva {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

Os **ativos de reserva** compreendem as operações com os ativos externos que estão à disposição imediata e sob controle da autoridade monetária para satisfazer suas necessidades de financiamento de balanço de pagamentos, intervir no mercado de cambio e outros fins conexos. Ativos de reservas é dividido em **ouro monetário, direitos especiais de saque (DES), posição de reserva no FMI, outros ativos de reserva e demais ativos**.

<br>

**Fonte**: Código 23043 do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Ativos de reserva
```{r}
plot_ly(
  data = ativ_res, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 10
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese ativos de reserva (US$ bilhões)
```{r}
reactable(
  ativ_res[, -3],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor = colDef(
      name = "Ativos de reserva",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```


# 4) Erros e omissões {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

As partidas a crédito e a débito lançadas no balanço de pagamentos provêm de diversas fontes de informações, gerando, na prática, total líquido diferente de zero. A principal razão está nas discrepâncias temporais das diversas origens dos dados utilizados. Com isso, torna-se necessário o lançamento de partida equilibradora para o balanceamento das contas. Os **erros e omissões(EOs)** se prestam, portanto, a compensar toda sobrestimação ou subestimação dos componentes registrados. É uma conta residual, portanto.

<br>

**Fonte**: Código 23060 do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Erros e omissões
```{r}
plot_ly(
  data = eo, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese erros e omissões (US$ bilhões)
```{r}
reactable(
  eo[, -3],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor = colDef(
      name = "Erros e omissões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Índice de commodities - Brasil {data-navmenu="Commodities"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------
 	
O **Índice de commodities - Brasil** (IC-Br) exprime a média mensal ponderada dos preços em reais e em dólares das commodities relevantes para a dinâmica da inflação brasileira. O IC-Br agrega de forma ponderada os indicadores relativos aos segmentos Agropecuária (série 27575), Metal (série 27576) e Energia (série 27577). Dez/2005 = 100.

<br> 

Tomando como base o mês de janeiro de 2024, os pesos para cada commodity no índice são os seguintes:

Boi gordo: 21,54%, Brent: 12,35%, Açúcar: 7,37%, Milho: 6,27%, Óleo de soja: 6,17%, Algodão: 6,11%, Suco de laranja: 4,69%, Café: 4,25%, Estanho: 4,06%, Arroz: 3,82%, Cacau: 3,25%, Alumínio: 3,24%, Carvão: 2,95%, Trigo: 2,18%, Prata: 2,11%, Zinco: 2,10%, Gás natural: 2,05%, Cobre: 1,60%, Porco: 1,34%, Chumbo: 1,12%, Minério de ferro: 0,52%, Níquel: 0,50%, Ouro: 0,42%.

<br>

**Fonte:** Códigos 27574 (real) e 29042 (dólar) no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### IC-Br (R$ e US$)
```{r}
plot_ly() %>%
  add_trace(
    data = commod,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br (R$)"
  ) %>%
  add_trace(
    data = commod,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br (US$)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "Dez/2005 = 100", autorange = TRUE),
    legend = list(
      orientation = "h",  # horizontal
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Variação mensal (%)
```{r}
plot_ly() %>%
  add_trace(
    data = commod,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs_mg)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br (R$)"
  ) %>%
  add_trace(
    data = commod,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd_mg)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br (US$)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",  # horizontal
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Variação em 12 meses (%)
```{r}
plot_ly() %>%
  add_trace(
    data = commod,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs_12m)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br (R$)"
  ) %>%
  add_trace(
    data = commod,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd_12m)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br (US$)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",  # horizontal
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese IC-Br

```{r}
reactable(
  commod[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs = colDef(
      name = "IC-Br (R$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd = colDef(
      name = "IC-Br (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Índice de commodities - IC-Br Agropecuária {data-navmenu="Commodities"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------
 	
O **IC-Br Agropecuária** é um subíndice do IC-Br (série 27574). É uma média mensal ponderada dos preços em reais de boi gordo, algodão, óleo de soja, trigo, açúcar, milho, café, arroz, porco, suco de laranja e cacau. Dez/2005 = 100.

**Fonte:** Códigos 27575 (real) e 29041 (dólar) no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### IC-Br Agropecuária (R$ e US$)
```{r}
plot_ly() %>%
  add_trace(
    data = commod_agrop,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Agropecuária (R$)"
  ) %>%
  add_trace(
    data = commod_agrop,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Agropecuária (US$)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "Dez/2005 = 100", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Variação mensal (%)
```{r}
plot_ly() %>%
  add_trace(
    data = commod_agrop,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs_mg)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Agropecuária (R$)"
  ) %>%
  add_trace(
    data = commod_agrop,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd_mg)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Agropecuária (US$)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Variação em 12 meses (%)
```{r}
plot_ly() %>%
  add_trace(
    data = commod_agrop,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs_12m)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Agropecuária (R$)"
  ) %>%
  add_trace(
    data = commod_agrop,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd_12m)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Agropecuária (US$)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese IC-Br Agropecuária

```{r}
reactable(
  commod_agrop[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs = colDef(
      name = "IC-Br Agropecuária (R$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd = colDef(
      name = "IC-Br Agropecuária (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Índice de commodities - IC-Br Energia {data-navmenu="Commodities"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------
 	
O **IC-Br Energia** é um subíndice do IC-Br (série 27574). É uma média mensal ponderada dos preços em reais de petróleo Brent, gás natural e carvão. Dez/2005 = 100.

**Fonte:** Códigos 27577 (real) e 29039 (dólar) no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### IC-Br Energia (R$ e US$)
```{r}
plot_ly() %>%
  add_trace(
    data = commod_energia,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Energia (R$)"
  ) %>%
  add_trace(
    data = commod_metal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Energia (US$)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "Dez/2005 = 100", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Variação mensal (%)
```{r}
plot_ly() %>%
  add_trace(
    data = commod_energia,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs_mg)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Energia (R$)"
  ) %>%
  add_trace(
    data = commod_metal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd_mg)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Energia (US$)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Variação em 12 meses (%)
```{r}
plot_ly() %>%
  add_trace(
    data = commod_energia,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs_12m)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Energia (R$)"
  ) %>%
  add_trace(
    data = commod_energia,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd_12m)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Energia (US$)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese IC-Br Energia

```{r}
reactable(
  commod_energia[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs = colDef(
      name = "IC-Br Energia (R$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd = colDef(
      name = "IC-Br Energia (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Índice de commodities - IC-Br Metal {data-navmenu="Commodities"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------
 	
O **IC-Br Metal** é um subíndice do IC-Br (série 27574). É uma média mensal ponderada dos preços em reais de alumínio, minério de ferro, cobre, estanho, zinco, chumbo, níquel, ouro e prata. Dez/2005 = 100.

**Fonte:** Códigos 27576 (real) e 29040 (dólar) no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### IC-Br Metal (R$ e US$)
```{r}
plot_ly() %>%
  add_trace(
    data = commod_metal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Metal (R$)"
  ) %>%
  add_trace(
    data = commod_metal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Metal (US$)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "Dez/2005 = 100", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Variação mensal (%)
```{r}
plot_ly() %>%
  add_trace(
    data = commod_metal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs_mg)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Metal (R$)"
  ) %>%
  add_trace(
    data = commod_metal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd_mg)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Metal (US$)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Variação em 12 meses (%)
```{r}
plot_ly() %>%
  add_trace(
    data = commod_metal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs_12m)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Metal (R$)"
  ) %>%
  add_trace(
    data = commod_metal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd_12m)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Metal (US$)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese IC-Br Metal

```{r}
reactable(
  commod_metal[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs = colDef(
      name = "IC-Br Metal (R$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd = colDef(
      name = "IC-Br Metal (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Café {data-navmenu="Commodities"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------
**Global price of coffee (other mild arabica and robustas)**. Value represents the benchmark prices which are representative of the global market. They are determined by the largest exporter of a given commodity. Prices are period averages in nominal U.S. dollars (cents per pound).

<br>

**Fonte:** Federal Reserve Economic Data (FRED).


Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Cotação
```{r}
plot_ly() %>%
  add_trace(
    data = cafe,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_arab)),
    type = "scatter",
    mode = "lines",
    name = "Other mild arabica"
  ) %>%
  add_trace(
    data = cafe,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rob)),
    type = "scatter",
    mode = "lines",
    name = "Robustas"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "US$", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Variação mensal (%)
```{r}
plot_ly() %>%
  add_trace(
    data = cafe,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_mg_arab)),
    type = "scatter",
    mode = "lines",
    name = "Other mild arabica"
  ) %>%
  add_trace(
    data = cafe,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_mg_rob)),
    type = "scatter",
    mode = "lines",
    name = "Robustas"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Variação em 12 meses (%)
```{r}
plot_ly() %>%
  add_trace(
    data = cafe,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_12m_arab)),
    type = "scatter",
    mode = "lines",
    name = "Other nukd arabica"
  ) %>%
  add_trace(
    data = cafe,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_12m_rob)),
    type = "scatter",
    mode = "lines",
    name = "Robustas"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Síntese cotação mensal
```{r}
reactable(
  cafe[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Data",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_arab = colDef(
      name = "Other mild arabica (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg_arab = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m_arab = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rob = colDef(
      name = "Robustas (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg_rob = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m_rob = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )   
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Minério de ferro {data-navmenu="Commodities"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------
**Global price of iron ore**. Value represents the benchmark prices which are representative of the global market. They are determined by the largest exporter of a given commodity. Prices are period averages in nominal U.S. dollars.

<br>

**Fonte:** Federal Reserve Economic Data (FRED).


Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Cotação
```{r}
plot_ly(
  data = miner_ferro, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$")
  ) %>% rangeslider(thickness = 0.05)
```

### Variação mensal (%)
```{r}
plot_ly(
  data = miner_ferro, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", var_mg)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

### Variação em 12 meses (%)
```{r}
plot_ly(
  data = miner_ferro, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", var_12m)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Síntese cotação mensal
```{r}
reactable(
  miner_ferro[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Data",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor = colDef(
      name = "Minério de ferro (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ) 
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Petróleo bruto {data-navmenu="Commodities"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------
Produzido no Mar do Norte (Europa), **Brent** é uma classe de petróleo bruto que serve como benchmark para o preço internacional de diferentes tipos de petróleo.

Produzido no Texas e no sul de Oklahoma, **West Texas Intermediate (WTI)** é uma classe de petróleo bruto que serve como benchmark para o preço internacional de diferentes tipos de petróleo.

Os preços por barris de ambos os tipos de petróleo são _free on board_ (FOB), isto é, desconsideram despesas com fretes e seguros.

As cotações mensais são as médias das cotações diárias.

<br>

**Fonte:** Energy Information Administration (EIA) via Ipeadata.


Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Cotação diária
```{r}
plot_ly() %>%
  add_trace(
    data = petroleo,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_brent)),
    type = "scatter",
    mode = "lines",
    name = "Brent"
  ) %>%
  add_trace(
    data = petroleo,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_wti)),
    type = "scatter",
    mode = "lines",
    name = "WTI"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "US$", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Cotação Mensal
```{r}
plot_ly() %>%
  add_trace(
    data = petroleo_mensal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_brent)),
    type = "scatter",
    mode = "lines",
    name = "Brent"
  ) %>%
  add_trace(
    data = petroleo_mensal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_wti)),
    type = "scatter",
    mode = "lines",
    name = "WTI"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "US$", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Variação Mensal (%)
```{r}
plot_ly() %>%
  add_trace(
    data = petroleo_mensal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_mg_brent)),
    type = "scatter",
    mode = "lines",
    name = "Brent"
  ) %>%
  add_trace(
    data = petroleo_mensal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_mg_wti)),
    type = "scatter",
    mode = "lines",
    name = "WTI"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "US$", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Variação em 12 meses (%)
```{r}
plot_ly() %>%
  add_trace(
    data = petroleo_mensal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_12m_brent)),
    type = "scatter",
    mode = "lines",
    name = "Brent"
  ) %>%
  add_trace(
    data = petroleo_mensal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_12m_wti)),
    type = "scatter",
    mode = "lines",
    name = "WTI"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "US$", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```


Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Síntese cotação diária
```{r}
reactable(
  petroleo[, -6],
  columns = list(
    data_fmt = colDef(
      name = "Data",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_brent = colDef(
      name = "Brent (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg_brent = colDef(
      name = "Variação diária (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_wti = colDef(
      name = "WTI (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg_wti = colDef(
      name = "Variação diária (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )    
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Síntese cotação mensal
```{r}
reactable(
  petroleo_mensal[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_brent = colDef(
      name = "Brent (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg_brent = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m_brent = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_wti = colDef(
      name = "WTI (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg_wti = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m_wti = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Soja em grãos {data-navmenu="Commodities"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------
Preço dos contratos futuros da soja negociados na bolsa de Chicago (Chicago Board of Trade - CBOT), contrato futuro mais próximo (primeiro vencimento), tipo padrão No. 2 yellow, cotado em **dólares por tonelada métrica**.

<br>

**Fonte:** International Financial Statistics (FMI/IFS) via Ipeadata.


Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Cotação mensal
```{r}
plot_ly(
  data = soja, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$")
  ) %>% rangeslider(thickness = 0.05)
```

### Variação mensal (%)
```{r}
plot_ly(
  data = soja, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", var_mg)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

### Variação em 12 meses (%)
```{r}
plot_ly(
  data = soja, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", var_12m)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Síntese soja em grãos
```{r}
reactable(
  soja[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Data",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor = colDef(
      name = "Soja em grãos (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Trigo {data-navmenu="Commodities"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

**Global price of wheat**. Value represents the benchmark prices which are representative of the global market. They are determined by the largest exporter of a given commodity. Prices are period averages in nominal U.S. dollars per metric ton.

<br>

**Fonte:** Federal Reserve Economic Data (FRED).


Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Cotação mensal
```{r}
plot_ly(
  data = trigo, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$")
  ) %>% rangeslider(thickness = 0.05)
```

### Variação mensal (%)
```{r}
plot_ly(
  data = trigo, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", var_mg)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

### Variação em 12 meses (%)
```{r}
plot_ly(
  data = trigo, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", var_12m)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%",
                       dtick = 20)
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Síntese soja em grãos
```{r}
reactable(
  soja[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Data",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor = colDef(
      name = "Trigo (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Dívida externa bruta {data-navmenu="Dívida externa"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A série trimestral **dívida externa bruta** compreende o total apurado em determinada data dos débitos contratuais efetivamente desembolsados e ainda não quitados, devidos por residentes de uma economia aos não residentes, quando houver a obrigatoriedade de pagamento de principal e/ou juros em algum(s) ponto(s) no futuro. O valor de mercado da dívida externa bruta impacta os valores a partir de dezembro de 2011 e abrange os títulos de dívida emitidos pela República no mercado internacional, ajustados segundo seu preço de mercado, e os demais instrumentos e emissores de dívida externa, apurados em valor nominal.

<br>

**Fonte:** Código 3684 no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = div_bruta, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_usd)),
  type = "scatter",
  mode = "lines",
  fill = "tozeroy"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "% bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### % PIB
```{r}
plot_ly(
  data = div_bruta, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_pib)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "% PIB")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese dívida externa bruta

```{r}
reactable(
  div_bruta[, -4],
  columns = list(
    data_fmt = colDef(
      name = "Trimestre",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_pib = colDef(
      name = "% PIB",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Dívida externa líquida {data-navmenu="Dívida externa"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A série trimestral **dívida externa líquida** refere-se à dívida externa bruta excluindo do cálculo os ativos de reservas, os haveres de bancos comerciais e os créditos brasileiros no exterior.

<br>

**Fonte:** Código 3685 no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = div_liq, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_usd)),
  type = "scatter",
  mode = "lines",
  fill = "tozeroy"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### % PIB
```{r}
plot_ly(
  data = div_liq, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_pib)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "% PIB")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese dívida externa líquida

```{r}
reactable(
  div_liq[, -4],
  columns = list(
    data_fmt = colDef(
      name = "Trimestre",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_pib = colDef(
      name = "% PIB",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Reservas internacionais

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

As **reservas internacionais** compreendem os ativos externos do país prontamente disponíveis e mantidos pelo Banco Central do Brasil com o objetivo de financiar eventuais déficits do balanço de pagamentos.

<br>

De acordo com o [Relatório de Gestão das Reservas Internacionais](https://www.bcb.gov.br/publicacoes/relgestaoreservas) do Banco Central do Brasil de março de 2025, em dezembro de 2024 a alocação das reservas por moedas se dava da seguinte maneira: 78,45% em dólar americano (USD), 5,31% em renminbi (CNY), 5,23% em euro (EUR), 3,69% em libra esterlina (GBP), 3,55% em ouro, 1,73% em iene (JPY), 1,05% em dólar canadense (CAD) e 0,99% em dólar australiano (AUD).

<br>

Também em dezembro de 2024, 84,08% das reservas pelo conceito caixa estavam aplicadas em títulos governamentais soberanos.

<br>

O prazo médio de investimento em 2024 foi de 3,19 anos.

<br>

**Fontes:** Sistema Gerenciador de Séries Temporais do Banco Central do Brasil (código 3546) e DataBank/World Bank.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = res_int, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor)),
  type = "scatter",
  mode = "lines",
  fill = "tozeroy"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### Variação mensal (%)
```{r}
plot_ly(
  data = res_int, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", var_mg)), 
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

### Variação 12 meses (%)
```{r}
plot_ly(
  data = res_int, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", var_12m)), 
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%", dtick = 20)
  ) %>% rangeslider(thickness = 0.05)
```

### % dívida externa total
```{r}
plot_ly(
  data = res_int_div_ext, 
  x = ~ano, 
  y = ~as.numeric(gsub(",", ".", valor)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

### Meses de importações
```{r}
plot_ly(
  data = res_int_imports, 
  x = ~ano, 
  y = ~as.numeric(gsub(",", ".", valor)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "Meses de importações")
  ) %>% rangeslider(thickness = 0.05)
```


Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese reservas internacionais

```{r}
reactable(
  res_int[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### % dívida externa total

```{r}
reactable(
  res_int_div_ext,
  columns = list(
    ano = colDef(
      name = "Ano",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor = colDef(
      name = "% dívida externa total",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Meses de importações

```{r}
reactable(
  res_int_imports,
  columns = list(
    ano = colDef(
      name = "Ano",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor = colDef(
      name = "Meses de importações",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Taxa de câmbio comercial {data-navmenu="Taxa de câmbio"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

**Taxa de câmbio comercial (compra e venda) - cotações diárias e mensais:** refere-se às taxas administradas até 13 de março de 1990 e às taxas livres a partir dessa data (Resolução 1.690, de 18.03.1990). As taxas administradas são aquelas fixadas pelo Banco Central. As taxas livres correspondem à média das taxas efetivas de operações no mercado interbancário, ponderada pelo volume de transações de venda do dia. As transações fechadas em taxas que mais se distanciam da média do mercado (outliers) e aquelas que evidenciam formação artificial de preço ou contrárias às práticas regulares do mercado são excluídas dos cálculos. A partir de março de 1992, essa taxa recebeu a denominação de **taxa PTAX (fechamento)**, isto é, a partir de 01.07.2011, é a média aritmética das taxas de compra e das taxas de venda dos boletins do dia, conforme Circulares 3.506, de 23.09.2010, e 3.537, de 25.05.2011. Até 30.06.2011, é a taxa média ponderada dos negócios realizados no mercado interbancário de câmbio com liquidação em dois dias úteis, calculada pelo Banco Central do Brasil, conforme Comunicado N. 6.815/99. 

<br>

As taxas mensais referem-se aos valores de fim de período.

<br>

**Fonte:** Códigos 10813 (compra diária), 1 (venda diária), 3695 (compra mensal) e 3696 (venda mensal) no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Cotação diária

```{r}
plot_ly(
  data = cambio_nom, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", cambio_nom)),
  type = "scatter",
  mode = "line"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "R$")
  ) %>% rangeslider(thickness = 0.05)
```


### Cotação mensal
```{r}
plot_ly(
  data = cambio_nom_mensal, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", cambio_nom_mensal)),
  type = "scatter",
  mode = "line"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "R$")
  ) %>% rangeslider(thickness = 0.05)
```


### Variação mensal (%)
```{r}
plot_ly(
  data = cambio_nom_mensal, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", var_mg)),
  type = "scatter",
  mode = "line"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

### Variação em 12 meses (%)
```{r}
plot_ly(
  data = cambio_nom_mensal, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", var_12m)),
  type = "scatter",
  mode = "line"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese cotação diária
```{r, results='asis'}
reactable(
  cambio_nom[, -6],
  columns = list(
    data_fmt = colDef(
      name = "Data",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_compra = colDef(
      name = "Compra (R$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_venda = colDef(
      name = "Venda (R$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    cambio_nom = colDef(
      name = "Média compra e venda (R$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg = colDef(
      name = "Variação diária (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Síntese cotação mensal
```{r, results='asis'}
reactable(
  cambio_nom_mensal[, -7],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_compra = colDef(
      name = "Compra (R$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_venda = colDef(
      name = "Venda (R$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    cambio_nom_mensal = colDef(
      name = "Média compra e venda (R$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Taxa de câmbio real {data-navmenu="Taxa de câmbio"} 

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A série mensal **taxa de câmbio real** reflete a variação da moeda nacional em relação a uma moeda ou a uma cesta de moedas estrangeiras (geralmente ponderada pelo fluxo de comércio exterior), corrigida pelo diferencial entre as inflações doméstica (IPCA) e externa. Jun/1994 = 100.

<br>

**Fonte:** Códigos 11752 (dólar americano) e 11753 (efetiva) no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Taxa de câmbio real
```{r}
plot_ly() %>%
  add_trace(
    data = cambio_real,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_dol)),
    type = "scatter",
    mode = "lines",
    name = "Taxa de câmbio real (US$)"
  ) %>%
  add_trace(
    data = cambio_real,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_efet)),
    type = "scatter",
    mode = "lines",
    name = "Taxa de câmbio real efetiva"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "Jun/1994 = 100", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Variação mensal (%)
```{r}
plot_ly() %>%
  add_trace(
    data = cambio_real,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_mg_dol)),
    type = "scatter",
    mode = "lines",
    name = "Taxa de câmbio real (US$)"
  ) %>%
  add_trace(
    data = cambio_real,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_mg_efet)),
    type = "scatter",
    mode = "lines",
    name = "Taxa de câmbio real efetiva"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Variação em 12 meses (%)
```{r}
plot_ly() %>%
  add_trace(
    data = cambio_real,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_12m_dol)),
    type = "scatter",
    mode = "lines",
    name = "Taxa de câmbio real (US$)"
  ) %>%
  add_trace(
    data = cambio_real,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_12m_efet)),
    type = "scatter",
    mode = "lines",
    name = "Taxa de câmbio real efetiva"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese taxa de câmbio real

```{r}
reactable(
  cambio_real[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_dol = colDef(
      name = "Taxa de câmbio real (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg_dol = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m_dol = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_efet = colDef(
      name = "Taxa de câmbio real efetiva",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg_efet = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m_efet = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Movimento de câmbio contratado {data-navmenu="Taxa de câmbio"}

Column {.sidebar} {data-width=250}
-----------------------------------------------------------------------

**Câmbio contratado comercial (exportações):** Somatório das contratações de compra de moeda estrangeira efetuadas pelos bancos comerciais junto ao mercado não financeiro relativas a exportações de bens. Código 13962 no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil (SGST/BCB).

**Câmbio contratado comercial (importações):** Somatório das contratações de venda de moeda estrangeira efetuadas pelos bancos comerciais ao mercado não financeiro relativas a importações de bens. Código 13966 no SGST/BCB.

**Câmbio contratado comercial (saldo):** Resultado líquido de contratações de câmbio comercial de exportação e de importação. Código 13967 no SGST/BCB.

**Câmbio contratado financeiro (compras):** Somatório das contratações de compra de moeda estrangeira efetuadas pelos bancos comerciais junto ao mercado não financeiro relativas a exportação de serviços e ingressos de capitais estrangeiros ou retorno de capitais brasileiros. Não inclui operações de câmbio de compra e venda junto ao Banco Central do Brasil. Código 13968 no SGST/BCB.

**Câmbio contratado financeiro (vendas):** Somatório das contratações de venda de moeda estrangeira efetuadas pelos bancos comerciais junto ao mercado não financeiro relativas a importação de serviços e saídas de capitais estrangeiros ou brasileiros. Não inclui operações de câmbio de compra e venda junto ao Banco Central do Brasil. Código 13969 no SGST/BCB.

**Câmbio contratado financeiro (saldo):** Resultado líquido de contratações de câmbio financeiro de compra e venda. Não inclui operações de câmbio de compra e venda junto ao Banco Central do Brasil. Código 13970 no SGST/BCB.

Todos os valores estão em milhões de dólares.

Column {data-width=750}  {.tabset}
-----------------------------------------------------------------------

### Síntese câmbio contratado (US$ milhões)
```{r, results='asis'}
reactable(
  cambio_contratado[, -9],
  columns = list(
    data_fmt = colDef(
      name = "Data",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_exp = colDef(
      name = "Comercial exportação (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_imp = colDef(
      name = "Comercial importação (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo_com = colDef(
      name = "Saldo comercial (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_compra = colDef(
      name = "Financeiro compra (4)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_venda = colDef(
      name = "Financeiro venda (5)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo_financ = colDef(
      name = "Saldo financeiro (6) (4-5)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo_total = colDef(
      name = "Saldo câmbio contratado (7) (3+6)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Termos de troca

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

Os **termos de troca** são definidos como a relação entre os preços das exportações do país (PX) e os das suas importações (PM).

<br>

**Fonte:** Fundação Centro de Estudos do Comércio Exterior (FUNCEX).

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Termos de troca
```{r}
plot_ly(
  data = tt, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_tt)),
  type = "scatter",
  mode = "line"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "Média 2018 = 100")
  ) %>% rangeslider(thickness = 0.05)
```

### Variação mensal (%)
```{r}
plot_ly(
  data = tt, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", var_mg_tt)),
  type = "scatter",
  mode = "line"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

### Variação em 12 meses (%)
```{r}
plot_ly(
  data = tt, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", var_12m_tt)),
  type = "scatter",
  mode = "line"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese termos de troca

```{r}
reactable(
  tt[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_tt = colDef(
      name = "Termos de troca",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg_tt = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m_tt = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```
