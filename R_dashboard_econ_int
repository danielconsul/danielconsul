---
title: "Variáveis externas brasileiras"
output: 
  flexdashboard::flex_dashboard:
    social: [ "menu" ]
    theme: spacelab
    favicon: icon.png
    orientation: columns
    vertical_layout: fill
runtime: shiny
---

<style>
p {
  text-align: center;
  margin-right: 10px;
}
</style>

```{r setup, include=FALSE}
library(flexdashboard)
library(tidyverse)
library(rbcb)
library(reactable)
library(plotly)
library(scales)
library(shiny)
library(WDI)
```


```{r}
# Coleta de dados:

# Taxa de câmbio - Livre - Dólar americano (venda):
cambio_nom1 <- get_series(
  code = c(valor = 1),
  start_date = "1994-07-01",
  end_date = "2002-12-31"
)

cambio_nom2 <- get_series(
  code = c(valor = 1),
  start_date = "2003-01-01",
  end_date = "2012-12-31"
)

cambio_nom3 <- get_series(
  code = c(valor = 1),
  start_date = "2013-01-01",
  end_date = "2022-12-31"
)

cambio_nom4 <- get_series(
  code = c(valor = 1),
  start_date = "2023-01-01"
)

cambio_nom <- bind_rows(cambio_nom1, cambio_nom2, cambio_nom3, cambio_nom4)

cambio_nom <- cambio_nom %>% 
  mutate(
    var_mg = (valor / lag(valor) - 1) * 100
  ) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor = number(valor, decimal.mark = ",", accuracy = 0.01),
    var_mg = number(var_mg, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, valor, var_mg, date)

# Taxa de câmbio real (IPCA) - Jun/1994 = 100 - (códigos 11753 e 11752):
cambio_real_dol <- get_series(
  code = c(valor_dol = 11753),
  start_date = "1994-07-01"
) %>%
  mutate(
    var_mg_dol = (valor_dol / lag(valor_dol) - 1) * 100,
    var_12m_dol = (valor_dol / lag(valor_dol, 12) - 1) * 100
  ) %>%
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_dol = number(valor_dol, decimal.mark = ",", accuracy = 0.01),
    var_mg_dol = number(var_mg_dol, decimal.mark = ",", accuracy = 0.01),
    var_12m_dol = number(var_12m_dol, decimal.mark = ",", accuracy = 0.01)
  )

cambio_real_efet <- get_series(
  code = c(valor_efet = 11752),
  start_date = "1994-07-01"
) %>%
  mutate(
    var_mg_efet = (valor_efet / lag(valor_efet) - 1) * 100,
    var_12m_efet = (valor_efet / lag(valor_efet, 12) - 1) * 100
  ) %>%
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_efet = number(valor_efet, decimal.mark = ",", accuracy = 0.01),
    var_mg_efet = number(var_mg_efet, decimal.mark = ",", accuracy = 0.01),
    var_12m_efet = number(var_12m_efet, decimal.mark = ",", accuracy = 0.01)
  )

cambio_real <- left_join(cambio_real_dol, cambio_real_efet)

cambio_real <- cambio_real %>%
  arrange(desc(date)) %>%
  select(data_fmt, valor_dol, var_mg_dol, var_12m_dol,
         valor_efet, var_mg_efet, var_12m_efet, date)

# Reservas internacionais (código 3546):
res_int <- get_series(
  code = c(valor = 3546),
  start_date = "1970-12-01"
) %>% mutate(
    valor = valor / 1000,
    var_mg = (valor / lag(valor) - 1) * 100,
    var_12m = (valor / lag(valor, 12) - 1) * 100
  ) %>%
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor = number(valor, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    var_mg = number(var_mg, decimal.mark = ",", accuracy = 0.01),
    var_12m = number(var_12m, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, valor, var_mg, var_12m, date)

# Dívida externa bruta (código 3684):
div_bruta <- get_series(
  code = c(valor = 3684),
  start_date = "1981-01-01"
) %>%
  mutate(
    valor = valor / 1000,
    data_fmt = format(date, "%m/%Y"),
    valor = number(valor, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, valor, date)

# Dívida externa líquida (código 3685):
div_liq <- get_series(
  code = c(valor = 3685),
  start_date = "1987-01-01"
) %>%
  mutate(
    valor = valor / 1000,
    data_fmt = format(date, "%m/%Y"),
    valor = number(valor, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, valor, date)

# Reservas internacionais totais como % da dívida externa total (código FI.RES.TOTL.DT.ZS):
res_int_div_ext <- WDI(
  country = "BR",
  indicator = "FI.RES.TOTL.DT.ZS",
  start = 1971
) %>% mutate(
  ano = year,
  valor = FI.RES.TOTL.DT.ZS,
  valor = number(valor, decimal.mark = ",", accuracy = 0.01)
) %>% select(ano, valor)

# Reservas internacionais (em meses de importações) (código FI.RES.TOTL.MO):
res_int_imports <- WDI(
  country = "BR",
  indicator = "FI.RES.TOTL.MO",
  start = 1975
) %>% mutate(
  ano = year,
  valor = FI.RES.TOTL.MO,
  valor = number(valor, decimal.mark = ",", accuracy = 0.01)
) %>% select(ano, valor)

# Câmbio contratado comercial exportação (código 13962):
cambio_exp1 <- get_series(
  code = c(valor_exp = 13962),
  start_date = "2008-09-01",
  end_date = "2017-12-31"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_exp = number(valor_exp, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_exp, date)

cambio_exp2 <- get_series(
  code = c(valor_exp = 13962),
  start_date = "2018-01-01"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_exp = number(valor_exp, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_exp, date)

cambio_exp <- bind_rows(cambio_exp1, cambio_exp2) %>%
  arrange(desc(date)) 

# Câmbio contratado comercial importação (código 13966):
cambio_imp1 <- get_series(
  code = c(valor_imp = 13966),
  start_date = "2008-09-01",
  end_date = "2017-12-31" # No máximo 10 anos
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_imp = number(valor_imp, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_imp, date)

cambio_imp2 <- get_series(
  code = c(valor_imp = 13966),
  start_date = "2018-01-01"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_imp = number(valor_imp, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_imp, date)

cambio_imp <- bind_rows(cambio_imp1, cambio_imp2) %>%
  arrange(desc(date)) 

# Câmbio contratado comercial saldo (código 13967):
cambio_saldo_com1 <- get_series(
  code = c(valor_saldo_com = 13967),
  start_date = "2008-09-01",
  end_date = "2017-12-31"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_saldo_com = number(valor_saldo_com, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_saldo_com, date)

cambio_saldo_com2 <- get_series(
  code = c(valor_saldo_com = 13967),
  start_date = "2018-01-01"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_saldo_com = number(valor_saldo_com, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_saldo_com, date)

cambio_saldo_com <- bind_rows(cambio_saldo_com1, cambio_saldo_com2) %>%
  arrange(desc(date))

cambio_com <- left_join(cambio_exp, cambio_imp)
cambio_com <- left_join(cambio_com, cambio_saldo_com)

cambio_com <- cambio_com %>% select(data_fmt, valor_exp, valor_imp, valor_saldo_com, date)

# Câmbio contratado financeiro compra (código 13968):
cambio_compra1 <- get_series(
  code = c(valor_compra = 13968),
  start_date = "2008-09-01",
  end_date = "2017-12-31"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_compra = number(valor_compra, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_compra, date)

cambio_compra2 <- get_series(
  code = c(valor_compra = 13968),
  start_date = "2018-01-01"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_compra = number(valor_compra, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_compra, date)

cambio_compra <- bind_rows(cambio_compra1, cambio_compra2) %>% arrange(desc(date))

# Câmbio contratado financeiro venda (código 13968):
cambio_venda1 <- get_series(
  code = c(valor_venda = 13969),
  start_date = "2008-09-01",
  end_date = "2017-12-31"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_venda = number(valor_venda, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_venda, date)

cambio_venda2 <- get_series(
  code = c(valor_venda = 13969),
  start_date = "2018-01-01"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_venda = number(valor_venda, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_venda, date)

cambio_venda <- bind_rows(cambio_venda1, cambio_venda2) %>% arrange(desc(date))

# Câmbio contratado financeiro saldo (código 13970):
cambio_saldo_financ1 <- get_series(
  code = c(valor_saldo_financ = 13970),
  start_date = "2008-09-01",
  end_date = "2017-12-31"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_saldo_financ = number(valor_saldo_financ, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_saldo_financ, date)

cambio_saldo_financ2 <- get_series(
  code = c(valor_saldo_financ = 13970),
  start_date = "2018-01-01"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_saldo_financ = number(valor_saldo_financ, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_saldo_financ, date)

cambio_saldo_financ <- bind_rows(cambio_saldo_financ1, cambio_saldo_financ2) %>%
  arrange(desc(date))

cambio_financ <- left_join(cambio_compra, cambio_venda)
cambio_financ <- left_join(cambio_financ, cambio_saldo_financ)

cambio_financ <- cambio_financ %>% select(data_fmt, valor_compra, valor_venda, valor_saldo_financ, date)

cambio_contratado <- full_join(cambio_com, cambio_financ) %>% select(-date)

# Câmbio contratado saldo total (código 13961):
cambio_saldo_total1 <- get_series(
  code = c(valor_saldo_total = 13961),
  start_date = "2008-09-01",
  end_date = "2017-12-31"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_saldo_total = number(valor_saldo_total, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_saldo_total, date)

cambio_saldo_total2 <- get_series(
  code = c(valor_saldo_total = 13961),
  start_date = "2018-01-01"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_saldo_total = number(valor_saldo_total, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_saldo_total, date)

cambio_saldo_total <- bind_rows(cambio_saldo_total1, cambio_saldo_total2) %>%
  arrange(desc(date))

cambio_contratado <- full_join(cambio_contratado, cambio_saldo_total)

# Transações correntes (códigos 22701, 22702 e 22703):

trans_cor_rec <- get_series(
  code = c(valor_rec = 22702)
)

trans_cor_desp <- get_series(
  code = c(valor_desp = 22703)
)

trans_cor_saldo <- get_series(
  code = c(valor_saldo = 22701)
)

trans_cor <- left_join(trans_cor_rec, trans_cor_desp)
trans_cor <- left_join(trans_cor, trans_cor_saldo)

trans_cor <- trans_cor %>% mutate(
    valor_rec = valor_rec / 1000,
    valor_desp = valor_desp / 1000,
    valor_saldo = valor_saldo / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rec = number(valor_rec, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_desp = number(valor_desp, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_saldo = number(valor_saldo, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>% select(data_fmt, valor_rec, valor_desp, valor_saldo, date) %>% 
  arrange(desc(date))

# Balança comercial (códigos 22707, 22708 e 22709)
bc_exp <- get_series(
  code = c(valor_exp = 22708)
)

bc_imp <- get_series(
  code = c(valor_imp = 22709)
)

bc_saldo <- get_series(
  code = c(valor_saldo = 22707)
)

bc <- left_join(bc_exp, bc_imp)
bc <- left_join(bc, bc_saldo)

bc <- bc %>% mutate(
    valor_exp = valor_exp / 1000,
    valor_imp = valor_imp / 1000,
    valor_saldo = valor_saldo / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_exp = number(valor_exp, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_imp = number(valor_imp, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_saldo = number(valor_saldo, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>% select(data_fmt, valor_exp, valor_imp, valor_saldo, date) %>% 
  arrange(desc(date))

# Balança de serviços (códigos 22719, 22720 e 22721)
bs_rec <- get_series(
  code = c(valor_rec = 22720)
)

bs_desp <- get_series(
  code = c(valor_desp = 22721)
)

bs_saldo <- get_series(
  code = c(valor_saldo = 22719)
)

bs <- left_join(bs_rec, bs_desp)
bs <- left_join(bs, bs_saldo)

bs <- bs %>% mutate(
    valor_rec = valor_rec / 1000,
    valor_desp = valor_desp / 1000,
    valor_saldo = valor_saldo / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rec = number(valor_rec, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_desp = number(valor_desp, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_saldo = number(valor_saldo, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>% select(data_fmt, valor_rec, valor_desp, valor_saldo, date) %>% 
  arrange(desc(date))

# Renda primária (códigos 22800, 22801 e 22802)
rp_rec <- get_series(
  code = c(valor_rec = 22801)
)

rp_desp <- get_series(
  code = c(valor_desp = 22802)
)

rp_saldo <- get_series(
  code = c(valor_saldo = 22800)
)

rp <- left_join(rp_rec, rp_desp)
rp <- left_join(rp, rp_saldo)

rp <- rp %>% mutate(
    valor_rec = valor_rec / 1000,
    valor_desp = valor_desp / 1000,
    valor_saldo = valor_saldo / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rec = number(valor_rec, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_desp = number(valor_desp, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_saldo = number(valor_saldo, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>% select(data_fmt, valor_rec, valor_desp, valor_saldo, date) %>% 
  arrange(desc(date))

# Renda secundária (códigos 22838, 22839 e 22840)
rs_rec <- get_series(
  code = c(valor_rec = 22839)
)

rs_desp <- get_series(
  code = c(valor_desp = 22840)
)

rs_saldo <- get_series(
  code = c(valor_saldo = 22838)
)

rs <- left_join(rs_rec, rs_desp)
rs <- left_join(rs, rs_saldo)

rs <- rs %>% mutate(
    valor_rec = valor_rec / 1000,
    valor_desp = valor_desp / 1000,
    valor_saldo = valor_saldo / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rec = number(valor_rec, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_desp = number(valor_desp, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_saldo = number(valor_saldo, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>% select(data_fmt, valor_rec, valor_desp, valor_saldo, date) %>% 
  arrange(desc(date))

# Conta capital (códigos 22851, 22852 e 22853)
cc_rec <- get_series(
  code = c(valor_rec = 22852)
)

cc_desp <- get_series(
  code = c(valor_desp = 22853)
)

cc_saldo <- get_series(
  code = c(valor_saldo = 22851)
)

cc <- left_join(cc_rec, cc_desp)
cc <- left_join(cc, cc_saldo)

cc <- cc %>% mutate(
    valor_rec = valor_rec / 1000,
    valor_desp = valor_desp / 1000,
    valor_saldo = valor_saldo / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rec = number(valor_rec, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_desp = number(valor_desp, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_saldo = number(valor_saldo, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>% select(data_fmt, valor_rec, valor_desp, valor_saldo, date) %>% 
  arrange(desc(date))

# Índice de commodities - Brasil (códigos 22574 e 29042)
commod_bra <- get_series(
  code = c(valor_rs = 27574)
) %>% mutate(
  valor_rs_mg = (valor_rs/lag(valor_rs) - 1) * 100,
  valor_rs_12m = (valor_rs/lag(valor_rs, 12) - 1) * 100
)

commod_usd <- get_series(
  code = c(valor_usd = 29042)
) %>% mutate(
  valor_usd_mg = (valor_usd/lag(valor_usd) - 1) * 100,
  valor_usd_12m = (valor_usd/lag(valor_usd, 12) - 1) * 100
)

commod <- left_join(commod_bra, commod_usd) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rs = number(valor_rs, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_rs_mg = number(valor_rs_mg, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_rs_12m = number(valor_rs_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd = number(valor_usd, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd_mg = number(valor_usd_mg, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd_12m = number(valor_usd_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>% select(data_fmt, valor_rs, valor_rs_mg, valor_rs_12m, valor_usd, valor_usd_mg, valor_usd_12m, date) %>% 
  arrange(desc(date))

# Índice de commodities - Agropecuária (códigos 22574 e 29042)
commod_agrop <- get_series(
  code = c(valor_rs = 27575)
) %>% mutate(
  valor_rs_mg = (valor_rs/lag(valor_rs) - 1) * 100,
  valor_rs_12m = (valor_rs/lag(valor_rs, 12) - 1) * 100
)

commod_usd_agrop <- get_series(
  code = c(valor_usd = 29041)
) %>% mutate(
  valor_usd_mg = (valor_usd/lag(valor_usd) - 1) * 100,
  valor_usd_12m = (valor_usd/lag(valor_usd, 12) - 1) * 100
)

commod_agrop <- left_join(commod_agrop, commod_usd_agrop) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rs = number(valor_rs, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_rs_mg = number(valor_rs_mg, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_rs_12m = number(valor_rs_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd = number(valor_usd, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd_mg = number(valor_usd_mg, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd_12m = number(valor_usd_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>% select(data_fmt, valor_rs, valor_rs_mg, valor_rs_12m, valor_usd, valor_usd_mg, valor_usd_12m, date) %>% 
  arrange(desc(date))

# Índice de commodities - Metal (códigos 27576 e 29040)
commod_metal <- get_series(
  code = c(valor_rs = 27576)
) %>% mutate(
  valor_rs_mg = (valor_rs/lag(valor_rs) - 1) * 100,
  valor_rs_12m = (valor_rs/lag(valor_rs, 12) - 1) * 100
)

commod_usd_metal <- get_series(
  code = c(valor_usd = 29040)
) %>% mutate(
  valor_usd_mg = (valor_usd/lag(valor_usd) - 1) * 100,
  valor_usd_12m = (valor_usd/lag(valor_usd, 12) - 1) * 100
)

commod_metal <- left_join(commod_metal, commod_usd_metal) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rs = number(valor_rs, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_rs_mg = number(valor_rs_mg, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_rs_12m = number(valor_rs_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd = number(valor_usd, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd_mg = number(valor_usd_mg, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd_12m = number(valor_usd_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>% select(data_fmt, valor_rs, valor_rs_mg, valor_rs_12m, valor_usd, valor_usd_mg, valor_usd_12m, date) %>% 
  arrange(desc(date))

# Índice de commodities - Energia (códigos 27577 e 29039)
commod_energia <- get_series(
  code = c(valor_rs = 27577)
) %>% mutate(
  valor_rs_mg = (valor_rs/lag(valor_rs) - 1) * 100,
  valor_rs_12m = (valor_rs/lag(valor_rs, 12) - 1) * 100
)

commod_usd_energia <- get_series(
  code = c(valor_usd = 29039)
) %>% mutate(
  valor_usd_mg = (valor_usd/lag(valor_usd) - 1) * 100,
  valor_usd_12m = (valor_usd/lag(valor_usd, 12) - 1) * 100
)

commod_energia <- left_join(commod_energia, commod_usd_energia) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rs = number(valor_rs, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_rs_mg = number(valor_rs_mg, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_rs_12m = number(valor_rs_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd = number(valor_usd, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd_mg = number(valor_usd_mg, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd_12m = number(valor_usd_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>% select(data_fmt, valor_rs, valor_rs_mg, valor_rs_12m, valor_usd, valor_usd_mg, valor_usd_12m, date) %>% 
  arrange(desc(date))
```

# Visão geral
Columns {.sidebar} {data-width=250}
-----------------------------------------------------------------------

<br><br><br><br><br><br><br><br><br><br>

<div style="font-size:18px">
O presente _dashboard_ objetiva apresentar de forma centralizada uma série de dados macroeconômicos relacionados às contas externas da economia brasileira nas últimas décadas.
São apresentadas informações referentes à taxa de câmbio, balanço de pagamentos, reservas internacionais e dívida externa, utilizando como fontes o Sistema Gerenciador de Séries Temporais do Banco Central do Brasil (SGST/BCB) e o DataBank do Banco Mundial. O painel é automatizado e atualizado diariamente.


<br><br>

**Autor:** [Daniel Consul de Antoni](http://lattes.cnpq.br/3579437273217709)

**Contato:** daniel.consul@outlook.com

<br><br>

**Última atualização:** `r format(Sys.Date(), format = "%d/%m/%Y")`
</div>

Columns {data-width=750}
-----------------------------------------------------------------------

```{r, out.width="90%", fig.align='center', vertical_layout = fill}
knitr::include_graphics("visao_geral.png")
```

# Transações correntes {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

O **balanço de pagamentos** é uma peça contábil que resume as transações econômicas entre residentes no país e não residentes em um determinado período de tempo. A compilação das estatísticas de Balanço de Pagamentos (BP) no Brasil tem como principal fonte de informação as transações financeiras registradas no Sistema Câmbio do BCB (no jargão internacional, um sistema do tipo International Transactions Reporting System (ITRS)). Dessa forma, o BP brasileiro é compilado fundamentalmente a partir dos registros individuais das transações (microdados), permitindo ao Banco Central do Brasil o acompanhamento tempestivo dos fluxos da economia brasileira com o exterior.

<br>

A rubrica de **transações correntes** agrega os seguintes itens: balança comercial (bens), serviços, renda primária e renda secundária, e **registra todas as transações entre os residentes no Brasil e os residentes no exterior, independentemente da moeda utilizada**, realizadas por intermédio do sistema bancário ou de agentes credenciados pelo Banco Central do Brasil.

<br>

Todos os valores estão em bilhões de dólares.

<br>

**Fonte:** Códigos 22702 (receita), 22703 (despesa) e 22701 (saldo = receita - despesa) no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Receitas (1)
```{r}
plot_ly(
  data = trans_cor, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_rec)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = " ")
  ) %>% rangeslider(thickness = 0.05)
```

### Despesas (2)
```{r}
plot_ly(
  data = trans_cor, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_desp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = " ")
  ) %>% rangeslider(thickness = 0.05)
```

### Saldo em transações correntes (3) (1-2)
```{r}
plot_ly(
  data = trans_cor, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_saldo)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = " ")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese transações correntes (US$ bilhões)

```{r}
reactable(
  trans_cor[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rec = colDef(
      name = "Receitas (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_desp = colDef(
      name = "Despesas (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo = colDef(
      name = "Saldo transações correntes (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# - Balança comercial (bens) {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A **balança Comercial (bens)** contabiliza as transações de itens que são resultado de atividades produtivas, tangíveis, e sobre os quais direitos de propriedade podem ser estabelecidos e transferidos através de transações. A balança comercial (bens) é dividida em exportações e importações. As **exportações** registram a venda de bens de residentes a não residentes, enquanto as **importações** registram a compra de bens por residentes de não residentes. A rubrica é fundada nas estatísticas de comércio exterior compiladas pelo Ministério do Desenvolvimento, Indústria e Comércio (MDIC), com base nos registros alfandegários do Siscomex, que são ajustadas pelo Banco Central com o intuito de ampliação da cobertura. Por conta disso, às importações publicadas pelo MDIC são incorporadas as compras de energia elétrica sem registro no Siscomex. Adicionalmente, exportações e importações são ajustadas pela inclusão das operações fictas, nas quais o produto é transacionado com um não residente, mas não atravessa a fronteira do país em que se encontra; e, por fim, a balança comercial do balanço de pagamentos incorpora encomendas postais internacionais.

<br> 

Todos os valores estão em bilhões de dólares.

<br>

**Fonte**: Códigos 22708 (exportações), 22709 (importações) e 22707 (saldo balança comercial) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Exportações (1)
```{r}
plot_ly(
  data = bc, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_exp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = " ")
  ) %>% rangeslider(thickness = 0.05)
```

### Importações (2)
```{r}
plot_ly(
  data = bc, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_imp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = " ")
  ) %>% rangeslider(thickness = 0.05)
```

### Saldo da balança comercial (3) (1-2)
```{r}
plot_ly(
  data = bc, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_saldo)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = " ")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese balança comercial (US$ bilhões)
```{r}
reactable(
  bc[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_exp = colDef(
      name = "Exportações (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_imp = colDef(
      name = "Importações (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo = colDef(
      name = "Saldo balança comercial (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# - - Exportações {data-navmenu="Balanço de pagamentos"}
```{r}

```

# - - Importações {data-navmenu="Balanço de pagamentos"}
```{r}

```

# - Balança de serviços {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A **balança de serviços** é composta por serviços relativos a transportes, viagens internacionais, seguros, financeiros, construção, computação e informações, royalties e licenças, aluguel de equipamentos, serviços pessoais, culturais e de entretenimento e serviços governamentais.

<br> 

Todos os valores estão em bilhões de dólares.

<br>

**Fonte**: Códigos 22720 (receitas), 22721 (despesas) e 22719 (saldo balança de serviços) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Receitas (1)
```{r}
plot_ly(
  data = bs, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_rec)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = " ",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Despesas (2)
```{r}
plot_ly(
  data = bs, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_desp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = " ")
  ) %>% rangeslider(thickness = 0.05)
```

### Saldo da balança de serviços (3) (1-2)
```{r}
plot_ly(
  data = bs, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_saldo)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = " ")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese balança de serviços (US$ bilhões)
```{r}
reactable(
  bs[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rec = colDef(
      name = "Receitas (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_desp = colDef(
      name = "Despesas (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo = colDef(
      name = "Saldo balança de serviços (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# - Renda primária {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A **renda primária** indica os montantes a pagar ou a receber em troca do uso temporário de recursos financeiros, trabalho ou ativos não financeiros não produzidos, a saber, remuneração de trabalhadores, renda de investimentos e demais rendas primárias. Fazem parte da primeira a remuneração do trabalho assalariado (salários e ordenados); da segunda, renda de investimento direto, renda de investimento em carteira, renda de outros investimentos e renda de ativos de reserva; e da terceira, tributos sobre a produção e importação, subsídios e aluguéis.

<br> 

Todos os valores estão em bilhões de dólares.

<br>

**Fonte**: Códigos 22801 (receitas), 22802 (despesas) e 22800 (saldo renda primária) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Receitas (1)
```{r}
plot_ly(
  data = rp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_rec)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = " ",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Despesas (2)
```{r}
plot_ly(
  data = rp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_desp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = " ",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Saldo da renda primária (3) (1-2)
```{r}
plot_ly(
  data = rp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_saldo)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = " ",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese renda primária (US$ bilhões)
```{r}
reactable(
  rp[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rec = colDef(
      name = "Receitas (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_desp = colDef(
      name = "Despesas (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo = colDef(
      name = "Saldo renda primária (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# - Renda secundária {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A **renda secundária**, antes denominada “transferências unilaterais correntes”, tem sua nomenclatura ajustada às contas nacionais, e apresenta a renda gerada em uma economia e distribuída para outra. Setoriza as transferências em dois componentes: governo e demais setores. No primeiro caso, estão registrados os tributos correntes sobre a renda, contribuições e benefícios sociais, cooperação internacional corrente e demais transferências correntes do governo; já no segundo, estão as transferências pessoais (transferências correntes entre famílias residentes e não residentes) e outras transferências correntes.

<br> 

Todos os valores estão em bilhões de dólares.

<br>

**Fonte**: Códigos 22839 (receitas), 22840 (despesas) e 22838 (saldo renda primária) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Receitas (1)
```{r}
plot_ly(
  data = rs, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_rec)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = " ",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Despesas (2)
```{r}
plot_ly(
  data = rs, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_desp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = " ",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Saldo da renda primária (3) (1-2)
```{r}
plot_ly(
  data = rs, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_saldo)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = " ",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese renda secundária (US$ bilhões)
```{r}
reactable(
  rs[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rec = colDef(
      name = "Receitas (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_desp = colDef(
      name = "Despesas (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo = colDef(
      name = "Saldo renda secundária (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Conta capital {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A **conta capital** registra as transações envolvendo compra e venda de ativos não financeiros não produzidos, e transferências de capital. As transferências de capital relacionadas com patrimônio de migrantes não mais impactam essa conta.

<br> 

Todos os valores estão em bilhões de dólares.

<br>

**Fonte**: Códigos 22852 (receitas), 22853 (despesas) e 22851 (saldo renda primária) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Receitas (1)
```{r}
plot_ly(
  data = cc, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_rec)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = " ",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Despesas (2)
```{r}
plot_ly(
  data = cc, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_desp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = " ",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Saldo da conta capital (3) (1-2)
```{r}
plot_ly(
  data = cc, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_saldo)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = " ",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese conta capital (US$ bilhões)
```{r}
reactable(
  cc[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rec = colDef(
      name = "Receitas (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_desp = colDef(
      name = "Despesas (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo = colDef(
      name = "Saldo conta capital (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# - Conta capital (Ativos não financeiros não produzidos) {data-navmenu="Balanço de pagamentos"}

# - Conta capital (Ativos não financeiros não produzidos - Passes de atletas) {data-navmenu="Balanço de pagamentos"}

# - Conta capital (Transferências de capital) {data-navmenu="Balanço de pagamentos"}

# Conta financeira {data-navmenu="Balanço de pagamentos"}

# - Conta financeira (Investimento direto) {data-navmenu="Balanço de pagamentos"}

# - Conta financeira (Investimentos em carteira) {data-navmenu="Balanço de pagamentos"}

# - Conta financeira (Outros investimentos) {data-navmenu="Balanço de pagamentos"}

# - Conta financeira (Ativos de reserva) {data-navmenu="Balanço de pagamentos"}

# Erros e omissões {data-navmenu="Balanço de pagamentos"}

# Índice de commodities - Brasil {data-navmenu="Commodities"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------
 	
O **Índice de commodities - Brasil** (IC-Br) exprime a média mensal ponderada dos preços em reais e em dólares das commodities relevantes para a dinâmica da inflação brasileira. O IC-Br agrega de forma ponderada os indicadores relativos aos segmentos Agropecuária (série 27575), Metal (série 27576) e Energia (série 27577). Dez/2005 = 100.

<br> 

Tomando como base o mês de janeiro de 2024, os pesos para cada commodity no índice são os seguintes:

Boi Gordo: 21,54%;
Brent: 12,35%;
Açúcar: 7,37%;
Milho: 6,27%;
Óleo de soja: 6,17%;
Algodão: 6,11%;
Suco de Laranja: 4,69%;
Café: 4,25%;
Estanho: 4,06%;
Arroz: 3,82%;
Cacau: 3,25%;
Alumínio: 3,24%;
Carvão: 2,95%.
Trigo: 2,18%;
Prata: 2,11%;
Zinco: 2,10%;
Gas Natural: 2,05%;
Cobre: 1,60%;
Porco: 1,34%;
Chumbo: 1,12%;
Minério de Ferro: 0,52%;
Niquel: 0,50%;
Ouro: 0,42%.

<br>

**Fonte:** Códigos 27574 (real) e 29042 (dólar) no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### IC-Br (real e dólar) - Dez/2005 = 100
```{r}
plot_ly() %>%
  add_trace(
    data = commod,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br (real)"
  ) %>%
  add_trace(
    data = commod,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br (dólar)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = " ", autorange = TRUE),
    legend = list(
      orientation = "h",  # horizontal
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Var. mensal (%)
```{r}
plot_ly() %>%
  add_trace(
    data = commod,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs_mg)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br (real)"
  ) %>%
  add_trace(
    data = commod,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd_mg)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br (dólar)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = " ", autorange = TRUE),
    legend = list(
      orientation = "h",  # horizontal
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Var. em 12 meses (%)
```{r}
plot_ly() %>%
  add_trace(
    data = commod,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs_12m)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br (real)"
  ) %>%
  add_trace(
    data = commod,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd_12m)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br (dólar)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = " ", autorange = TRUE),
    legend = list(
      orientation = "h",  # horizontal
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese IC-Br

```{r}
reactable(
  commod[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs = colDef(
      name = "IC-Br (reais)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs_mg = colDef(
      name = "IC-Br (reais) - Var. mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs_12m = colDef(
      name = "IC-Br (reais) - Var. em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd = colDef(
      name = "IC-Br (dólar)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd_mg = colDef(
      name = "IC-Br (dólar) - Var. mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd_12m = colDef(
      name = "IC-Br (dólar) - Var. em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Índice de commodities - IC-Br Agropecuária {data-navmenu="Commodities"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------
 	
O **IC-Br Agropecuária** é um subíndice do IC-Br (série 27574). É uma média mensal ponderada dos preços em reais de boi gordo, algodão, óleo de soja, trigo, açúcar, milho, café, arroz, porco, suco de laranja e cacau. Dez/2005 = 100.

**Fonte:** Códigos 27575 (real) e 29041 (dólar) no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### IC-Br Agropecuária (real e dólar) - Dez/2005 = 100
```{r}
plot_ly() %>%
  add_trace(
    data = commod_agrop,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Agropecuária (real)"
  ) %>%
  add_trace(
    data = commod_agrop,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Agropecuária (dólar)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = " ", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Var. mensal (%)
```{r}
plot_ly() %>%
  add_trace(
    data = commod_agrop,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs_mg)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Agropecuária (real)"
  ) %>%
  add_trace(
    data = commod_agrop,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd_mg)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Agropecuária (dólar)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = " ", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Var. em 12 meses (%)
```{r}
plot_ly() %>%
  add_trace(
    data = commod_agrop,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs_12m)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Agropecuária (real)"
  ) %>%
  add_trace(
    data = commod_agrop,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd_12m)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Agropecuária (dólar)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = " ", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese IC-Br Agropecuária

```{r}
reactable(
  commod_agrop[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs = colDef(
      name = "IC-Br Agropecuária (reais)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs_mg = colDef(
      name = "IC-Br Agropecuária (reais) - Var. mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs_12m = colDef(
      name = "IC-Br Agropecuária (reais) - Var. em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd = colDef(
      name = "IC-Br Agropecuária (dólar)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd_mg = colDef(
      name = "IC-Br Agropecuária (dólar) - Var. mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd_12m = colDef(
      name = "IC-Br Agropecuária (dólar) - Var. em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Índice de commodities - IC-Br Metal {data-navmenu="Commodities"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------
 	
O **IC-Br Metal** é um subíndice do IC-Br (série 27574). É uma média mensal ponderada dos preços em reais de alumínio, minério de ferro, cobre, estanho, zinco, chumbo, níquel, ouro e prata. Dez/2005 = 100.

**Fonte:** Códigos 27576 (real) e 29040 (dólar) no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### IC-Br Metal (real e dólar) - Dez/2005 = 100
```{r}
plot_ly() %>%
  add_trace(
    data = commod_metal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Metal (real)"
  ) %>%
  add_trace(
    data = commod_metal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Metal (dólar)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = " ", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Var. mensal (%)
```{r}
plot_ly() %>%
  add_trace(
    data = commod_metal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs_mg)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Metal (real)"
  ) %>%
  add_trace(
    data = commod_metal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd_mg)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Metal (dólar)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = " ", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Var. em 12 meses (%)
```{r}
plot_ly() %>%
  add_trace(
    data = commod_metal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs_12m)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Metal (real)"
  ) %>%
  add_trace(
    data = commod_metal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd_12m)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Metal (dólar)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = " ", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese IC-Br Metal

```{r}
reactable(
  commod_metal[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs = colDef(
      name = "IC-Br Metal (reais)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs_mg = colDef(
      name = "IC-Br Metal (reais) - Var. mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs_12m = colDef(
      name = "IC-Br Metal (reais) - Var. em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd = colDef(
      name = "IC-Br Metal (dólar)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd_mg = colDef(
      name = "IC-Br Metal (dólar) - Var. mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd_12m = colDef(
      name = "IC-Br Metal (dólar) - Var. em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Índice de commodities - IC-Br Energia {data-navmenu="Commodities"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------
 	
O **IC-Br Energia** é um subíndice do IC-Br (série 27574). É uma média mensal ponderada dos preços em reais de petróleo Brent, gás natural e carvão. Dez/2005 = 100.

**Fonte:** Códigos 27577 (real) e 29039 (dólar) no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### IC-Br Energia (real e dólar) - Dez/2005 = 100
```{r}
plot_ly() %>%
  add_trace(
    data = commod_energia,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Energia (real)"
  ) %>%
  add_trace(
    data = commod_metal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Energia (dólar)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = " ", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Var. mensal (%)
```{r}
plot_ly() %>%
  add_trace(
    data = commod_energia,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs_mg)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Energia (real)"
  ) %>%
  add_trace(
    data = commod_metal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd_mg)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Energia (dólar)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = " ", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Var. em 12 meses (%)
```{r}
plot_ly() %>%
  add_trace(
    data = commod_energia,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs_12m)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Energia (real)"
  ) %>%
  add_trace(
    data = commod_energia,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd_12m)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Energia (dólar)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = " ", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese IC-Br Energia

```{r}
reactable(
  commod_energia[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs = colDef(
      name = "IC-Br Energia (reais)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs_mg = colDef(
      name = "IC-Br Energia (reais) - Var. mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs_12m = colDef(
      name = "IC-Br Energia (reais) - Var. em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd = colDef(
      name = "IC-Br Energia (dólar)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd_mg = colDef(
      name = "IC-Br Energia (dólar) - Var. mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd_12m = colDef(
      name = "IC-Br Energia (dólar) - Var. em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Dívida externa bruta {data-navmenu="Dívida externa"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A série trimestral **dívida externa bruta** compreende o total apurado em determinada data dos débitos contratuais efetivamente desembolsados e ainda não quitados, devidos por residentes de uma economia aos não residentes, quando houver a obrigatoriedade de pagamento de principal e/ou juros em algum(s) ponto(s) no futuro. O valor de mercado da dívida externa bruta impacta os valores a partir de dezembro de 2011 e abrange os títulos de dívida emitidos pela República no mercado internacional, ajustados segundo seu preço de mercado, e os demais instrumentos e emissores de dívida externa, apurados em valor nominal.

<br>

**Fonte:** Código 3684 no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Dívida externa bruta (US$ bilhões)
```{r}
plot_ly(
  data = div_bruta, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor)),
  type = "scatter",
  mode = "lines",
  fill = "tozeroy"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = " ")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese dívida externa bruta (US$ bilhões)

```{r}
reactable(
  div_bruta[, -3],
  columns = list(
    data_fmt = colDef(
      name = "Trimestre",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor = colDef(
      name = "Dívida externa bruta",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Dívida externa líquida {data-navmenu="Dívida externa"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A série trimestral **dívida externa líquida** refere-se à dívida externa bruta excluindo do cálculo os ativos de reservas, os haveres de bancos comerciais e os créditos brasileiros no exterior.

<br>

**Fonte:** Código 3685 no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Dívida externa líquida (US$ bilhões)
```{r}
plot_ly(
  data = div_liq, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor)),
  type = "scatter",
  mode = "lines",
  fill = "tozeroy"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = " ")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese dívida externa líquida (US$ bilhões)

```{r}
reactable(
  div_liq[, -3],
  columns = list(
    data_fmt = colDef(
      name = "Trimestre",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor = colDef(
      name = "Dívida externa líquida",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Reservas internacionais

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

As **reservas internacionais** compreendem os ativos externos do país prontamente disponíveis e mantidos pelo Banco Central do Brasil com o objetivo de financiar eventuais déficits do balanço de pagamentos.

<br>

De acordo com o [Relatório de Gestão das Reservas Internacionais](https://www.bcb.gov.br/publicacoes/relgestaoreservas) do Banco Central do Brasil de março de 2025, em dezembro de 2024 a alocação das reservas por moedas se dava da seguinte maneira: 78,45% em dólar americano (USD), 5,31% em renminbi (CNY), 5,23% em euro (EUR), 3,69% em libra esterlina (GBP), 3,55% em ouro, 1,73% em iene (JPY), 1,05% em dólar canadense (CAD) e 0,99% em dólar australiano (AUD).

<br>

Também em dezembro de 2024, 84,08% das reservas pelo conceito caixa estavam aplicadas em títulos governamentais soberanos.

<br>

O prazo médio de investimento em 2024 foi de 3,19 anos.

<br>

**Fontes:** Sistema Gerenciador de Séries Temporais do Banco Central do Brasil (código 3546) e DataBank/World Bank.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Reservas internacionais
```{r}
plot_ly(
  data = res_int, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor)),
  type = "scatter",
  mode = "lines",
  fill = "tozeroy"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = " ")
  ) %>% rangeslider(thickness = 0.05)
```

### Var. mensal (%)
```{r}
plot_ly(
  data = res_int, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", var_mg)), 
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = " ")
  ) %>% rangeslider(thickness = 0.05)
```

### Var. 12 meses (%)
```{r}
plot_ly(
  data = res_int, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", var_12m)), 
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = " ", dtick = 20)
  ) %>% rangeslider(thickness = 0.05)
```

### % dívida externa total
```{r}
plot_ly(
  data = res_int_div_ext, 
  x = ~ano, 
  y = ~as.numeric(gsub(",", ".", valor)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = " ")
  ) %>% rangeslider(thickness = 0.05)
```

### Meses de importações
```{r}
plot_ly(
  data = res_int_imports, 
  x = ~ano, 
  y = ~as.numeric(gsub(",", ".", valor)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = " ")
  ) %>% rangeslider(thickness = 0.05)
```


Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese (US$ bilhões)

```{r}
reactable(
  res_int[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor = colDef(
      name = "Reservas internacionais",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### % dívida externa total

```{r}
reactable(
  res_int_div_ext,
  columns = list(
    ano = colDef(
      name = "Ano",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor = colDef(
      name = "Reservas internacionais (% dívida externa total)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Meses de importações

```{r}
reactable(
  res_int_imports,
  columns = list(
    ano = colDef(
      name = "Ano",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor = colDef(
      name = "Reservas internacionais (meses de importações)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Taxa de câmbio nominal {data-navmenu="Taxa de câmbio"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

Série diária do **dólar comercial nominal (venda)**. Taxas administradas e livres.

<br>

**Fonte:** Código 1 no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Taxa de câmbio (R$)

```{r}
plot_ly(
  data = cambio_nom, 
  x = ~date, 
  y = ~valor, 
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = " ", dtick = 30)
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese taxa de câmbio nominal

```{r, results='asis'}
reactable(
  cambio_nom[, -4],
  columns = list(
    data_fmt = colDef(
      name = "Data",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor = colDef(
      name = "Taxa de câmbio (R$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg = colDef(
      name = "Variação diária (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",  # texto
    backgroundColor = "white",  # fundo
    borderColor = "black",  # bordas
    stripedColor = "#D6EAF8",  # faixas alternadas
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Taxa de câmbio real {data-navmenu="Taxa de câmbio"} 

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A série mensal **taxa de câmbio real** reflete a variação da moeda nacional em relação a uma moeda ou a uma cesta de moedas estrangeiras (geralmente ponderada pelo fluxo de comércio exterior), corrigida pelo diferencial entre as inflações doméstica (IPCA) e externa. Jun/1994 = 100.

<br>

**Fonte:** Códigos 11752 (dólar americano) e 11753 (efetiva) no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Taxa de câmbio real - Índice jun/1994 = 100
```{r}
plot_ly() %>%
  add_trace(
    data = cambio_real,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_dol)),
    type = "scatter",
    mode = "lines",
    name = "Taxa de câmbio real (USD)"
  ) %>%
  add_trace(
    data = cambio_real,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_efet)),
    type = "scatter",
    mode = "lines",
    name = "Taxa de câmbio real efetiva"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = " ", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Variação mensal (%)
```{r}
plot_ly() %>%
  add_trace(
    data = cambio_real,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_mg_dol)),
    type = "scatter",
    mode = "lines",
    name = "Taxa de câmbio real (USD)"
  ) %>%
  add_trace(
    data = cambio_real,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_mg_efet)),
    type = "scatter",
    mode = "lines",
    name = "Taxa de câmbio real efetiva"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = " ", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Variação em 12 meses (%)
```{r}
plot_ly() %>%
  add_trace(
    data = cambio_real,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_12m_dol)),
    type = "scatter",
    mode = "lines",
    name = "Taxa de câmbio real (USD)"
  ) %>%
  add_trace(
    data = cambio_real,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_12m_efet)),
    type = "scatter",
    mode = "lines",
    name = "Taxa de câmbio real efetiva"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = " ", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Síntese taxa de câmbio real

```{r}
reactable(
  cambio_real[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_dol = colDef(
      name = "Taxa de câmbio real (USD)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg_dol = colDef(
      name = "Taxa de câmbio real (USD) -  Var. mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m_dol = colDef(
      name = "Taxa de câmbio real (USD) - Var. em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_efet = colDef(
      name = "Taxa de câmbio real efetiva",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg_efet = colDef(
      name = "Taxa de câmbio real efetiva - Var. mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m_efet = colDef(
      name = "Taxa de câmbio real efetiva - Var. em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Movimento de câmbio contratado {data-navmenu="Taxa de câmbio"}

Column {.sidebar} {data-width=250}
-----------------------------------------------------------------------

**Câmbio contratado comercial (exportações):** Somatório das contratações de compra de moeda estrangeira efetuadas pelos bancos comerciais junto ao mercado não financeiro relativas a exportações de bens. Código 13962 no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil (SGST/BCB).

**Câmbio contratado comercial (importações):** Somatório das contratações de venda de moeda estrangeira efetuadas pelos bancos comerciais ao mercado não financeiro relativas a importações de bens. Código 13966 no SGST/BCB.

**Câmbio contratado comercial (saldo):** Resultado líquido de contratações de câmbio comercial de exportação e de importação. Código 13967 no SGST/BCB.

**Câmbio contratado financeiro (compras):** Somatório das contratações de compra de moeda estrangeira efetuadas pelos bancos comerciais junto ao mercado não financeiro relativas a exportação de serviços e ingressos de capitais estrangeiros ou retorno de capitais brasileiros. Não inclui operações de câmbio de compra e venda junto ao Banco Central do Brasil. Código 13968 no SGST/BCB.

**Câmbio contratado financeiro (vendas):** Somatório das contratações de venda de moeda estrangeira efetuadas pelos bancos comerciais junto ao mercado não financeiro relativas a importação de serviços e saídas de capitais estrangeiros ou brasileiros. Não inclui operações de câmbio de compra e venda junto ao Banco Central do Brasil. Código 13969 no SGST/BCB.

**Câmbio contratado financeiro (saldo):** Resultado líquido de contratações de câmbio financeiro de compra e venda. Não inclui operações de câmbio de compra e venda junto ao Banco Central do Brasil. Código 13970 no SGST/BCB.

Todos os valores estão em milhões de dólares.

Column {data-width=750}  {.tabset}
-----------------------------------------------------------------------

### Síntese câmbio contratado (US$ milhões)
```{r, results='asis'}
reactable(
  cambio_contratado[, -9],
  columns = list(
    data_fmt = colDef(
      name = "Data",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_exp = colDef(
      name = "Comercial exportação (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_imp = colDef(
      name = "Comercial importação (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo_com = colDef(
      name = "Saldo comercial (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_compra = colDef(
      name = "Financeiro compra (4)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_venda = colDef(
      name = "Financeiro venda (5)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo_financ = colDef(
      name = "Saldo financeiro (6) (4-5)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo_total = colDef(
      name = "Saldo câmbio contratado (7) (3+6)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```
