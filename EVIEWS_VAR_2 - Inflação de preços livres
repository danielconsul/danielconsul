'Programa que calcula projeções da inflação de preços livres por meio de VÁRIOS modelos VAR.

'Os modelos VAR trabalham com conjuntos diferentes de variáveis endógenas. Esses conjuntos são escolhidos pelo usuário.
'A escolha é feita por meio de um objeto do tipo "table".
'Esse objeto se chama VARCONJ.
'Obs. 1: o número máximo de variáveis endógenas em cada VAR é 6.
'Obs. 2: o número máximo de variáveis exógenas em cada VAR é 6.
'Obs. 3: o número máximo de modelos VAR é 12.
'Obs. 4: a primeira variável na lista de endógenas é aquela para a qual desejamos calcular projeções. No nosso exemplo é a inflação de preços livres.
'O número de defasagens dos modelos é igual. Esse número é escolhido pelo usuário.

'Os modelos VAR geram previsões para a inflação de preços livres que, combinadas às projeções da inflação de preços administrados (obtidas de forma independente através de modelos auxiliares ou simplesmente tomando as projeções divulgadas pelo BCB), compõem as previsões da inflação plena mensurada pelo Índice Nacional de Preços ao Consumidor Amplo (IPCA).
'Referência principal: Box do Relatório de Inflação de setembro de 2012, "Revisão dos Modelos de Vetores Autorregressivos com Fundamentação Econômica – 2012".
'Referências adicionais: os modelos VAR estimados pelo BCB foram abordados anteriormente nos boxes “Vetores Auto-Regressivos” (Relatório de Inflação de junho de '2004), “Modelos de Vetores Auto-Regressivos” (Relatório de Inflação de março de 2008) e “Modelos de Vetores Autorregressivos” (Relatório de Inflação de junho de 2010).

'Utilização de amostras que são adicionadas de uma observação à medida que se avança no tempo. O tamanho da janela de estimação aumenta à medida que o tempo passa.

'Horizontes preditivos: 1 a 24.

'Dados inseridos manualmente, havendo necessidade de editar o programa.

'---------------------------------------------------------------------------------------------------

mode quiet

smpl @all

'Escolha do número de defasagens dos modelos VAR.
scalar lags = 1

'Definição da amostra de estimação inicial.
'Definição da amostra de teste inicial (comparação entre valores projetados e observados).
'A primeira janela de estimação começa em %lim_inf_first e termina em %lim_sup_first.
%lim_inf_first = "1999m06"
%lim_sup_first = "2010m12"
'A última janela de estimação começa em %lim_inf_last e termina em %lim_sup_last .
%lim_inf_last = "1999m06"
%lim_sup_last = "2020m12"

'O workfile termina na observação %lim_sup:
%lim_sup = "2023m12"

'Fixa o parâmetro que define o horizonte preditivo máximo:
scalar horizon = 24

'O número de execuções do programa é...
scalar a = @dtoo(%lim_sup_first)
scalar b = @dtoo(%lim_sup_last)
scalar col = b - a + 1

'Leitura do número de modelos VAR a ser testado pelo usuário.
string num = varconj(1, 1) 'Posição (1, 1) da matriz varconj tem o número 3, logo serão três modelos VAR testados. Cria um objeto de nome "num" com o número 3.
scalar N = @val(num) 'Transforma uma string em número.

'Cria as séries com os erros de projeção para 1 a 24 passos à frente.
'Cria as séries com as projeções para 1 a 24 passos à frente.
'Os horizontes de projeção são indexados pelo índice h.

for !h = 1 to horizon 'de 1 a 24
	delete(noerr) erro_var_{!h}
	delete(noerr) proj_var_{!h}
	series erro_var_{!h} 'Cria as séries erro_var_1 ... até erro_var_24
	series proj_var_{!h} 'Idem ao exemplo acima
next

'Cria as matrizes que guardarão as projeções feitas por cada modelo para cada horizonte preditivo.
'Trata-se de matrizes com 24 colunas cada uma.
'A primeira linha informa as projeções calculadas na data equivalente à observação a (2010m12), a segunda linha informa as projeções calculadas na data equivalente à observação a + 1 (2011m01) e assim por diante.
for !mod = 1 to N '1 a N = 3
	delete(noerr) proj_mod{!mod}
	matrix(col, 24) proj_mod{!mod} 'Matriz com col linhas (b - a + 1 = 121) e 24 colunas.
next

'Cria matrizes que guardarão os erros de projeção cometidas por cada modelo para cada horizonte preditivo.
'Trata-se de matrizes com 24 colunas cada uma.
'A primeira coluna informa a data na qual as projeções foram calculadas.
'A posição dos erros segue o mesmo padrão das projeções.
for !mod = 1 to N
	delete(noerr) erro_mod{!mod}
	matrix(col, 24) erro_mod{!mod}
next

'Essa parte do programa estima cada um dos modelos VAR que o usuário escolhe para fazer projeções da inflação dos preços livres.
'O procedimento executado com cada VAR é o seguinte:
'1) Fixa a amostra para estimação do modelo.
'2) Estima o modelo com o número desejado de defasagens (no caso, 1).
'3) Gera previsões para o período que se inicia no mês imediatamente posterior ao final da amostra de estimação. A base é o modelo estimado no passo anterior.
'4) Volta para o passo 1 colocando mais uma observação na amostra.

for !mod = 1 to N

	'Leitura do número de variáveis endógenas do modelo.
	string num_end = varconj(!mod + 1, 2) 'O número de variáveis endógenas é lido como uma "palavra". (4, 4 e 5)
	scalar N_end = @val(num_end) 'A "palavra" é convertida para o número correspondente.
	if ((N_end <= 1) or (N_end >= 7)) then 'O número máximo de variáveis endógenas do modelo é 6, e o mínimo, 1.
	%error = "O número de variáveis endógenas do modelo " + @str(!mod) + " é inválido!"
	@uiprompt(%error)
	stop
	endif

	'Leitura das variáveis endógenas do modelo.
	'Copia as séries correspondentes Às variáveis definidas acima para a folha "VAR2" do workfile.
	'Forma uma lista de variáveis endógenas.
	string lista = " " 'Vazia
	for !z = 1 to N_end ' 1 a 4, 1 a 4 e 1 a 5
		string end{!z} = varconj(!mod + 1, !z + 2) 'Lê o nome da z-ésima variável endógena
	string name = end{!z}	
	copy(o) Dados\{name} VAR2z{name}
	lista = lista + name + " " 'Atualiza a lista de variáveis endógenas
	next

	'Leitura das variáveis exógenas do modelo.
	string num_exo = varconj(!mod + 1, 9)
	scalar N_exo = @val(num_exo)
	if ((N_exo < 0) or (N_exo >= 7)) then
		%error = "O número de variáveis exógenas do modelo " + @str(!mod) + " é inválido!"
		@uiprompt(%error)
		stop
	endif

	'Se não há variáveis exógenas, então a lista é simplesmente o intercepto.
	if(N_exo = 0) then
		string lista_exo = "c"
	endif

	'Se há variáveis exógenas, então a lista deve incorporá-las.
	if ((N_exo >=1) and (N_exo <= 6)) then

		'Leitura das variáveis exógenas do modelo.
		'Copia as séries correspondentes às variáveis definidas acima para a folha "VAR2" do workfile.
		'Forma lista de variáveis exógenas.
		string lista_exo = "c"
		for !z = 1 to N_exo
			string exo{!z} = varconj(!mod + 1, !z + 9) 'Lê-se o nome da z-ésima variável exógena.
			string name = exo{!z}
			copy(o) Dados\{name} VAR2\{name} 'Copia a série temporal cujo nome acabou de ser lido.
			lista_Exo = lista_exo + name + " " 'Atualiza a lista de variáveis exógenas.
		next

	endif
	
	for !i = 1 to col

		'Ajusta a amostra de estimação.
		smpl %lim_inf_first %lim_sup_first + !i - 1

		'Estima o modelo VAR com o número escolhido de defasagens e obtém as projeções.
		var mod_var.ls 1 {lags} {lista} @ {lista_exo} '{lista} contém o nome das variáveis endógenas e {lista_exo} contém o nome das variáveis exógenas.
		mod_var.makemodel(vv)
		smpl %lim_sup_first + !i %lim_sup 'A amostra de projeção vai de 2011m01 a 2022m12 (embora o teto do workfile seja 2023m12, porque col = 121 meses).
		vv.solve
		rename {end1}_0 y_f{!i}

		'Cálculo das projeções e dos erros de previsão.
		for !h = 1 to horizon
			proj_var_{!h}(a + !i + !h - 1) = y_f{!i}(a + !i + !h - 1) 'Projeção.
			erro_var_{!h}(a + !i + !h - 1) = ({end1}(a + !i + !h - 1) - proj_var_{!h}(a + !i + !h - 1))^2 'Erro quandrático médio.
		next 'Fecha o loop de for indexado por h, que "varre" os horizontes preditivos.

		'Armazenamento das projeções e dos erros de previsão em matrizes.
		for !h = 1 to horizon
			proj_mod{!mod}(!i, !h) = proj_var_{!h}(a + !i + !h - 1)
			erro_mod{!mod}(!i, !h) = erro_var_{!h}(a + !i + !h - 1)
		next 'Fecha o loop de for indexado por h, que "varre" os horizontes preditivos.

		delete y_*
										
	next 'Fecha o loop que "varre" a amostra de teste ou, de outra forma, que representa a passagem do tempo. Esse loop é indexado por i.

'Cálculo dos erros quadráticos médios:
	
	matrix(1,4) result_mod{!mod} = na
				
	smpl %lim_sup_first + 1 %lim_sup
		
	result_mod{!mod}(1, 1) = @mean(erro_var_1)
	result_mod{!mod}(1, 2) = @mean(erro_var_6)
	result_mod{!mod}(1, 3) = @mean(erro_var_12)
	result_mod{!mod}(1, 4) = @mean(erro_var_24)

next 'Fecha o loop que "varre" os modelos VAR que devem ser testados. Esse loop é indexado por mod.

delete(noerr) result_var
table(N + 1, 5) result_var
setcell(result_var, 1, 2, "1", "c")
setcell(result_var, 1, 3, "6", "c")
setcell(result_var, 1, 4, "12", "c")
setcell(result_var, 1, 5, "24", "c")
for !mod = 1 to N
	setcell(result_var, !mod + 1, 1, "var" + @str(!mod), "c")
next

for !mod =  1 to N
	for !coluna = 1 to 4	
		setcell(result_var, !mod + 1, !coluna + 1, result_mod{!mod}(1, !coluna), 3)
	next
next

string s1 = @str(N+1)
result_var.setlines(a1:a{s1}) + o
result_var.setlines(b1:b{s1}) + o
result_var.setlines(c1:c{s1}) + o
result_var.setlines(d1:d{s1}) + o
result_var.setlines(e1:e{s1}) + o
for !z = 1 to (N+1)
	result_var.setlines(a{!z}:e{!z}) +o
next
delete s1

smpl @all

'Apaga objetos desnecessários
delete a
delete b
delete col
delete *_0
delete vv
delete y_*
delete end*
delete lista*
delete n
delete n_end
delete n_exo
delete name
delete num
delete num_end
delete num_exo
delete erro_var_*
delete proj_var_*
delete horizon
delete lags
