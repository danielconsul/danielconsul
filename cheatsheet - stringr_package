require(tidyverse)

# The stringr package provides a set of internally consistent tools for working with character strings,
# i.e. sequences of characters surrounded by quotation marks.


# 1. Detect matches -----------------------------------------------------------------------------------------------

str_detect(fruit, "a") #detecta palavras com a

str_starts(fruit, "a") #detecta palavras que começam com a

str_ends(fruit, "e") #detecta palavras que terminam com e

str_which(fruit, "a")
# Find the indexes of strings that contain a pattern match.

str_locate(fruit, "a")

fruits <- c("apple", "banana", "pear", "pineapple")
str_locate(fruits, "$")
str_locate(fruits, "a")
str_locate(fruits, "e")
str_locate(fruits, c("a", "b", "p", "p"))
# Locate the positions of pattern matches in a string.

str_count(fruit, "a")
# Count the number of matches in a string.


# 2. Subset strings -----------------------------------------------------------------------------------------------

str_sub(fruit, 1, 3) #mostra as três primeiras letras da palavra
str_sub(fruit, -2) #mostra as duas últimas letras da palavra
# Extract substrings from a character vector.

str_subset(fruit, "p")
# Return only the strings that contain a pattern match.

str_extract(fruit, "[aeiou]")
# Return the first pattern match found in each string, as a vector.

str_match(sentences, "(a|the) ([^ +])")
sentences

# Return the first pattern match found in each string, as a matrix with a column for each ( ) group in pattern.


# 3. Manage Lengths -----------------------------------------------------------------------------------------------

str_length(fruit)
#mostra a quantidade de letras de cada palavra

str_pad(fruit, 17)

str_trunc(sentences, 6)
# Truncate the width of strings, replacing content with ellipsis.

str_trim(str_pad(fruit, 17))
# Trim whitespace from the start and/or end of a string.

str_squish(str_pad(fruit, 17, "both"))
# Trim whitespace from each end and collapse multiple spaces into single spaces.


# 4. Mutate Strings -----------------------------------------------------------------------------------------------

str_sub(fruit, 1, 3) <- "str"
#troca os caracteres de 1 a 3 pelas letras str

str_sub(iris$Species, 1, 4) <- "MIAU"

str_replace(fruits, "p", "-")
# troca o primeiro p das palavras por -

str_replace_all(fruits, "p", "-")
# troca todos os p's das palavras por -

str_to_lower(sentences)
# coloca todas as letras em minúsculo

str_to_upper(sentences)
# coloca todas as letras em maiúsculo

str_to_title(sentences)
# coloca todas as primeiras letras das palavras em maiúsculo


# 5. Join and Split -----------------------------------------------------------------------------------------------
letters
LETTERS

str_c(letters, LETTERS)
str_c(iris$Sepal.Length, iris$Species)
#junta duas strings

str_flatten(fruits, ", ")
#junta em uma única string as strings separadas por uma vírgula

str_dup(fruit, times = 2) #duplica as strings
str_flatten(str_dup(fruits, times = 4), ", ") #quadruplica as strings e separa por vírgula

str_split_fixed(sentences, " ", n = 3)
#divide em três as sentenças

str_glue("Pi is {pi}")
str_glue("A Média é {7}")
# Create a string from strings and {expressions} to evaluate.

str_glue_data(mtcars, "{rownames(mtcars)} has {hp} hp")
str_glue_data(USArrests, "A taxa de população urbana do estado de {rownames(USArrests)} é de {UrbanPop}%.")
str_glue_data(iris, "O nome da espécie é {Species}")

# 6. Order strings ------------------------------------------------------------------------------------------------

str_order(fruit)
fruit[str_order(fruit)]
# Return the vector of indexes that sorts a character vector.
str_order(letters)

str_sort(fruit) #ordena um vetor de caracteres
str_sort(letters)

x <- c("100a10", "100a5", "2b", "2a")
str_sort(x)
str_sort(x, numeric = TRUE)


# 7. Helpers ------------------------------------------------------------------------------------------------------

str_conv(fruit,"ISO-8859-1")
# Override the encoding of a string.

str_view_all(sentences, "[aeiou]") #destaca todas as vogais das sentences
str_view_all(rownames(mtcars), "a")


# 8. Need to know -------------------------------------------------------------------------------------------------

Special Character Represents
         \\           \
         \"            "
         \n        new line

# Run ?"'" to see a complete list

?"'"

# \n	newline
# \r	carriage return
# \t	tab
# \b	backspace
# \a	alert (bell)
# \f	form feed
# \v	vertical tab
# \\	backslash \
# \'	ASCII apostrophe '
# \"	ASCII quotation mark "
# \`	ASCII grave accent (backtick) `
# \nnn	character with given octal code (1, 2 or 3 digits)
# \xnn	character with given hex code (1 or 2 hex digits)
# \unnnn	Unicode character with given code (1--4 hex digits)
# \Unnnnnnnn	Unicode character with given code (1--8 hex digits)


# 9. Regular Expressions ------------------------------------------------------------------------------------------

see <- function(rx) str_view_all("abc ABC 123\t.!?\\(){}\n", rx)

see("a")
see("[:upper:]") #todas as maiúsculas
see(".") #todos os caracteres
