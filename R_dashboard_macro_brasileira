---
title: "Estatísticas macroeconômicas brasileiras"
output: 
  flexdashboard::flex_dashboard:
    theme: readable
    favicon: favicon.png
    orientation: columns
    vertical_layout: fill
---

<style>
p {
  text-align: center;
  margin-right: 10px;
}
</style>

```{r setup, include=FALSE}
library(flexdashboard)
library(rsconnect)
library(tidyverse)
library(rbcb)
library(reactable)
library(plotly)
library(scales)
library(shiny)
library(WDI)
library(ipeadatar)
library(fredr)
library(zoo)
```

```{r, cache=TRUE}
# Coleta de dados:

# API key FRED
fredr_set_key("0087fc9b146c214d78104e3737039ea4")

# CAGED:
caged_adm <- ipeadata(code = "CAGED12_ADMISN12") %>% mutate(
  adm = value
) %>% select(date, adm)

caged_dem <- ipeadata(code = "CAGED12_DESLIGN12") %>% mutate(
  dem = value
) %>% select(date, dem)

caged_saldo <- ipeadata(code = "CAGED12_SALDON12") %>% mutate(
  saldo = value
) %>% select(date, saldo)

caged <- caged_adm %>% left_join(caged_dem) %>% left_join(caged_saldo) %>% mutate(
  data_fmt = format(date, "%m/%Y"),
  adm = number(adm, big.mark = ".", decimal.mark = ","),
  dem = number(dem, big.mark = ".", decimal.mark = ",", ),
  saldo = number(saldo, big.mark = ".", decimal.mark = ",")
) %>% select(data_fmt, adm, dem, saldo, date) %>% arrange(desc(date))

caged_graph <- caged_adm %>% left_join(caged_dem) %>% left_join(caged_saldo) %>% mutate(
  data_fmt = format(date, "%m/%Y")
) %>% select(data_fmt, adm, dem, saldo, date) %>% arrange(desc(date))

# PIM-PF:
pim_sec_ativ <- sidrar::get_sidra(
  api = "/t/8888/n1/all/v/11601,11602,11603/p/all/c544/all/d/v11601%201,v11602%201,v11603%201"
)

pim_sec_ativ <- pim_sec_ativ %>% mutate(
  data = lubridate::ym(`Mês (Código)`),
  variavel = Variável,
  sec_ativ = `Seções e atividades industriais (CNAE 2.0)`,
  valor = Valor,
  .keep = "none",  
) %>% pivot_wider(names_from = sec_ativ, values_from = valor) %>% 
  mutate(
  data_fmt = format(data, "%m/%Y"),
  `1 Indústria geral` = number(`1 Indústria geral`, decimal.mark = ",", accuracy = 0.01),
  `2 Indústrias extrativas` = number(`2 Indústrias extrativas`, decimal.mark = ",", accuracy = 0.01),
  `3 Indústrias de transformação` = number(`3 Indústrias de transformação`, decimal.mark = ",", accuracy = 0.01),
  `3.10 Fabricação de produtos alimentícios` = number(`3.10 Fabricação de produtos alimentícios`, decimal.mark = ",", accuracy = 0.01),
  `3.11 Fabricação de bebidas` = number(`3.11 Fabricação de bebidas`, decimal.mark = ",", accuracy = 0.01),
  `3.12 Fabricação de produtos do fumo` = number(`3.12 Fabricação de produtos do fumo`, decimal.mark = ",", accuracy = 0.01),
  `3.13 Fabricação de produtos têxteis` = number(`3.13 Fabricação de produtos têxteis`, decimal.mark = ",", accuracy = 0.01),
  `3.14 Confecção de artigos do vestuário e acessórios` = number(`3.14 Confecção de artigos do vestuário e acessórios`, decimal.mark = ",", accuracy = 0.01),
  `3.15 Preparação de couros e fabricação de artefatos de couro, artigos para viagem e calçados` = number(`3.15 Preparação de couros e fabricação de artefatos de couro, artigos para viagem e calçados`, decimal.mark = ",", accuracy = 0.01),
  `3.16 Fabricação de produtos de madeira` = number(`3.16 Fabricação de produtos de madeira`, decimal.mark = ",", accuracy = 0.01),
  `3.17 Fabricação de celulose, papel e produtos de papel` = number(`3.17 Fabricação de celulose, papel e produtos de papel`, decimal.mark = ",", accuracy = 0.01),
  `3.18 Impressão e reprodução de gravações` = number(`3.18 Impressão e reprodução de gravações`, decimal.mark = ",", accuracy = 0.01),
  `3.19 Fabricação de coque, de produtos derivados do petróleo e de biocombustíveis` = number(`3.19 Fabricação de coque, de produtos derivados do petróleo e de biocombustíveis`, decimal.mark = ",", accuracy = 0.01),
  `3.20 Fabricação de produtos químicos` = number(`3.20 Fabricação de produtos químicos`, decimal.mark = ",", accuracy = 0.01),
  `3.21 Fabricação de produtos farmoquímicos e farmacêuticos` = number(`3.21 Fabricação de produtos farmoquímicos e farmacêuticos`, decimal.mark = ",", accuracy = 0.01),
  `3.22 Fabricação de produtos de borracha e de material plástico` = number(`3.22 Fabricação de produtos de borracha e de material plástico`, decimal.mark = ",", accuracy = 0.01),
  `3.23 Fabricação de produtos de minerais não metálicos` = number(`3.23 Fabricação de produtos de minerais não metálicos`, decimal.mark = ",", accuracy = 0.01),
  `3.24 Metalurgia` = number(`3.24 Metalurgia`, decimal.mark = ",", accuracy = 0.01),
  `3.25 Fabricação de produtos de metal, exceto máquinas e equipamentos` = number(`3.25 Fabricação de produtos de metal, exceto máquinas e equipamentos`, decimal.mark = ",", accuracy = 0.01),
  `3.26 Fabricação de equipamentos de informática, produtos eletrônicos e ópticos` = number(`3.26 Fabricação de equipamentos de informática, produtos eletrônicos e ópticos`, decimal.mark = ",", accuracy = 0.01),
  `3.27 Fabricação de máquinas, aparelhos e materiais elétricos` = number(`3.27 Fabricação de máquinas, aparelhos e materiais elétricos`, decimal.mark = ",", accuracy = 0.01),
  `3.28 Fabricação de máquinas e equipamentos` = number(`3.28 Fabricação de máquinas e equipamentos`, decimal.mark = ",", accuracy = 0.01),
  `3.29 Fabricação de veículos automotores, reboques e carrocerias` = number(`3.29 Fabricação de veículos automotores, reboques e carrocerias`, decimal.mark = ",", accuracy = 0.01),
  `3.30 Fabricação de outros equipamentos de transporte, exceto veículos automotores` = number(`3.30 Fabricação de outros equipamentos de transporte, exceto veículos automotores`, decimal.mark = ",", accuracy = 0.01),
  `3.31 Fabricação de móveis` = number(`3.31 Fabricação de móveis`, decimal.mark = ",", accuracy = 0.01),
  `3.32 Fabricação de produtos diversos` = number(`3.32 Fabricação de produtos diversos`, decimal.mark = ",", accuracy = 0.01),
  `3.33 Manutenção, reparação e instalação de máquinas e equipamentos` = number(`3.33 Manutenção, reparação e instalação de máquinas e equipamentos`, decimal.mark = ",", accuracy = 0.01)
) %>% arrange(desc(data))

pim_sec_ativ_mg <- pim_sec_ativ %>% dplyr::filter(variavel == "PIMPF - Variação mês/mês imediatamente anterior, com ajuste sazonal (M/M-1)") %>% select(data_fmt, `1 Indústria geral`, `2 Indústrias extrativas`, `3 Indústrias de transformação`, `3.10 Fabricação de produtos alimentícios`, `3.11 Fabricação de bebidas`, `3.12 Fabricação de produtos do fumo`, `3.13 Fabricação de produtos têxteis`, `3.14 Confecção de artigos do vestuário e acessórios`, `3.15 Preparação de couros e fabricação de artefatos de couro, artigos para viagem e calçados`, `3.16 Fabricação de produtos de madeira`, `3.17 Fabricação de celulose, papel e produtos de papel`, `3.18 Impressão e reprodução de gravações`, `3.19 Fabricação de coque, de produtos derivados do petróleo e de biocombustíveis`, `3.20 Fabricação de produtos químicos`, `3.21 Fabricação de produtos farmoquímicos e farmacêuticos`, `3.22 Fabricação de produtos de borracha e de material plástico`, `3.23 Fabricação de produtos de minerais não metálicos`, `3.24 Metalurgia`, `3.25 Fabricação de produtos de metal, exceto máquinas e equipamentos`, `3.26 Fabricação de equipamentos de informática, produtos eletrônicos e ópticos`, `3.27 Fabricação de máquinas, aparelhos e materiais elétricos`, `3.28 Fabricação de máquinas e equipamentos`,  `3.29 Fabricação de veículos automotores, reboques e carrocerias`, `3.30 Fabricação de outros equipamentos de transporte, exceto veículos automotores`, `3.31 Fabricação de móveis`, `3.32 Fabricação de produtos diversos`, `3.33 Manutenção, reparação e instalação de máquinas e equipamentos`, data)

pim_sec_ativ_12m <- pim_sec_ativ %>% dplyr::filter(variavel == "PIMPF - Variação mês/mesmo mês do ano anterior (M/M-12)") %>% select(data_fmt, `1 Indústria geral`, `2 Indústrias extrativas`, `3 Indústrias de transformação`, `3.10 Fabricação de produtos alimentícios`, `3.11 Fabricação de bebidas`, `3.12 Fabricação de produtos do fumo`, `3.13 Fabricação de produtos têxteis`, `3.14 Confecção de artigos do vestuário e acessórios`, `3.15 Preparação de couros e fabricação de artefatos de couro, artigos para viagem e calçados`, `3.16 Fabricação de produtos de madeira`, `3.17 Fabricação de celulose, papel e produtos de papel`, `3.18 Impressão e reprodução de gravações`, `3.19 Fabricação de coque, de produtos derivados do petróleo e de biocombustíveis`, `3.20 Fabricação de produtos químicos`, `3.21 Fabricação de produtos farmoquímicos e farmacêuticos`, `3.22 Fabricação de produtos de borracha e de material plástico`, `3.23 Fabricação de produtos de minerais não metálicos`, `3.24 Metalurgia`, `3.25 Fabricação de produtos de metal, exceto máquinas e equipamentos`, `3.26 Fabricação de equipamentos de informática, produtos eletrônicos e ópticos`, `3.27 Fabricação de máquinas, aparelhos e materiais elétricos`, `3.28 Fabricação de máquinas e equipamentos`,  `3.29 Fabricação de veículos automotores, reboques e carrocerias`, `3.30 Fabricação de outros equipamentos de transporte, exceto veículos automotores`, `3.31 Fabricação de móveis`, `3.32 Fabricação de produtos diversos`, `3.33 Manutenção, reparação e instalação de máquinas e equipamentos`, data)

pim_sec_ativ_acum_ano <- pim_sec_ativ %>% dplyr::filter(variavel == "PIMPF - Variação acumulada no ano (em relação ao mesmo período do ano anterior)") %>% select(data_fmt, `1 Indústria geral`, `2 Indústrias extrativas`, `3 Indústrias de transformação`, `3.10 Fabricação de produtos alimentícios`, `3.11 Fabricação de bebidas`, `3.12 Fabricação de produtos do fumo`, `3.13 Fabricação de produtos têxteis`, `3.14 Confecção de artigos do vestuário e acessórios`, `3.15 Preparação de couros e fabricação de artefatos de couro, artigos para viagem e calçados`, `3.16 Fabricação de produtos de madeira`, `3.17 Fabricação de celulose, papel e produtos de papel`, `3.18 Impressão e reprodução de gravações`, `3.19 Fabricação de coque, de produtos derivados do petróleo e de biocombustíveis`, `3.20 Fabricação de produtos químicos`, `3.21 Fabricação de produtos farmoquímicos e farmacêuticos`, `3.22 Fabricação de produtos de borracha e de material plástico`, `3.23 Fabricação de produtos de minerais não metálicos`, `3.24 Metalurgia`, `3.25 Fabricação de produtos de metal, exceto máquinas e equipamentos`, `3.26 Fabricação de equipamentos de informática, produtos eletrônicos e ópticos`, `3.27 Fabricação de máquinas, aparelhos e materiais elétricos`, `3.28 Fabricação de máquinas e equipamentos`,  `3.29 Fabricação de veículos automotores, reboques e carrocerias`, `3.30 Fabricação de outros equipamentos de transporte, exceto veículos automotores`, `3.31 Fabricação de móveis`, `3.32 Fabricação de produtos diversos`, `3.33 Manutenção, reparação e instalação de máquinas e equipamentos`, data)

# TAXA SELIC:

selic_over <- get_series(
  code = c(valor_selic_over = 4189)
) %>% mutate(
  data = date
) %>% mutate(
  date = format(date, "%Y-%m")
) %>% select(data, valor_selic_over, date) %>% filter(data >= "1996-01-01")

ipca_12m <- sidrar::get_sidra(
  api = "/t/1737/n1/all/v/2265/p/all/d/v2265%202"
)

ipca_12m <- ipca_12m %>% mutate(
  data = lubridate::ym(`Mês (Código)`),
  valor_ipca12m = Valor,
  .keep = "none",  
) %>% mutate(
  date = format(data, "%Y-%m")
) %>% filter(data >= "1996-01-01")

fed_rate <- fredr(
  series_id = "DFF"
) %>% mutate(
  data = date,
  valor_fed_rate = value
) %>% select(date, valor_fed_rate)

fed_rate <- fed_rate %>% mutate(
  date = format(date, "%Y-%m")) 
  
fed_rate <- aggregate(
  valor_fed_rate ~ date,
  data = fed_rate,
  FUN = "mean"
) %>% filter(date >= "1996-01")


selic <- left_join(selic_over, ipca_12m, by = "date")
selic <- left_join(selic, fed_rate, by = "date") %>% select(data.x, valor_selic_over,
                                                            valor_ipca12m, valor_fed_rate, date) %>% 
  rename(data = data.x)

selic <- selic %>% mutate(
  selic_real = ((valor_selic_over/100 + 1)/(valor_ipca12m/100 + 1) - 1) * 100,
  dif_juros = ((valor_selic_over/100 + 1)/(valor_fed_rate/100 + 1) - 1) * 100
) %>% mutate(
  data_fmt = format(data, "%m/%Y"),
  `valor_selic_over` = number(`valor_selic_over`, decimal.mark = ",", accuracy = 0.01),
  `valor_ipca12m` = number(`valor_ipca12m`, decimal.mark = ",", accuracy = 0.01),
  `valor_fed_rate` = number(`valor_fed_rate`, decimal.mark = ",", accuracy = 0.01),
  `selic_real` = number(`selic_real`, decimal.mark = ",", accuracy = 0.01),
  `dif_juros` = number(`dif_juros`, decimal.mark = ",", accuracy = 0.01),
) %>% select(data_fmt, valor_selic_over, valor_ipca12m, valor_fed_rate,
             selic_real, dif_juros, data) %>% arrange(desc(data))

# INDICADOR IPEA DE FBCF:

ipea_fbcf <- ipeadata(code = "GAC12_INDFBCFDESSAZ12") %>% mutate(
  valor_ipea_fbcf = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_ipea_fbcf = number(valor_ipea_fbcf, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
) %>% select(data_fmt, valor_ipea_fbcf, date)

ipea_fbcf_cc <- ipeadata(code = "GAC12_INDFBCFCCDESSAZ12") %>% mutate(
  valor_ipea_fbcf_cc = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_ipea_fbcf_cc = number(valor_ipea_fbcf_cc, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
) %>% select(data_fmt, valor_ipea_fbcf_cc, date)

ind_fbcf <- left_join(ipea_fbcf, ipea_fbcf_cc) %>% arrange(desc(date)) %>% select(
  data_fmt, valor_ipea_fbcf, valor_ipea_fbcf_cc, date
)

igpm <- ipeadata(code = "IGP12_IGPMG12") %>% mutate(
  valor_igpm = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  fator_igpm = valor_igpm / 100 + 1
) %>% mutate(
  igpm_12m = rollapply(fator_igpm, width = 12, FUN = prod, align = "right", fill = NA)
) %>% mutate(
  igpm_12m = (igpm_12m - 1) * 100
) %>% mutate(
  valor_igpm = number(valor_igpm, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
  igpm_12m = number(igpm_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
) %>% select(data_fmt, valor_igpm, igpm_12m, date) %>% arrange(desc(date)) %>% filter(
  date >= "1996-01-01"
)

# IBC-Br:
ibc <- get_series(
  code = c(valor_ibc = 24364)
) %>% mutate(
  var_ibc_mg = (valor_ibc / lag(valor_ibc) - 1) * 100
) %>% mutate(
  data_fmt = format(date, "%m/%Y"),
  valor_ibc = number(valor_ibc, decimal.mark = ",", accuracy = 0.01),
  var_ibc_mg = number(var_ibc_mg, decimal.mark = ",", accuracy = 0.01)
) %>% select(data_fmt, valor_ibc, var_ibc_mg, date)

ibc_agro <- get_series(
  code = c(valor_ibc_agro = 29602)
) %>% mutate(
  var_ibc_mg_agro = (valor_ibc_agro / lag(valor_ibc_agro) - 1) * 100
) %>% mutate(
  data_fmt = format(date, "%m/%Y"),
  valor_ibc_agro = number(valor_ibc_agro, decimal.mark = ",", accuracy = 0.01),
  var_ibc_mg_agro = number(var_ibc_mg_agro, decimal.mark = ",", accuracy = 0.01)
) %>% select(data_fmt, valor_ibc_agro, var_ibc_mg_agro, date)

ibc_ind <- get_series(
  code = c(valor_ibc_ind = 29604)
) %>% mutate(
  var_ibc_mg_ind = (valor_ibc_ind / lag(valor_ibc_ind) - 1) * 100
) %>% mutate(
  data_fmt = format(date, "%m/%Y"),
  valor_ibc_ind = number(valor_ibc_ind, decimal.mark = ",", accuracy = 0.01),
  var_ibc_mg_ind = number(var_ibc_mg_ind, decimal.mark = ",", accuracy = 0.01)
) %>% select(data_fmt, valor_ibc_ind, var_ibc_mg_ind, date)

ibc_serv <- get_series(
  code = c(valor_ibc_serv = 29606)
) %>% mutate(
  var_ibc_mg_serv = (valor_ibc_serv / lag(valor_ibc_serv) - 1) * 100
) %>% mutate(
  data_fmt = format(date, "%m/%Y"),
  valor_ibc_serv = number(valor_ibc_serv, decimal.mark = ",", accuracy = 0.01),
  var_ibc_mg_serv = number(var_ibc_mg_serv, decimal.mark = ",", accuracy = 0.01)
) %>% select(data_fmt, valor_ibc_serv, var_ibc_mg_serv, date)

ibc_ex_agro <- get_series(
  code = c(valor_ibc_ex_agro = 29608)
) %>% mutate(
  var_ibc_mg_ex_agro = (valor_ibc_ex_agro / lag(valor_ibc_ex_agro) - 1) * 100
) %>% mutate(
  data_fmt = format(date, "%m/%Y"),
  valor_ibc_ex_agro = number(valor_ibc_ex_agro, decimal.mark = ",", accuracy = 0.01),
  var_ibc_mg_ex_agro = number(var_ibc_mg_ex_agro, decimal.mark = ",", accuracy = 0.01)
) %>% select(data_fmt, valor_ibc_ex_agro, var_ibc_mg_ex_agro, date)

ibc_impostos <- get_series(
  code = c(valor_ibc_impostos = 29610)
) %>% mutate(
  var_ibc_mg_impostos = (valor_ibc_impostos / lag(valor_ibc_impostos) - 1) * 100
) %>% mutate(
  data_fmt = format(date, "%m/%Y"),
  valor_ibc_impostos = number(valor_ibc_impostos, decimal.mark = ",", accuracy = 0.01),
  var_ibc_mg_impostos = number(var_ibc_mg_impostos, decimal.mark = ",", accuracy = 0.01)
) %>% select(data_fmt, valor_ibc_impostos, var_ibc_mg_impostos, date)

ibc <- ibc %>%
  left_join(ibc_agro) %>%
  left_join(ibc_ex_agro) %>%
  left_join(ibc_impostos) %>%
  left_join(ibc_ind) %>%
  left_join(ibc_serv)

ibc <- ibc %>% select(data_fmt, valor_ibc, var_ibc_mg,
                      valor_ibc_agro, var_ibc_mg_agro,
                      valor_ibc_ind, var_ibc_mg_ind,
                      valor_ibc_serv, var_ibc_mg_serv,
                      valor_ibc_ex_agro, var_ibc_mg_ex_agro,
                      valor_ibc_impostos, var_ibc_mg_impostos, date) %>% 
  arrange(desc(date))

# IPP (indústria geral, seções e atividades):
ipp <- sidrar::get_sidra(
  api = "/t/6903/n1/all/v/all/p/all/c842/all/d/v1394%202,v1395%202,v1396%202,v10008%205"
)

ipp <- ipp %>% mutate(
  data = lubridate::ym(`Mês (Código)`),
  variavel = Variável,
  grupos = `Indústria geral, indústrias extrativas e indústrias de transformação e atividades (CNAE 2.0)`,
  valor = Valor,
  .keep = "none",  
) %>% pivot_wider(names_from = grupos, values_from = valor) %>% 
  mutate(
  data_fmt = format(data, "%m/%Y"),
  `Indústria Geral` = number(`Indústria Geral`, decimal.mark = ",", accuracy = 0.01),
  `B Indústrias Extrativas` = number(`B Indústrias Extrativas`, decimal.mark = ",", accuracy = 0.01),
  `C Indústrias de Transformação` = number(`C Indústrias de Transformação`, decimal.mark = ",", accuracy = 0.01),
  `10 FABRICAÇÃO DE PRODUTOS ALIMENTÍCIOS` = number(`10 FABRICAÇÃO DE PRODUTOS ALIMENTÍCIOS`, decimal.mark = ",", accuracy = 0.01),
  `11 FABRICAÇÃO DE BEBIDAS` = number(`11 FABRICAÇÃO DE BEBIDAS`, decimal.mark = ",", accuracy = 0.01),
  `12 FABRICAÇÃO DE PRODUTOS DO FUMO` = number(`12 FABRICAÇÃO DE PRODUTOS DO FUMO`, decimal.mark = ",", accuracy = 0.01),
  `13 FABRICAÇÃO DE PRODUTOS TÊXTEIS` = number(`13 FABRICAÇÃO DE PRODUTOS TÊXTEIS`, decimal.mark = ",", accuracy = 0.01),
  `14 CONFECÇÃO DE ARTIGOS DO VESTUÁRIO E ACESSÓRIOS` = number(`14 CONFECÇÃO DE ARTIGOS DO VESTUÁRIO E ACESSÓRIOS`, decimal.mark = ",", accuracy = 0.01),
  `15 PREPARAÇÃO DE COUROS E FABRICAÇÃO DE ARTEFATOS DE COURO, ARTIGOS PARA VIAGEM E CALÇADOS` = number(`15 PREPARAÇÃO DE COUROS E FABRICAÇÃO DE ARTEFATOS DE COURO, ARTIGOS PARA VIAGEM E CALÇADOS`, decimal.mark = ",", accuracy = 0.01),
  `16 FABRICAÇÃO DE PRODUTOS DE MADEIRA` = number(`16 FABRICAÇÃO DE PRODUTOS DE MADEIRA`, decimal.mark = ",", accuracy = 0.01),
  `17 FABRICAÇÃO DE CELULOSE, PAPEL E PRODUTOS DE PAPEL` = number(`17 FABRICAÇÃO DE CELULOSE, PAPEL E PRODUTOS DE PAPEL`, decimal.mark = ",", accuracy = 0.01),
  `18 IMPRESSÃO E REPRODUÇÃO DE GRAVAÇÕES` = number(`18 IMPRESSÃO E REPRODUÇÃO DE GRAVAÇÕES`, decimal.mark = ",", accuracy = 0.01),
  `19 FABRICAÇÃO DE COQUE, DE PRODUTOS DERIVADOS DO PETRÓLEO E DE BIOCOMBUSTÍVEIS` = number(`19 FABRICAÇÃO DE COQUE, DE PRODUTOS DERIVADOS DO PETRÓLEO E DE BIOCOMBUSTÍVEIS`, decimal.mark = ",", accuracy = 0.01),
  `20B FABRICAÇÃO DE SABÕES, DETERGENTES, PRODUTOS DE LIMPEZA, COSMÉTICOS, PRODUTOS DE PERFUMARIA E DE HIGIENE PESSOAL` = number(`20B FABRICAÇÃO DE SABÕES, DETERGENTES, PRODUTOS DE LIMPEZA, COSMÉTICOS, PRODUTOS DE PERFUMARIA E DE HIGIENE PESSOAL`, decimal.mark = ",", accuracy = 0.01),
  `20C FABRICAÇÃO DE OUTROS PRODUTOS QUÍMICOS` = number(`20C FABRICAÇÃO DE OUTROS PRODUTOS QUÍMICOS`, decimal.mark = ",", accuracy = 0.01),
  `21 FABRICAÇÃO DE PRODUTOS FARMOQUÍMICOS E FARMACÊUTICOS` = number(`21 FABRICAÇÃO DE PRODUTOS FARMOQUÍMICOS E FARMACÊUTICOS`, decimal.mark = ",", accuracy = 0.01),
  `22 FABRICAÇÃO DE PRODUTOS DE BORRACHA E DE MATERIAL PLÁSTICO` = number(`22 FABRICAÇÃO DE PRODUTOS DE BORRACHA E DE MATERIAL PLÁSTICO`, decimal.mark = ",", accuracy = 0.01),
  `23 FABRICAÇÃO DE PRODUTOS DE MINERAIS NÃO METÁLICOS` = number(`23 FABRICAÇÃO DE PRODUTOS DE MINERAIS NÃO METÁLICOS`, decimal.mark = ",", accuracy = 0.01),
  `24 METALURGIA` = number(`24 METALURGIA`, decimal.mark = ",", accuracy = 0.01),
  `25 FABRICAÇÃO DE PRODUTOS DE METAL, EXCETO MÁQUINAS E EQUIPAMENTOS` = number(`25 FABRICAÇÃO DE PRODUTOS DE METAL, EXCETO MÁQUINAS E EQUIPAMENTOS`, decimal.mark = ",", accuracy = 0.01),
  `26 FABRICAÇÃO DE EQUIPAMENTOS DE INFORMÁTICA, PRODUTOS ELETRÔNICOS E ÓPTICOS` = number(`26 FABRICAÇÃO DE EQUIPAMENTOS DE INFORMÁTICA, PRODUTOS ELETRÔNICOS E ÓPTICOS`, decimal.mark = ",", accuracy = 0.01),
  `27 FABRICAÇÃO DE MÁQUINAS, APARELHOS E MATERIAIS ELÉTRICOS` = number(`27 FABRICAÇÃO DE MÁQUINAS, APARELHOS E MATERIAIS ELÉTRICOS`, decimal.mark = ",", accuracy = 0.01),
  `28 FABRICAÇÃO DE MÁQUINAS E EQUIPAMENTOS` = number(`28 FABRICAÇÃO DE MÁQUINAS E EQUIPAMENTOS`, decimal.mark = ",", accuracy = 0.01),
  `29 FABRICAÇÃO DE VEÍCULOS AUTOMOTORES, REBOQUES E CARROCERIAS` = number(`29 FABRICAÇÃO DE VEÍCULOS AUTOMOTORES, REBOQUES E CARROCERIAS`, decimal.mark = ",", accuracy = 0.01),
  `30 FABRICAÇÃO DE OUTROS EQUIPAMENTOS DE TRANSPORTE, EXCETO VEÍCULOS AUTOMOTORES` = number(`30 FABRICAÇÃO DE OUTROS EQUIPAMENTOS DE TRANSPORTE, EXCETO VEÍCULOS AUTOMOTORES`, decimal.mark = ",", accuracy = 0.01),
  `31 FABRICAÇÃO DE MÓVEIS` = number(`31 FABRICAÇÃO DE MÓVEIS`, decimal.mark = ",", accuracy = 0.01)
  ) %>% 
  arrange(desc(data))

ipp_mg <- ipp %>% dplyr::filter(variavel == "IPP - Variação mês/mês imediatamente anterior (M/M-1)") %>% 
  select(data_fmt,`Indústria Geral`, `B Indústrias Extrativas`, `C Indústrias de Transformação`, `10 FABRICAÇÃO DE PRODUTOS ALIMENTÍCIOS`, `11 FABRICAÇÃO DE BEBIDAS`, `12 FABRICAÇÃO DE PRODUTOS DO FUMO`,
`13 FABRICAÇÃO DE PRODUTOS TÊXTEIS`, `14 CONFECÇÃO DE ARTIGOS DO VESTUÁRIO E ACESSÓRIOS`, `15 PREPARAÇÃO DE COUROS E FABRICAÇÃO DE ARTEFATOS DE COURO, ARTIGOS PARA VIAGEM E CALÇADOS`,
`16 FABRICAÇÃO DE PRODUTOS DE MADEIRA`, `17 FABRICAÇÃO DE CELULOSE, PAPEL E PRODUTOS DE PAPEL`, `18 IMPRESSÃO E REPRODUÇÃO DE GRAVAÇÕES`, `19 FABRICAÇÃO DE COQUE, DE PRODUTOS DERIVADOS DO PETRÓLEO E DE BIOCOMBUSTÍVEIS`,
`20B FABRICAÇÃO DE SABÕES, DETERGENTES, PRODUTOS DE LIMPEZA, COSMÉTICOS, PRODUTOS DE PERFUMARIA E DE HIGIENE PESSOAL`, `20C FABRICAÇÃO DE OUTROS PRODUTOS QUÍMICOS`, `21 FABRICAÇÃO DE PRODUTOS FARMOQUÍMICOS E FARMACÊUTICOS`,
`22 FABRICAÇÃO DE PRODUTOS DE BORRACHA E DE MATERIAL PLÁSTICO`, `23 FABRICAÇÃO DE PRODUTOS DE MINERAIS NÃO METÁLICOS`, `24 METALURGIA`, `25 FABRICAÇÃO DE PRODUTOS DE METAL, EXCETO MÁQUINAS E EQUIPAMENTOS`,
`26 FABRICAÇÃO DE EQUIPAMENTOS DE INFORMÁTICA, PRODUTOS ELETRÔNICOS E ÓPTICOS`, `27 FABRICAÇÃO DE MÁQUINAS, APARELHOS E MATERIAIS ELÉTRICOS`, `28 FABRICAÇÃO DE MÁQUINAS E EQUIPAMENTOS`,
`29 FABRICAÇÃO DE VEÍCULOS AUTOMOTORES, REBOQUES E CARROCERIAS`,  `30 FABRICAÇÃO DE OUTROS EQUIPAMENTOS DE TRANSPORTE, EXCETO VEÍCULOS AUTOMOTORES`,`31 FABRICAÇÃO DE MÓVEIS`, data)
  
ipp_acum_ano <- ipp %>% dplyr::filter(variavel == "IPP - Variação acumulada no ano (em relação a dezembro do ano anterior)") %>% select(data_fmt,`Indústria Geral`, `B Indústrias Extrativas`, `C Indústrias de Transformação`, `10 FABRICAÇÃO DE PRODUTOS ALIMENTÍCIOS`, `11 FABRICAÇÃO DE BEBIDAS`, `12 FABRICAÇÃO DE PRODUTOS DO FUMO`,
`13 FABRICAÇÃO DE PRODUTOS TÊXTEIS`, `14 CONFECÇÃO DE ARTIGOS DO VESTUÁRIO E ACESSÓRIOS`, `15 PREPARAÇÃO DE COUROS E FABRICAÇÃO DE ARTEFATOS DE COURO, ARTIGOS PARA VIAGEM E CALÇADOS`,
`16 FABRICAÇÃO DE PRODUTOS DE MADEIRA`, `17 FABRICAÇÃO DE CELULOSE, PAPEL E PRODUTOS DE PAPEL`, `18 IMPRESSÃO E REPRODUÇÃO DE GRAVAÇÕES`, `19 FABRICAÇÃO DE COQUE, DE PRODUTOS DERIVADOS DO PETRÓLEO E DE BIOCOMBUSTÍVEIS`,
`20B FABRICAÇÃO DE SABÕES, DETERGENTES, PRODUTOS DE LIMPEZA, COSMÉTICOS, PRODUTOS DE PERFUMARIA E DE HIGIENE PESSOAL`, `20C FABRICAÇÃO DE OUTROS PRODUTOS QUÍMICOS`, `21 FABRICAÇÃO DE PRODUTOS FARMOQUÍMICOS E FARMACÊUTICOS`,
`22 FABRICAÇÃO DE PRODUTOS DE BORRACHA E DE MATERIAL PLÁSTICO`, `23 FABRICAÇÃO DE PRODUTOS DE MINERAIS NÃO METÁLICOS`, `24 METALURGIA`, `25 FABRICAÇÃO DE PRODUTOS DE METAL, EXCETO MÁQUINAS E EQUIPAMENTOS`,
`26 FABRICAÇÃO DE EQUIPAMENTOS DE INFORMÁTICA, PRODUTOS ELETRÔNICOS E ÓPTICOS`, `27 FABRICAÇÃO DE MÁQUINAS, APARELHOS E MATERIAIS ELÉTRICOS`, `28 FABRICAÇÃO DE MÁQUINAS E EQUIPAMENTOS`,
`29 FABRICAÇÃO DE VEÍCULOS AUTOMOTORES, REBOQUES E CARROCERIAS`,  `30 FABRICAÇÃO DE OUTROS EQUIPAMENTOS DE TRANSPORTE, EXCETO VEÍCULOS AUTOMOTORES`,`31 FABRICAÇÃO DE MÓVEIS`, data)
  
ipp_12m <- ipp %>% dplyr::filter(variavel == "IPP - Variação mês/mesmo mês do ano anterior (M/M-12)") %>% select(data_fmt,`Indústria Geral`, `B Indústrias Extrativas`, `C Indústrias de Transformação`, `10 FABRICAÇÃO DE PRODUTOS ALIMENTÍCIOS`, `11 FABRICAÇÃO DE BEBIDAS`, `12 FABRICAÇÃO DE PRODUTOS DO FUMO`,
`13 FABRICAÇÃO DE PRODUTOS TÊXTEIS`, `14 CONFECÇÃO DE ARTIGOS DO VESTUÁRIO E ACESSÓRIOS`, `15 PREPARAÇÃO DE COUROS E FABRICAÇÃO DE ARTEFATOS DE COURO, ARTIGOS PARA VIAGEM E CALÇADOS`,
`16 FABRICAÇÃO DE PRODUTOS DE MADEIRA`, `17 FABRICAÇÃO DE CELULOSE, PAPEL E PRODUTOS DE PAPEL`, `18 IMPRESSÃO E REPRODUÇÃO DE GRAVAÇÕES`, `19 FABRICAÇÃO DE COQUE, DE PRODUTOS DERIVADOS DO PETRÓLEO E DE BIOCOMBUSTÍVEIS`,
`20B FABRICAÇÃO DE SABÕES, DETERGENTES, PRODUTOS DE LIMPEZA, COSMÉTICOS, PRODUTOS DE PERFUMARIA E DE HIGIENE PESSOAL`, `20C FABRICAÇÃO DE OUTROS PRODUTOS QUÍMICOS`, `21 FABRICAÇÃO DE PRODUTOS FARMOQUÍMICOS E FARMACÊUTICOS`,
`22 FABRICAÇÃO DE PRODUTOS DE BORRACHA E DE MATERIAL PLÁSTICO`, `23 FABRICAÇÃO DE PRODUTOS DE MINERAIS NÃO METÁLICOS`, `24 METALURGIA`, `25 FABRICAÇÃO DE PRODUTOS DE METAL, EXCETO MÁQUINAS E EQUIPAMENTOS`,
`26 FABRICAÇÃO DE EQUIPAMENTOS DE INFORMÁTICA, PRODUTOS ELETRÔNICOS E ÓPTICOS`, `27 FABRICAÇÃO DE MÁQUINAS, APARELHOS E MATERIAIS ELÉTRICOS`, `28 FABRICAÇÃO DE MÁQUINAS E EQUIPAMENTOS`,
`29 FABRICAÇÃO DE VEÍCULOS AUTOMOTORES, REBOQUES E CARROCERIAS`,  `30 FABRICAÇÃO DE OUTROS EQUIPAMENTOS DE TRANSPORTE, EXCETO VEÍCULOS AUTOMOTORES`,`31 FABRICAÇÃO DE MÓVEIS`, data)
  
ipp_num_ind <- ipp %>% dplyr::filter(variavel == "IPP - Número-índice (dezembro de 2018 = 100)") %>% select(data_fmt,`Indústria Geral`, `B Indústrias Extrativas`, `C Indústrias de Transformação`, `10 FABRICAÇÃO DE PRODUTOS ALIMENTÍCIOS`, `11 FABRICAÇÃO DE BEBIDAS`, `12 FABRICAÇÃO DE PRODUTOS DO FUMO`,
`13 FABRICAÇÃO DE PRODUTOS TÊXTEIS`, `14 CONFECÇÃO DE ARTIGOS DO VESTUÁRIO E ACESSÓRIOS`, `15 PREPARAÇÃO DE COUROS E FABRICAÇÃO DE ARTEFATOS DE COURO, ARTIGOS PARA VIAGEM E CALÇADOS`,
`16 FABRICAÇÃO DE PRODUTOS DE MADEIRA`, `17 FABRICAÇÃO DE CELULOSE, PAPEL E PRODUTOS DE PAPEL`, `18 IMPRESSÃO E REPRODUÇÃO DE GRAVAÇÕES`, `19 FABRICAÇÃO DE COQUE, DE PRODUTOS DERIVADOS DO PETRÓLEO E DE BIOCOMBUSTÍVEIS`,
`20B FABRICAÇÃO DE SABÕES, DETERGENTES, PRODUTOS DE LIMPEZA, COSMÉTICOS, PRODUTOS DE PERFUMARIA E DE HIGIENE PESSOAL`, `20C FABRICAÇÃO DE OUTROS PRODUTOS QUÍMICOS`, `21 FABRICAÇÃO DE PRODUTOS FARMOQUÍMICOS E FARMACÊUTICOS`,
`22 FABRICAÇÃO DE PRODUTOS DE BORRACHA E DE MATERIAL PLÁSTICO`, `23 FABRICAÇÃO DE PRODUTOS DE MINERAIS NÃO METÁLICOS`, `24 METALURGIA`, `25 FABRICAÇÃO DE PRODUTOS DE METAL, EXCETO MÁQUINAS E EQUIPAMENTOS`,
`26 FABRICAÇÃO DE EQUIPAMENTOS DE INFORMÁTICA, PRODUTOS ELETRÔNICOS E ÓPTICOS`, `27 FABRICAÇÃO DE MÁQUINAS, APARELHOS E MATERIAIS ELÉTRICOS`, `28 FABRICAÇÃO DE MÁQUINAS E EQUIPAMENTOS`,
`29 FABRICAÇÃO DE VEÍCULOS AUTOMOTORES, REBOQUES E CARROCERIAS`,  `30 FABRICAÇÃO DE OUTROS EQUIPAMENTOS DE TRANSPORTE, EXCETO VEÍCULOS AUTOMOTORES`,`31 FABRICAÇÃO DE MÓVEIS`, data)

# IPP (GRANDES CATEGORIS ECONÔMICAS):
ipp_gce <- sidrar::get_sidra(
  api = "/t/6904/n1/all/v/1394,1395,1396/p/all/c543/all/d/v1394%202,v1395%202,v1396%202"
)

ipp_gce <- ipp_gce %>% mutate(
  data = lubridate::ym(`Mês (Código)`),
  variavel = Variável,
  gce = `Grandes categorias econômicas`,
  valor = Valor,
  .keep = "none",  
) %>% pivot_wider(names_from = gce, values_from = valor) %>% 
  mutate(
  data_fmt = format(data, "%m/%Y"),
  `Indústria geral` = number(`Indústria geral`, decimal.mark = ",", accuracy = 0.01),
  `Bens de capital (BK)` = number(`Bens de capital (BK)`, decimal.mark = ",", accuracy = 0.01),
  `Bens intermediários (BI)` = number(`Bens intermediários (BI)`, decimal.mark = ",", accuracy = 0.01),
  `Bens de consumo (BC)` = number(`Bens de consumo (BC)`, decimal.mark = ",", accuracy = 0.01),
  `Bens de consumo duráveis (BCD)` = number(`Bens de consumo duráveis (BCD)`, decimal.mark = ",", accuracy = 0.01),
  `Bens de consumo semiduráveis e não duráveis (BCND)` = number(`Bens de consumo semiduráveis e não duráveis (BCND)`, decimal.mark = ",", accuracy = 0.01)
  ) %>% 
  arrange(desc(data))


ipp_gce_mg <- ipp_gce %>% dplyr::filter(variavel == "IPP - Variação mês/mês imediatamente anterior (M/M-1)") %>% select(data_fmt,`Indústria geral`, `Bens de capital (BK)`, `Bens intermediários (BI)`, `Bens de consumo (BC)`, `Bens de consumo duráveis (BCD)`, `Bens de consumo semiduráveis e não duráveis (BCND)`, data)

ipp_gce_acum_ano <- ipp_gce %>% dplyr::filter(variavel == "IPP - Variação acumulada no ano (em relação a dezembro do ano anterior)") %>% select(data_fmt,`Indústria geral`, `Bens de capital (BK)`, `Bens intermediários (BI)`, `Bens de consumo (BC)`, `Bens de consumo duráveis (BCD)`, `Bens de consumo semiduráveis e não duráveis (BCND)`, data)

ipp_gce_12m <- ipp_gce %>% dplyr::filter(variavel == "IPP - Variação mês/mesmo mês do ano anterior (M/M-12)") %>% select(data_fmt,`Indústria geral`, `Bens de capital (BK)`, `Bens intermediários (BI)`, `Bens de consumo (BC)`, `Bens de consumo duráveis (BCD)`, `Bens de consumo semiduráveis e não duráveis (BCND)`, data)

# IPP (GRUPOS INDUSTRIAIS SELECIONADOS):
ipp_gis <- sidrar::get_sidra(
  api = "/t/6723/n1/all/v/1394,1395,1396/p/all/c844/all/d/v1394%202,v1395%202,v1396%202"
)
         
ipp_gis <- ipp_gis %>% mutate(
  data = lubridate::ym(`Mês (Código)`),
  variavel = Variável,
  gis = `Grupos industriais selecionados`,
  valor = Valor,
  .keep = "none",  
) %>% pivot_wider(names_from = gis, values_from = valor) %>% 
  mutate(
  data_fmt = format(data, "%m/%Y"),
  `101 Abate e fabricação de produtos de carne` = number(`101 Abate e fabricação de produtos de carne`, decimal.mark = ",", accuracy = 0.01),
  `104 Fabricação de óleos e gorduras vegetais e animais` = number(`104 Fabricação de óleos e gorduras vegetais e animais`, decimal.mark = ",", accuracy = 0.01),
  `105 Laticínios` = number(`105 Laticínios`, decimal.mark = ",", accuracy = 0.01),
  `106 Moagem, fabricação de produtos amiláceos e de alimentos para animais` = number(`106 Moagem, fabricação de produtos amiláceos e de alimentos para animais`, decimal.mark = ",", accuracy = 0.01),
  `107 Fabricação e refino de açúcar` = number(`107 Fabricação e refino de açúcar`, decimal.mark = ",", accuracy = 0.01),
  `108 Torrefação e moagem de café` = number(`108 Torrefação e moagem de café`, decimal.mark = ",", accuracy = 0.01),
  `151 Curtimento e outras preparações de couro` = number(`151 Curtimento e outras preparações de couro`, decimal.mark = ",", accuracy = 0.01),
  `153 Fabricação de calçados` = number(`153 Fabricação de calçados`, decimal.mark = ",", accuracy = 0.01),
  `201 Fabricação de produtos químicos inorgânicos` = number(`201 Fabricação de produtos químicos inorgânicos`, decimal.mark = ",", accuracy = 0.01),
  `203 Fabricação de resinas e elastômeros` = number(`203 Fabricação de resinas e elastômeros`, decimal.mark = ",", accuracy = 0.01),
  `205 Fabricação de defensivos agrícolas e desinfestantes domissanitários` = number(`205 Fabricação de defensivos agrícolas e desinfestantes domissanitários`, decimal.mark = ",", accuracy = 0.01),
  `221 Fabricação de produtos de borracha` = number(`221 Fabricação de produtos de borracha`, decimal.mark = ",", accuracy = 0.01),
  `222 Fabricação de produtos de material plástico` = number(`222 Fabricação de produtos de material plástico`, decimal.mark = ",", accuracy = 0.01),
  `233 Fabricação de artefatos de concreto, cimento, fibrocimento, gesso e materiais semelhantes` = number(`233 Fabricação de artefatos de concreto, cimento, fibrocimento, gesso e materiais semelhantes`, decimal.mark = ",", accuracy = 0.01),
  `234 Fabricação de produtos cerâmicos` = number(`234 Fabricação de produtos cerâmicos`, decimal.mark = ",", accuracy = 0.01),
  `242 Siderurgia` = number(`242 Siderurgia`, decimal.mark = ",", accuracy = 0.01),
  `262 Fabricação de equipamentos de informática e periféricos` = number(`262 Fabricação de equipamentos de informática e periféricos`, decimal.mark = ",", accuracy = 0.01),
  `264 Fabricação de aparelhos de recepção, reprodução, gravação e amplificação de áudio e vídeo` = number(`264 Fabricação de aparelhos de recepção, reprodução, gravação e amplificação de áudio e vídeo`, decimal.mark = ",", accuracy = 0.01),
  `271 Fabricação de geradores, transformadores e motores elétricos` = number(`271 Fabricação de geradores, transformadores e motores elétricos`, decimal.mark = ",", accuracy = 0.01),
  `275 Fabricação de eletrodomésticos` = number(`275 Fabricação de eletrodomésticos`, decimal.mark = ",", accuracy = 0.01),
  `281 Fabricação de motores, bombas, compressores e equipamentos de transmissão` = number(`281 Fabricação de motores, bombas, compressores e equipamentos de transmissão`, decimal.mark = ",", accuracy = 0.01),
  `283 Fabricação de tratores e de máquinas e equipamentos para a agricultura e pecuária` = number(`283 Fabricação de tratores e de máquinas e equipamentos para a agricultura e pecuária`, decimal.mark = ",", accuracy = 0.01),
  `291 Fabricação de automóveis, camionetas e utilitários` = number(`291 Fabricação de automóveis, camionetas e utilitários`, decimal.mark = ",", accuracy = 0.01)
  ) %>% 
  arrange(desc(data))

ipp_gis_mg <- ipp_gis %>% dplyr::filter(variavel == "IPP - Variação mês/mês imediatamente anterior (M/M-1)") %>% select(data_fmt, `101 Abate e fabricação de produtos de carne`, `104 Fabricação de óleos e gorduras vegetais e animais`, `105 Laticínios`, `106 Moagem, fabricação de produtos amiláceos e de alimentos para animais`, `107 Fabricação e refino de açúcar`, `108 Torrefação e moagem de café`, `151 Curtimento e outras preparações de couro`, `153 Fabricação de calçados`, `201 Fabricação de produtos químicos inorgânicos`, `203 Fabricação de resinas e elastômeros`, `205 Fabricação de defensivos agrícolas e desinfestantes domissanitários`, `221 Fabricação de produtos de borracha`, `222 Fabricação de produtos de material plástico`, `233 Fabricação de artefatos de concreto, cimento, fibrocimento, gesso e materiais semelhantes`, `234 Fabricação de produtos cerâmicos`, `242 Siderurgia`, `262 Fabricação de equipamentos de informática e periféricos`, `264 Fabricação de aparelhos de recepção, reprodução, gravação e amplificação de áudio e vídeo`, `271 Fabricação de geradores, transformadores e motores elétricos`, `275 Fabricação de eletrodomésticos`, `281 Fabricação de motores, bombas, compressores e equipamentos de transmissão`, `283 Fabricação de tratores e de máquinas e equipamentos para a agricultura e pecuária`, `291 Fabricação de automóveis, camionetas e utilitários`, data)

ipp_gis_acum_ano <- ipp_gis %>% dplyr::filter(variavel == "IPP - Variação acumulada no ano (em relação a dezembro do ano anterior)") %>% select(data_fmt, `101 Abate e fabricação de produtos de carne`, `104 Fabricação de óleos e gorduras vegetais e animais`, `105 Laticínios`, `106 Moagem, fabricação de produtos amiláceos e de alimentos para animais`, `107 Fabricação e refino de açúcar`, `108 Torrefação e moagem de café`, `151 Curtimento e outras preparações de couro`, `153 Fabricação de calçados`, `201 Fabricação de produtos químicos inorgânicos`, `203 Fabricação de resinas e elastômeros`, `205 Fabricação de defensivos agrícolas e desinfestantes domissanitários`, `221 Fabricação de produtos de borracha`, `222 Fabricação de produtos de material plástico`, `233 Fabricação de artefatos de concreto, cimento, fibrocimento, gesso e materiais semelhantes`, `234 Fabricação de produtos cerâmicos`, `242 Siderurgia`, `262 Fabricação de equipamentos de informática e periféricos`, `264 Fabricação de aparelhos de recepção, reprodução, gravação e amplificação de áudio e vídeo`, `271 Fabricação de geradores, transformadores e motores elétricos`, `275 Fabricação de eletrodomésticos`, `281 Fabricação de motores, bombas, compressores e equipamentos de transmissão`, `283 Fabricação de tratores e de máquinas e equipamentos para a agricultura e pecuária`, `291 Fabricação de automóveis, camionetas e utilitários`, data)

ipp_gis_12m <- ipp_gis %>% dplyr::filter(variavel == "IPP - Variação mês/mesmo mês do ano anterior (M/M-12)") %>% select(data_fmt, `101 Abate e fabricação de produtos de carne`, `104 Fabricação de óleos e gorduras vegetais e animais`, `105 Laticínios`, `106 Moagem, fabricação de produtos amiláceos e de alimentos para animais`, `107 Fabricação e refino de açúcar`, `108 Torrefação e moagem de café`, `151 Curtimento e outras preparações de couro`, `153 Fabricação de calçados`, `201 Fabricação de produtos químicos inorgânicos`, `203 Fabricação de resinas e elastômeros`, `205 Fabricação de defensivos agrícolas e desinfestantes domissanitários`, `221 Fabricação de produtos de borracha`, `222 Fabricação de produtos de material plástico`, `233 Fabricação de artefatos de concreto, cimento, fibrocimento, gesso e materiais semelhantes`, `234 Fabricação de produtos cerâmicos`, `242 Siderurgia`, `262 Fabricação de equipamentos de informática e periféricos`, `264 Fabricação de aparelhos de recepção, reprodução, gravação e amplificação de áudio e vídeo`, `271 Fabricação de geradores, transformadores e motores elétricos`, `275 Fabricação de eletrodomésticos`, `281 Fabricação de motores, bombas, compressores e equipamentos de transmissão`, `283 Fabricação de tratores e de máquinas e equipamentos para a agricultura e pecuária`, `291 Fabricação de automóveis, camionetas e utilitários`, data)

# IPCA:
ipca <- sidrar::get_sidra(
  api = "/t/1737/n1/all/v/63,69,2265/p/all/d/v63%202,v69%202,v2265%202"
)

ipca <- ipca %>% mutate(
  data = lubridate::ym(`Mês (Código)`),
  variavel = Variável,
  valor = Valor,
  .keep = "none",  
) %>% pivot_wider(names_from = variavel, values_from = valor) %>% 
  mutate(
  data_fmt = format(data, "%m/%Y"),
  `IPCA - Variação mensal` = number(`IPCA - Variação mensal`, decimal.mark = ",", accuracy = 0.01),
  `IPCA - Variação acumulada no ano` = number(`IPCA - Variação acumulada no ano`, decimal.mark = ",", accuracy = 0.01),
  `IPCA - Variação acumulada em 12 meses` = number(`IPCA - Variação acumulada em 12 meses`, decimal.mark = ",", accuracy = 0.01),
  ) %>% dplyr::filter(data >= "1996-01-01") %>% 
  arrange(desc(data))

# IPCA (grupos):
ipca_grupos <- sidrar::get_sidra(
  api = "/t/7060/n1/all/v/all/p/all/c315/7169,7170,7445,7486,7558,7625,7660,7712,7766,7786/d/v63%202,v66%204,v69%202,v2265%202"
)

ipca_grupos <- ipca_grupos %>% mutate(
  data = lubridate::ym(`Mês (Código)`),
  variavel = Variável,
  grupos = `Geral, grupo, subgrupo, item e subitem`,
  valor = Valor,
  .keep = "none",  
) %>% pivot_wider(names_from = grupos, values_from = valor) %>% 
  mutate(
  data_fmt = format(data, "%m/%Y"),
  `Índice geral` = number(`Índice geral`, decimal.mark = ",", accuracy = 0.01),
  `1.Alimentação e bebidas` = number(`1.Alimentação e bebidas`, decimal.mark = ",", accuracy = 0.01),
  `2.Habitação` = number(`2.Habitação`, decimal.mark = ",", accuracy = 0.01),
  `3.Artigos de residência` = number(`3.Artigos de residência`, decimal.mark = ",", accuracy = 0.01),
  `4.Vestuário` = number(`4.Vestuário`, decimal.mark = ",", accuracy = 0.01),
  `5.Transportes` = number(`5.Transportes`, decimal.mark = ",", accuracy = 0.01),
  `6.Saúde e cuidados pessoais` = number(`6.Saúde e cuidados pessoais`, decimal.mark = ",", accuracy = 0.01),
  `7.Despesas pessoais` = number(`7.Despesas pessoais`, decimal.mark = ",", accuracy = 0.01),
  `8.Educação` = number(`8.Educação`, decimal.mark = ",", accuracy = 0.01),
  `9.Comunicação` = number(`9.Comunicação`, decimal.mark = ",", accuracy = 0.01)
  ) %>% dplyr::filter(data >= "1996-01-01") %>% 
  arrange(desc(data))

ipca_grupos_mg <- ipca_grupos %>% dplyr::filter(variavel == "IPCA - Variação mensal") %>% 
  select(data_fmt, `Índice geral`, `1.Alimentação e bebidas`, `2.Habitação`, `3.Artigos de residência`,
         `4.Vestuário`, `5.Transportes`, `6.Saúde e cuidados pessoais`, `7.Despesas pessoais`,
         `8.Educação`, `9.Comunicação`, data)

ipca_grupos_acum_ano <- ipca_grupos %>% dplyr::filter(variavel == "IPCA - Variação acumulada no ano") %>% 
  select(data_fmt, `Índice geral`, `1.Alimentação e bebidas`, `2.Habitação`, `3.Artigos de residência`,
         `4.Vestuário`, `5.Transportes`, `6.Saúde e cuidados pessoais`, `7.Despesas pessoais`,
         `8.Educação`, `9.Comunicação`, data)

ipca_grupos_acum_12m <- ipca_grupos %>% dplyr::filter(variavel == "IPCA - Variação acumulada em 12 meses") %>% 
  select(data_fmt, `Índice geral`, `1.Alimentação e bebidas`, `2.Habitação`, `3.Artigos de residência`,
         `4.Vestuário`, `5.Transportes`, `6.Saúde e cuidados pessoais`, `7.Despesas pessoais`,
         `8.Educação`, `9.Comunicação`, data)

ipca_grupos_peso <- ipca_grupos %>% dplyr::filter(variavel == "IPCA - Peso mensal") %>% 
  select(data_fmt, `Índice geral`, `1.Alimentação e bebidas`, `2.Habitação`, `3.Artigos de residência`,
         `4.Vestuário`, `5.Transportes`, `6.Saúde e cuidados pessoais`, `7.Despesas pessoais`,
         `8.Educação`, `9.Comunicação`, data)

# INPC:
inpc <- sidrar::get_sidra(
  api = "/t/1736/n1/all/v/44,68,2292/p/all/d/v44%202,v68%202,v2292%202"
)

inpc <- inpc %>% mutate(
  data = lubridate::ym(`Mês (Código)`),
  variavel = Variável,
  valor = Valor,
  .keep = "none",  
) %>% pivot_wider(names_from = variavel, values_from = valor) %>% 
  mutate(
  data_fmt = format(data, "%m/%Y"),
  `INPC - Variação mensal` = number(`INPC - Variação mensal`, decimal.mark = ",", accuracy = 0.01),
  `INPC - Variação acumulada no ano` = number(`INPC - Variação acumulada no ano`, decimal.mark = ",", accuracy = 0.01),
  `INPC - Variação acumulada em 12 meses` = number(`INPC - Variação acumulada em 12 meses`, decimal.mark = ",", accuracy = 0.01),
  ) %>% dplyr::filter(data >= "1996-01-01") %>% 
  arrange(desc(data))

# INPC (grupos):
inpc_grupos <- sidrar::get_sidra(
  api = "/t/7063/n1/all/v/all/p/all/c315/7169,7170,7445,7486,7558,7625,7660,7712,7766,7786/d/v44%202,v45%204,v68%202,v2292%202"
)

inpc_grupos <- inpc_grupos %>% mutate(
  data = lubridate::ym(`Mês (Código)`),
  variavel = Variável,
  grupos = `Geral, grupo, subgrupo, item e subitem`,
  valor = Valor,
  .keep = "none",  
) %>% pivot_wider(names_from = grupos, values_from = valor) %>% 
  mutate(
  data_fmt = format(data, "%m/%Y"),
  `Índice geral` = number(`Índice geral`, decimal.mark = ",", accuracy = 0.01),
  `1.Alimentação e bebidas` = number(`1.Alimentação e bebidas`, decimal.mark = ",", accuracy = 0.01),
  `2.Habitação` = number(`2.Habitação`, decimal.mark = ",", accuracy = 0.01),
  `3.Artigos de residência` = number(`3.Artigos de residência`, decimal.mark = ",", accuracy = 0.01),
  `4.Vestuário` = number(`4.Vestuário`, decimal.mark = ",", accuracy = 0.01),
  `5.Transportes` = number(`5.Transportes`, decimal.mark = ",", accuracy = 0.01),
  `6.Saúde e cuidados pessoais` = number(`6.Saúde e cuidados pessoais`, decimal.mark = ",", accuracy = 0.01),
  `7.Despesas pessoais` = number(`7.Despesas pessoais`, decimal.mark = ",", accuracy = 0.01),
  `8.Educação` = number(`8.Educação`, decimal.mark = ",", accuracy = 0.01),
  `9.Comunicação` = number(`9.Comunicação`, decimal.mark = ",", accuracy = 0.01)
  ) %>% dplyr::filter(data >= "1996-01-01") %>% 
  arrange(desc(data))

inpc_grupos_mg <- inpc_grupos %>% dplyr::filter(variavel == "INPC - Variação mensal") %>% 
  select(data_fmt, `Índice geral`, `1.Alimentação e bebidas`, `2.Habitação`, `3.Artigos de residência`,
         `4.Vestuário`, `5.Transportes`, `6.Saúde e cuidados pessoais`, `7.Despesas pessoais`,
         `8.Educação`, `9.Comunicação`, data)

inpc_grupos_acum_ano <- inpc_grupos %>% dplyr::filter(variavel == "INPC - Variação acumulada no ano") %>% 
  select(data_fmt, `Índice geral`, `1.Alimentação e bebidas`, `2.Habitação`, `3.Artigos de residência`,
         `4.Vestuário`, `5.Transportes`, `6.Saúde e cuidados pessoais`, `7.Despesas pessoais`,
         `8.Educação`, `9.Comunicação`, data)

inpc_grupos_acum_12m <- inpc_grupos %>% dplyr::filter(variavel == "INPC - Variação acumulada em 12 meses") %>% 
  select(data_fmt, `Índice geral`, `1.Alimentação e bebidas`, `2.Habitação`, `3.Artigos de residência`,
         `4.Vestuário`, `5.Transportes`, `6.Saúde e cuidados pessoais`, `7.Despesas pessoais`,
         `8.Educação`, `9.Comunicação`, data)

inpc_grupos_peso <- inpc_grupos %>% dplyr::filter(variavel == "INPC - Peso mensal") %>% 
  select(data_fmt, `Índice geral`, `1.Alimentação e bebidas`, `2.Habitação`, `3.Artigos de residência`,
         `4.Vestuário`, `5.Transportes`, `6.Saúde e cuidados pessoais`, `7.Despesas pessoais`,
         `8.Educação`, `9.Comunicação`, data)

# PIB (taxa trimestre contra mesmo trimestre do ano anterior) (Oferta)
pib_var_ano <- sidrar::get_sidra(
  api = "/t/5932/n1/all/v/6561/p/all/c11255/90687,90691,90692,90693,90694,90695,90696,90697,90698,90699,90700,90701,90702,90703,90705,90706,90707/d/v6561%201"
)

pib_var_ano <- pib_var_ano %>% mutate(
  data = lubridate::ym(`Trimestre (Código)`),
  variavel = Variável,
  setores = `Setores e subsetores`,
  valor = Valor,
  .keep = "none",
  variavel = dplyr::recode(
    .x = variavel,
    "Taxa trimestral (em relação ao mesmo período do ano anterior)" = "Variação em relação ao mesmo trimestre do ano anterior (%)")
) %>% pivot_wider(names_from = setores, values_from = valor) %>% select(-variavel) %>% mutate(
  data_fmt = format(data, "%m/%Y"),
  `Agropecuária - total` = number(`Agropecuária - total`, decimal.mark = ",", accuracy = 0.01),
  `Indústria - total` = number(`Indústria - total`, decimal.mark = ",", accuracy = 0.01),
  `Indústrias extrativas` = number(`Indústrias extrativas`, decimal.mark = ",", accuracy = 0.01),
  `Indústrias de transformação` = number(`Indústrias de transformação`, decimal.mark = ",", accuracy = 0.01),
  `Construção` = number(`Construção`, decimal.mark = ",", accuracy = 0.01),
  `Eletricidade e gás, água, esgoto, atividades de gestão de resíduos` = number(`Eletricidade e gás, água, esgoto, atividades de gestão de resíduos`, decimal.mark = ",", accuracy = 0.01),
  `Serviços - total` = number(`Serviços - total`, decimal.mark = ",", accuracy = 0.01),
  `Comércio` = number(`Comércio`, decimal.mark = ",", accuracy = 0.01),
  `Transporte, armazenagem e correio` = number(`Transporte, armazenagem e correio`, decimal.mark = ",", accuracy = 0.01),
  `Informação e comunicação` = number(`Informação e comunicação`, decimal.mark = ",", accuracy = 0.01),
  `Atividades financeiras, de seguros e serviços relacionados` = number(`Atividades financeiras, de seguros e serviços relacionados`, decimal.mark = ",", accuracy = 0.01),
  `Outras atividades de serviços` = number(`Outras atividades de serviços`, decimal.mark = ",", accuracy = 0.01),
  `Atividades imobiliárias` = number(`Atividades imobiliárias`, decimal.mark = ",", accuracy = 0.01),
  `Administração, saúde e educação públicas e seguridade social` = number(`Administração, saúde e educação públicas e seguridade social`, decimal.mark = ",", accuracy = 0.01),
  `Valor adicionado a preços básicos` = number(`Valor adicionado a preços básicos`, decimal.mark = ",", accuracy = 0.01),
  `Impostos líquidos sobre produtos` = number(`Impostos líquidos sobre produtos`, decimal.mark = ",", accuracy = 0.01),
  `PIB a preços de mercado` = number(`PIB a preços de mercado`, decimal.mark = ",", accuracy = 0.01)
) %>% select(data_fmt,  `PIB a preços de mercado`, `Agropecuária - total`, `Indústria - total`, `Indústrias extrativas`,
             `Indústrias de transformação`, `Construção`,
             `Eletricidade e gás, água, esgoto, atividades de gestão de resíduos`,
             `Serviços - total`, `Comércio`, `Transporte, armazenagem e correio`,
             `Informação e comunicação`, `Atividades financeiras, de seguros e serviços relacionados`,
             `Outras atividades de serviços`, `Atividades imobiliárias`,
             `Administração, saúde e educação públicas e seguridade social`, `Valor adicionado a preços básicos`,
             `Impostos líquidos sobre produtos`, data) %>% 
  arrange(desc(data))


# PIB (taxa acumulada em quatro trimestres) (Oferta)
pib_var_acum4t <- sidrar::get_sidra(
  api = "/t/5932/n1/all/v/6562/p/all/c11255/90687,90691,90692,90693,90694,90695,90696,90697,90698,90699,90700,90701,90702,90703,90705,90706,90707/d/v6562%201"
)

pib_var_acum4t <- pib_var_acum4t %>% mutate(
  data = lubridate::ym(`Trimestre (Código)`),
  variavel = Variável,
  setores = `Setores e subsetores`,
  valor = Valor,
  .keep = "none",
  variavel = dplyr::recode(
    .x = variavel,
    "Taxa acumulada em quatro trimestres (em relação ao mesmo período do ano anterior)" = "Taxa acumulada em quatro trimestres (em relação ao mesmo período do ano anterior) (%)")
) %>% pivot_wider(names_from = setores, values_from = valor) %>% select(-variavel) %>% mutate(
  data_fmt = format(data, "%m/%Y"),
  `Agropecuária - total` = number(`Agropecuária - total`, decimal.mark = ",", accuracy = 0.01),
  `Indústria - total` = number(`Indústria - total`, decimal.mark = ",", accuracy = 0.01),
  `Indústrias extrativas` = number(`Indústrias extrativas`, decimal.mark = ",", accuracy = 0.01),
  `Indústrias de transformação` = number(`Indústrias de transformação`, decimal.mark = ",", accuracy = 0.01),
  `Construção` = number(`Construção`, decimal.mark = ",", accuracy = 0.01),
  `Eletricidade e gás, água, esgoto, atividades de gestão de resíduos` = number(`Eletricidade e gás, água, esgoto, atividades de gestão de resíduos`, decimal.mark = ",", accuracy = 0.01),
  `Serviços - total` = number(`Serviços - total`, decimal.mark = ",", accuracy = 0.01),
  `Comércio` = number(`Comércio`, decimal.mark = ",", accuracy = 0.01),
  `Transporte, armazenagem e correio` = number(`Transporte, armazenagem e correio`, decimal.mark = ",", accuracy = 0.01),
  `Informação e comunicação` = number(`Informação e comunicação`, decimal.mark = ",", accuracy = 0.01),
  `Atividades financeiras, de seguros e serviços relacionados` = number(`Atividades financeiras, de seguros e serviços relacionados`, decimal.mark = ",", accuracy = 0.01),
  `Outras atividades de serviços` = number(`Outras atividades de serviços`, decimal.mark = ",", accuracy = 0.01),
  `Atividades imobiliárias` = number(`Atividades imobiliárias`, decimal.mark = ",", accuracy = 0.01),
  `Administração, saúde e educação públicas e seguridade social` = number(`Administração, saúde e educação públicas e seguridade social`, decimal.mark = ",", accuracy = 0.01),
  `Valor adicionado a preços básicos` = number(`Valor adicionado a preços básicos`, decimal.mark = ",", accuracy = 0.01),
  `Impostos líquidos sobre produtos` = number(`Impostos líquidos sobre produtos`, decimal.mark = ",", accuracy = 0.01),
  `PIB a preços de mercado` = number(`PIB a preços de mercado`, decimal.mark = ",", accuracy = 0.01)
) %>% select(data_fmt,  `PIB a preços de mercado`, `Agropecuária - total`, `Indústria - total`, `Indústrias extrativas`,
             `Indústrias de transformação`, `Construção`,
             `Eletricidade e gás, água, esgoto, atividades de gestão de resíduos`,
             `Serviços - total`, `Comércio`, `Transporte, armazenagem e correio`,
             `Informação e comunicação`, `Atividades financeiras, de seguros e serviços relacionados`,
             `Outras atividades de serviços`, `Atividades imobiliárias`,
             `Administração, saúde e educação públicas e seguridade social`, `Valor adicionado a preços básicos`,
             `Impostos líquidos sobre produtos`, data) %>% 
  arrange(desc(data))

# PIB (taxa acumulada ao longo do ano) (Oferta)
pib_var_acum_ano <- sidrar::get_sidra(
  api = "/t/5932/n1/all/v/6563/p/all/c11255/90687,90691,90692,90693,90694,90695,90696,90697,90698,90699,90700,90701,90702,90703,90705,90706,90707/d/v6563%201"
)

pib_var_acum_ano <- pib_var_acum_ano %>% mutate(
  data = lubridate::ym(`Trimestre (Código)`),
  variavel = Variável,
  setores = `Setores e subsetores`,
  valor = Valor,
  .keep = "none",
  variavel = dplyr::recode(
    .x = variavel,
    "Taxa acumulada ao longo do ano (em relação ao mesmo período do ano anterior)" = "Taxa acumulada ao longo do ano (em relação ao mesmo período do ano anterior) (%)")
) %>% pivot_wider(names_from = setores, values_from = valor) %>% select(-variavel) %>% mutate(
  data_fmt = format(data, "%m/%Y"),
  `Agropecuária - total` = number(`Agropecuária - total`, decimal.mark = ",", accuracy = 0.01),
  `Indústria - total` = number(`Indústria - total`, decimal.mark = ",", accuracy = 0.01),
  `Indústrias extrativas` = number(`Indústrias extrativas`, decimal.mark = ",", accuracy = 0.01),
  `Indústrias de transformação` = number(`Indústrias de transformação`, decimal.mark = ",", accuracy = 0.01),
  `Construção` = number(`Construção`, decimal.mark = ",", accuracy = 0.01),
  `Eletricidade e gás, água, esgoto, atividades de gestão de resíduos` = number(`Eletricidade e gás, água, esgoto, atividades de gestão de resíduos`, decimal.mark = ",", accuracy = 0.01),
  `Serviços - total` = number(`Serviços - total`, decimal.mark = ",", accuracy = 0.01),
  `Comércio` = number(`Comércio`, decimal.mark = ",", accuracy = 0.01),
  `Transporte, armazenagem e correio` = number(`Transporte, armazenagem e correio`, decimal.mark = ",", accuracy = 0.01),
  `Informação e comunicação` = number(`Informação e comunicação`, decimal.mark = ",", accuracy = 0.01),
  `Atividades financeiras, de seguros e serviços relacionados` = number(`Atividades financeiras, de seguros e serviços relacionados`, decimal.mark = ",", accuracy = 0.01),
  `Outras atividades de serviços` = number(`Outras atividades de serviços`, decimal.mark = ",", accuracy = 0.01),
  `Atividades imobiliárias` = number(`Atividades imobiliárias`, decimal.mark = ",", accuracy = 0.01),
  `Administração, saúde e educação públicas e seguridade social` = number(`Administração, saúde e educação públicas e seguridade social`, decimal.mark = ",", accuracy = 0.01),
  `Valor adicionado a preços básicos` = number(`Valor adicionado a preços básicos`, decimal.mark = ",", accuracy = 0.01),
  `Impostos líquidos sobre produtos` = number(`Impostos líquidos sobre produtos`, decimal.mark = ",", accuracy = 0.01),
  `PIB a preços de mercado` = number(`PIB a preços de mercado`, decimal.mark = ",", accuracy = 0.01)
) %>% select(data_fmt, `PIB a preços de mercado`, `Agropecuária - total`, `Indústria - total`, `Indústrias extrativas`,
             `Indústrias de transformação`, `Construção`,
             `Eletricidade e gás, água, esgoto, atividades de gestão de resíduos`,
             `Serviços - total`, `Comércio`, `Transporte, armazenagem e correio`,
             `Informação e comunicação`, `Atividades financeiras, de seguros e serviços relacionados`,
             `Outras atividades de serviços`, `Atividades imobiliárias`,
             `Administração, saúde e educação públicas e seguridade social`, `Valor adicionado a preços básicos`,
             `Impostos líquidos sobre produtos`, data) %>% 
  arrange(desc(data))

# PIB (trimestre contra trimestre imediatamente anterior) (Oferta)
pib_var_mg <- sidrar::get_sidra(
  api = "/t/5932/n1/all/v/6564/p/all/c11255/90687,90691,90692,90693,90694,90695,90696,90697,90698,90699,90700,90701,90702,90703,90705,90706,90707/d/v6564%201"
)

pib_var_mg <- pib_var_mg %>% mutate(
  data = lubridate::ym(`Trimestre (Código)`),
  variavel = Variável,
  setores = `Setores e subsetores`,
  valor = Valor,
  .keep = "none",
  variavel = dplyr::recode(
    .x = variavel,
    "Taxa trimestre contra trimestre imediatamente anterior" = "Taxa trimestre contra trimestre imediatamente anterior (%)")
) %>% pivot_wider(names_from = setores, values_from = valor) %>% select(-variavel) %>% mutate(
  data_fmt = format(data, "%m/%Y"),
  `Agropecuária - total` = number(`Agropecuária - total`, decimal.mark = ",", accuracy = 0.01),
  `Indústria - total` = number(`Indústria - total`, decimal.mark = ",", accuracy = 0.01),
  `Indústrias extrativas` = number(`Indústrias extrativas`, decimal.mark = ",", accuracy = 0.01),
  `Indústrias de transformação` = number(`Indústrias de transformação`, decimal.mark = ",", accuracy = 0.01),
  `Construção` = number(`Construção`, decimal.mark = ",", accuracy = 0.01),
  `Eletricidade e gás, água, esgoto, atividades de gestão de resíduos` = number(`Eletricidade e gás, água, esgoto, atividades de gestão de resíduos`, decimal.mark = ",", accuracy = 0.01),
  `Serviços - total` = number(`Serviços - total`, decimal.mark = ",", accuracy = 0.01),
  `Comércio` = number(`Comércio`, decimal.mark = ",", accuracy = 0.01),
  `Transporte, armazenagem e correio` = number(`Transporte, armazenagem e correio`, decimal.mark = ",", accuracy = 0.01),
  `Informação e comunicação` = number(`Informação e comunicação`, decimal.mark = ",", accuracy = 0.01),
  `Atividades financeiras, de seguros e serviços relacionados` = number(`Atividades financeiras, de seguros e serviços relacionados`, decimal.mark = ",", accuracy = 0.01),
  `Outras atividades de serviços` = number(`Outras atividades de serviços`, decimal.mark = ",", accuracy = 0.01),
  `Atividades imobiliárias` = number(`Atividades imobiliárias`, decimal.mark = ",", accuracy = 0.01),
  `Administração, saúde e educação públicas e seguridade social` = number(`Administração, saúde e educação públicas e seguridade social`, decimal.mark = ",", accuracy = 0.01),
  `Valor adicionado a preços básicos` = number(`Valor adicionado a preços básicos`, decimal.mark = ",", accuracy = 0.01),
  `PIB a preços de mercado` = number(`PIB a preços de mercado`, decimal.mark = ",", accuracy = 0.01)
) %>% select(data_fmt, `PIB a preços de mercado`, `Agropecuária - total`, `Indústria - total`, `Indústrias extrativas`,
             `Indústrias de transformação`, `Construção`,
             `Eletricidade e gás, água, esgoto, atividades de gestão de resíduos`,
             `Serviços - total`, `Comércio`, `Transporte, armazenagem e correio`,
             `Informação e comunicação`, `Atividades financeiras, de seguros e serviços relacionados`,
             `Outras atividades de serviços`, `Atividades imobiliárias`,
             `Administração, saúde e educação públicas e seguridade social`, `Valor adicionado a preços básicos`, data) %>% 
  arrange(desc(data))

# PIB (taxa trimestre contra mesmo trimestre do ano anterior) (Demanda)
pib_var_ano_dem <- sidrar::get_sidra(
  api = "/t/5932/n1/all/v/6561/p/all/c11255/90707,93404,93405,93406,93407,93408/d/v6561%201"
)

pib_var_ano_dem <- pib_var_ano_dem %>% mutate(
  data = lubridate::ym(`Trimestre (Código)`),
  variavel = Variável,
  setores = `Setores e subsetores`,
  valor = Valor,
  .keep = "none",
  variavel = dplyr::recode(
    .x = variavel,
    "Taxa trimestral (em relação ao mesmo período do ano anterior)" = "Variação em relação ao mesmo trimestre do ano anterior (%)")
) %>% pivot_wider(names_from = setores, values_from = valor) %>% select(-variavel) %>% mutate(
  data_fmt = format(data, "%m/%Y"),
  `PIB a preços de mercado` = number(`PIB a preços de mercado`, decimal.mark = ",", accuracy = 0.01),
  `Despesa de consumo das famílias` = number(`Despesa de consumo das famílias`, decimal.mark = ",", accuracy = 0.01),
  `Despesa de consumo da administração pública` = number(`Despesa de consumo da administração pública`, decimal.mark = ",", accuracy = 0.01),
  `Formação bruta de capital fixo` = number(`Formação bruta de capital fixo`, decimal.mark = ",", accuracy = 0.01),
  `Exportação de bens e serviços` = number(`Exportação de bens e serviços`, decimal.mark = ",", accuracy = 0.01),
  `Importação de bens e serviços (-)` = number(`Importação de bens e serviços (-)`, decimal.mark = ",", accuracy = 0.01),
) %>% select(data_fmt,`PIB a preços de mercado`,`Despesa de consumo das famílias`,
         `Despesa de consumo da administração pública`, `Formação bruta de capital fixo`,
         `Exportação de bens e serviços`, `Importação de bens e serviços (-)`, data) %>% 
  arrange(desc(data))

# PIB (taxa acumulada em quatro trimestres) (Demanda)
pib_var_acum4t_dem <- sidrar::get_sidra(
  api = "/t/5932/n1/all/v/6562/p/all/c11255/90707,93404,93405,93406,93407,93408/d/v6562%201"
)

pib_var_acum4t_dem <- pib_var_acum4t_dem %>% mutate(
  data = lubridate::ym(`Trimestre (Código)`),
  variavel = Variável,
  setores = `Setores e subsetores`,
  valor = Valor,
  .keep = "none",
  variavel = dplyr::recode(
    .x = variavel,
    "Taxa acumulada em quatro trimestres (em relação ao mesmo período do ano anterior)" = "Taxa acumulada em quatro trimestres (em relação ao mesmo período do ano anterior) (%)"
)) %>% pivot_wider(names_from = setores, values_from = valor) %>% select(-variavel) %>% mutate(
  data_fmt = format(data, "%m/%Y"),
  `PIB a preços de mercado` = number(`PIB a preços de mercado`, decimal.mark = ",", accuracy = 0.01),
  `Despesa de consumo das famílias` = number(`Despesa de consumo das famílias`, decimal.mark = ",", accuracy = 0.01),
  `Despesa de consumo da administração pública` = number(`Despesa de consumo da administração pública`, decimal.mark = ",", accuracy = 0.01),
  `Formação bruta de capital fixo` = number(`Formação bruta de capital fixo`, decimal.mark = ",", accuracy = 0.01),
  `Exportação de bens e serviços` = number(`Exportação de bens e serviços`, decimal.mark = ",", accuracy = 0.01),
  `Importação de bens e serviços (-)` = number(`Importação de bens e serviços (-)`, decimal.mark = ",", accuracy = 0.01)
) %>% select(data_fmt,`PIB a preços de mercado`,`Despesa de consumo das famílias`,
         `Despesa de consumo da administração pública`, `Formação bruta de capital fixo`,
         `Exportação de bens e serviços`, `Importação de bens e serviços (-)`, data) %>% 
  arrange(desc(data))

# PIB (taxa acumulada ao longo do ano) (Demanda)
pib_var_acum_ano_dem <- sidrar::get_sidra(
  api = "/t/5932/n1/all/v/6563/p/all/c11255/90707,93404,93405,93406,93407,93408/d/v6563%201"
)

pib_var_acum_ano_dem <- pib_var_acum_ano_dem %>% mutate(
  data = lubridate::ym(`Trimestre (Código)`),
  variavel = Variável,
  setores = `Setores e subsetores`,
  valor = Valor,
  .keep = "none",
  variavel = dplyr::recode(
    .x = variavel,
    "Taxa acumulada ao longo do ano (em relação ao mesmo período do ano anterior)" = "Taxa acumulada ao longo do ano (em relação ao mesmo período do ano anterior) (%)"
)) %>% pivot_wider(names_from = setores, values_from = valor) %>% select(-variavel) %>% mutate(
  data_fmt = format(data, "%m/%Y"),
  `PIB a preços de mercado` = number(`PIB a preços de mercado`, decimal.mark = ",", accuracy = 0.01),
  `Despesa de consumo das famílias` = number(`Despesa de consumo das famílias`, decimal.mark = ",", accuracy = 0.01),
  `Despesa de consumo da administração pública` = number(`Despesa de consumo da administração pública`, decimal.mark = ",", accuracy = 0.01),
  `Formação bruta de capital fixo` = number(`Formação bruta de capital fixo`, decimal.mark = ",", accuracy = 0.01),
  `Exportação de bens e serviços` = number(`Exportação de bens e serviços`, decimal.mark = ",", accuracy = 0.01),
  `Importação de bens e serviços (-)` = number(`Importação de bens e serviços (-)`, decimal.mark = ",", accuracy = 0.01)
) %>% select(data_fmt,`PIB a preços de mercado`,`Despesa de consumo das famílias`,
         `Despesa de consumo da administração pública`, `Formação bruta de capital fixo`,
         `Exportação de bens e serviços`, `Importação de bens e serviços (-)`, data) %>% 
  arrange(desc(data))

# PIB (trimestre contra trimestre imediatamente anterior)
pib_var_mg_dem <- sidrar::get_sidra(
  api = "/t/5932/n1/all/v/6564/p/all/c11255/90707,93404,93405,93406,93407,93408/d/v6564%201"
)

pib_var_mg_dem <- pib_var_mg_dem %>% mutate(
  data = lubridate::ym(`Trimestre (Código)`),
  variavel = Variável,
  setores = `Setores e subsetores`,
  valor = Valor,
  .keep = "none",
  variavel = dplyr::recode(
    .x = variavel,
    "Taxa trimestre contra trimestre imediatamente anterior" = "Taxa trimestre contra trimestre imediatamente anterior (%)"
)) %>% pivot_wider(names_from = setores, values_from = valor) %>% select(-variavel) %>% mutate(
  data_fmt = format(data, "%m/%Y"),
  `PIB a preços de mercado` = number(`PIB a preços de mercado`, decimal.mark = ",", accuracy = 0.01),
  `Despesa de consumo das famílias` = number(`Despesa de consumo das famílias`, decimal.mark = ",", accuracy = 0.01),
  `Despesa de consumo da administração pública` = number(`Despesa de consumo da administração pública`, decimal.mark = ",", accuracy = 0.01),
  `Formação bruta de capital fixo` = number(`Formação bruta de capital fixo`, decimal.mark = ",", accuracy = 0.01),
  `Exportação de bens e serviços` = number(`Exportação de bens e serviços`, decimal.mark = ",", accuracy = 0.01),
  `Importação de bens e serviços (-)` = number(`Importação de bens e serviços (-)`, decimal.mark = ",", accuracy = 0.01)
) %>% select(data_fmt,`PIB a preços de mercado`,`Despesa de consumo das famílias`,
         `Despesa de consumo da administração pública`, `Formação bruta de capital fixo`,
         `Exportação de bens e serviços`, `Importação de bens e serviços (-)`, data) %>% 
  arrange(desc(data))

# Trigo
trigo <- fredr(
  series_id = "PWHEAMTUSDM"
) %>% mutate(
  valor = value
) %>% mutate(
  var_mg = (valor / lag(valor) - 1) * 100,
  var_12m = (valor / lag(valor, 12) - 1) * 100
) %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    valor = number(valor, decimal.mark = ",", accuracy = 0.01),
    var_mg = number(var_mg, decimal.mark = ",", accuracy = 0.01),
    var_12m = number(var_12m, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, valor, var_mg, var_12m, date)

# Minério de ferro
miner_ferro <- fredr(
  series_id = "PIORECRUSDM"
) %>% mutate(
  valor = value
) %>% mutate(
  var_mg = (valor / lag(valor) - 1) * 100,
  var_12m = (valor / lag(valor, 12) - 1) * 100
) %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    valor = number(valor, decimal.mark = ",", accuracy = 0.01),
    var_mg = number(var_mg, decimal.mark = ",", accuracy = 0.01),
    var_12m = number(var_12m, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, valor, var_mg, var_12m, date)

# Café
cafe_arab <- fredr(
  series_id = "PCOFFOTMUSDM"
) %>% mutate(
  valor_arab = value
) %>% mutate(
  var_mg_arab = (valor_arab / lag(valor_arab) - 1) * 100,
  var_12m_arab = (valor_arab / lag(valor_arab, 12) - 1) * 100
) %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_arab = number(valor_arab, decimal.mark = ",", accuracy = 0.01),
    var_mg_arab = number(var_mg_arab, decimal.mark = ",", accuracy = 0.01),
    var_12m_arab = number(var_12m_arab, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, valor_arab, var_mg_arab, var_12m_arab, date)

cafe_rob <- fredr(
  series_id = "PCOFFROBUSDM"
) %>% mutate(
  valor_rob = value
) %>% mutate(
  var_mg_rob = (valor_rob / lag(valor_rob) - 1) * 100,
  var_12m_rob = (valor_rob / lag(valor_rob, 12) - 1) * 100
) %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rob = number(valor_rob, decimal.mark = ",", accuracy = 0.01),
    var_mg_rob = number(var_mg_rob, decimal.mark = ",", accuracy = 0.01),
    var_12m_rob = number(var_12m_rob, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, valor_rob, var_mg_rob, var_12m_rob, date)

cafe <- left_join(cafe_arab, cafe_rob) %>% drop_na() %>%
  select(data_fmt, valor_arab, var_mg_arab, var_12m_arab, valor_rob, var_mg_rob, var_12m_rob, date)

# Taxa de câmbio - Livre - Diária - Dólar americano (compra e venda):
cambio_venda1 <- get_series(
  code = c(valor_venda = 1),
  start_date = "1994-07-01",
  end_date = "2002-12-31"
)

cambio_venda2 <- get_series(
  code = c(valor_venda = 1),
  start_date = "2003-01-01",
  end_date = "2012-12-31"
)

cambio_venda3 <- get_series(
  code = c(valor_venda = 1),
  start_date = "2013-01-01",
  end_date = "2022-12-31"
)

cambio_venda4 <- get_series(
  code = c(valor_venda = 1),
  start_date = "2023-01-01"
)

cambio_compra1 <- get_series(
  code = c(valor_compra = 10813),
  start_date = "1994-07-01",
  end_date = "2002-12-31"
)

cambio_compra2 <- get_series(
  code = c(valor_compra = 10813),
  start_date = "2003-01-01",
  end_date = "2012-12-31"
)

cambio_compra3 <- get_series(
  code = c(valor_compra = 10813),
  start_date = "2013-01-01",
  end_date = "2022-12-31"
)

cambio_compra4 <- get_series(
  code = c(valor_compra = 10813),
  start_date = "2023-01-01"
)

cambio_venda <- bind_rows(cambio_venda1, cambio_venda2, cambio_venda3, cambio_venda4)
cambio_compra <- bind_rows(cambio_compra1, cambio_compra2, cambio_compra3, cambio_compra4)

cambio_nom <- left_join(cambio_venda, cambio_compra)

cambio_nom$cambio_nom <- (cambio_nom$valor_venda + cambio_nom$valor_compra)/2

cambio_nom <- cambio_nom %>%
  mutate(
    var_mg = (cambio_nom / lag(cambio_nom) - 1) * 100
  ) %>% 
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_compra = number(valor_compra, decimal.mark = ",", accuracy = 0.0001),
    valor_venda = number(valor_venda, decimal.mark = ",", accuracy = 0.0001),
    cambio_nom = number(cambio_nom, decimal.mark = ",", accuracy = 0.01),
    var_mg = number(var_mg, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, valor_compra, valor_venda, cambio_nom, var_mg, date)

# Taxa de câmbio - Livre - mensal - Dólar americano (compra e venda):
cambio_venda_mensal <- get_series(
  code = c(valor_venda = 3696),
  start_date = "1994-07-01"
)

cambio_compra_mensal <- get_series(
  code = c(valor_compra = 3695),
  start_date = "1994-07-01"
)

cambio_nom_mensal <- left_join(cambio_venda_mensal, cambio_compra_mensal)

cambio_nom_mensal$cambio_nom_mensal <- (cambio_nom_mensal$valor_venda + cambio_nom_mensal$valor_compra)/2

cambio_nom_mensal <- cambio_nom_mensal %>%
  mutate(
    var_mg = (cambio_nom_mensal / lag(cambio_nom_mensal) - 1) * 100,
    var_12m = (cambio_nom_mensal / lag(cambio_nom_mensal, 12) - 1) * 100
  ) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_compra = number(valor_compra, decimal.mark = ",", accuracy = 0.01),
    valor_venda = number(valor_venda, decimal.mark = ",", accuracy = 0.01),
    cambio_nom_mensal = number(cambio_nom_mensal, decimal.mark = ",", accuracy = 0.01),
    var_mg = number(var_mg, decimal.mark = ",", accuracy = 0.01),
    var_12m = number(var_12m, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, valor_compra, valor_venda, cambio_nom_mensal, var_mg, var_12m, date)

# Taxa de câmbio real (IPCA) - Jun/1994 = 100 - (códigos 11753 e 11752):
cambio_real_dol <- get_series(
  code = c(valor_dol = 11753),
  start_date = "1994-07-01"
) %>%
  mutate(
    var_mg_dol = (valor_dol / lag(valor_dol) - 1) * 100,
    var_12m_dol = (valor_dol / lag(valor_dol, 12) - 1) * 100
  ) %>%
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_dol = number(valor_dol, decimal.mark = ",", accuracy = 0.01),
    var_mg_dol = number(var_mg_dol, decimal.mark = ",", accuracy = 0.01),
    var_12m_dol = number(var_12m_dol, decimal.mark = ",", accuracy = 0.01)
  )

cambio_real_efet <- get_series(
  code = c(valor_efet = 11752),
  start_date = "1994-07-01"
) %>%
  mutate(
    var_mg_efet = (valor_efet / lag(valor_efet) - 1) * 100,
    var_12m_efet = (valor_efet / lag(valor_efet, 12) - 1) * 100
  ) %>%
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_efet = number(valor_efet, decimal.mark = ",", accuracy = 0.01),
    var_mg_efet = number(var_mg_efet, decimal.mark = ",", accuracy = 0.01),
    var_12m_efet = number(var_12m_efet, decimal.mark = ",", accuracy = 0.01)
  )

cambio_real <- left_join(cambio_real_dol, cambio_real_efet)

cambio_real <- cambio_real %>%
  arrange(desc(date)) %>%
  select(data_fmt, valor_dol, var_mg_dol, var_12m_dol,
         valor_efet, var_mg_efet, var_12m_efet, date)

# Termos de troca
tt <- ipeadata(code = "FUNCEX12_TTR12") %>% mutate(valor_tt = value) %>% mutate(
    var_mg_tt = (valor_tt / lag(valor_tt) - 1) * 100,
    var_12m_tt = (valor_tt / lag(valor_tt, 12) - 1) * 100
  ) %>%
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_tt = number(valor_tt, decimal.mark = ",", accuracy = 0.01),
    var_mg_tt = number(var_mg_tt, decimal.mark = ",", accuracy = 0.01),
    var_12m_tt = number(var_12m_tt, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, valor_tt, var_mg_tt, var_12m_tt, date)

# Reservas internacionais (código 3546):
res_int <- get_series(
  code = c(valor = 3546),
  start_date = "1970-12-01"
) %>% mutate(
    valor = valor / 1000,
    var_mg = (valor / lag(valor) - 1) * 100,
    var_12m = (valor / lag(valor, 12) - 1) * 100
  ) %>%
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor = number(valor, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    var_mg = number(var_mg, decimal.mark = ",", accuracy = 0.01),
    var_12m = number(var_12m, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, valor, var_mg, var_12m, date)

# Dívida externa bruta (códigos 3684 e 11407):
div_bruta_usd <- get_series(
  code = c(valor_usd = 3684),
  start_date = "1981-01-01"
) %>%
  mutate(
    valor_usd = valor_usd / 1000,
    data_fmt = format(date, "%m/%Y"),
    valor_usd = number(valor_usd, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  )

div_bruta_pib <- get_series(
  code = c(valor_pib = 11407),
  start_date = "1981-01-01"
) %>%
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_pib = number(valor_pib, big.mark = ".", decimal.mark = ",", accuracy = 0.1)
  )
  
div_bruta <- left_join(div_bruta_usd,div_bruta_pib) %>% arrange(desc(date)) %>%
  select(data_fmt, valor_usd, valor_pib, date)

# Dívida externa líquida (códigos 3685 e 11409):
div_liq_usd <- get_series(
  code = c(valor_usd = 3685),
  start_date = "1981-01-01"
) %>%
  mutate(
    valor_usd = valor_usd / 1000,
    data_fmt = format(date, "%m/%Y"),
    valor_usd = number(valor_usd, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  )

div_liq_pib <- get_series(
  code = c(valor_pib = 11409),
  start_date = "1981-01-01"
) %>%
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_pib = number(valor_pib, big.mark = ".", decimal.mark = ",", accuracy = 0.1)
  )
  
div_liq <- left_join(div_liq_usd,div_liq_pib) %>% arrange(desc(date)) %>%
  select(data_fmt, valor_usd, valor_pib, date)

# Reservas internacionais totais como % da dívida externa total (código FI.RES.TOTL.DT.ZS):
res_int_div_ext <- WDI(
  country = "BR",
  indicator = "FI.RES.TOTL.DT.ZS",
  start = 1971
) %>% mutate(
  ano = year,
  valor = FI.RES.TOTL.DT.ZS,
  valor = number(valor, decimal.mark = ",", accuracy = 0.01)
) %>% select(ano, valor)

# Reservas internacionais (em meses de importações) (código FI.RES.TOTL.MO):
res_int_imports <- WDI(
  country = "BR",
  indicator = "FI.RES.TOTL.MO",
  start = 1975
) %>% mutate(
  ano = year,
  valor = FI.RES.TOTL.MO,
  valor = number(valor, decimal.mark = ",", accuracy = 0.01)
) %>% select(ano, valor)

# Câmbio contratado comercial exportação (código 13962):
cambio_exp1 <- get_series(
  code = c(valor_exp = 13962),
  start_date = "2008-09-01",
  end_date = "2017-12-31"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_exp = number(valor_exp, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_exp, date)

cambio_exp2 <- get_series(
  code = c(valor_exp = 13962),
  start_date = "2018-01-01"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_exp = number(valor_exp, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_exp, date)

cambio_exp <- bind_rows(cambio_exp1, cambio_exp2) %>%
  arrange(desc(date)) 

# Câmbio contratado comercial importação (código 13966):
cambio_imp1 <- get_series(
  code = c(valor_imp = 13966),
  start_date = "2008-09-01",
  end_date = "2017-12-31" # No máximo 10 anos
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_imp = number(valor_imp, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_imp, date)

cambio_imp2 <- get_series(
  code = c(valor_imp = 13966),
  start_date = "2018-01-01"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_imp = number(valor_imp, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_imp, date)

cambio_imp <- bind_rows(cambio_imp1, cambio_imp2) %>%
  arrange(desc(date)) 

# Câmbio contratado comercial saldo (código 13967):
cambio_saldo_com1 <- get_series(
  code = c(valor_saldo_com = 13967),
  start_date = "2008-09-01",
  end_date = "2017-12-31"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_saldo_com = number(valor_saldo_com, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_saldo_com, date)

cambio_saldo_com2 <- get_series(
  code = c(valor_saldo_com = 13967),
  start_date = "2018-01-01"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_saldo_com = number(valor_saldo_com, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_saldo_com, date)

cambio_saldo_com <- bind_rows(cambio_saldo_com1, cambio_saldo_com2) %>%
  arrange(desc(date))

cambio_com <- left_join(cambio_exp, cambio_imp)
cambio_com <- left_join(cambio_com, cambio_saldo_com)

cambio_com <- cambio_com %>% select(data_fmt, valor_exp, valor_imp, valor_saldo_com, date)

# Câmbio contratado financeiro compra (código 13968):
cambio_compra1 <- get_series(
  code = c(valor_compra = 13968),
  start_date = "2008-09-01",
  end_date = "2017-12-31"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_compra = number(valor_compra, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_compra, date)

cambio_compra2 <- get_series(
  code = c(valor_compra = 13968),
  start_date = "2018-01-01"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_compra = number(valor_compra, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_compra, date)

cambio_compra <- bind_rows(cambio_compra1, cambio_compra2) %>% arrange(desc(date))

# Câmbio contratado financeiro venda (código 13968):
cambio_venda1 <- get_series(
  code = c(valor_venda = 13969),
  start_date = "2008-09-01",
  end_date = "2017-12-31"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_venda = number(valor_venda, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_venda, date)

cambio_venda2 <- get_series(
  code = c(valor_venda = 13969),
  start_date = "2018-01-01"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_venda = number(valor_venda, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_venda, date)

cambio_venda <- bind_rows(cambio_venda1, cambio_venda2) %>% arrange(desc(date))

# Câmbio contratado financeiro saldo (código 13970):
cambio_saldo_financ1 <- get_series(
  code = c(valor_saldo_financ = 13970),
  start_date = "2008-09-01",
  end_date = "2017-12-31"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_saldo_financ = number(valor_saldo_financ, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_saldo_financ, date)

cambio_saldo_financ2 <- get_series(
  code = c(valor_saldo_financ = 13970),
  start_date = "2018-01-01"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_saldo_financ = number(valor_saldo_financ, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_saldo_financ, date)

cambio_saldo_financ <- bind_rows(cambio_saldo_financ1, cambio_saldo_financ2) %>%
  arrange(desc(date))

cambio_financ <- left_join(cambio_compra, cambio_venda)
cambio_financ <- left_join(cambio_financ, cambio_saldo_financ)

cambio_financ <- cambio_financ %>% select(data_fmt, valor_compra, valor_venda, valor_saldo_financ, date)

cambio_contratado <- full_join(cambio_com, cambio_financ) %>% select(-date)

# Câmbio contratado saldo total (código 13961):
cambio_saldo_total1 <- get_series(
  code = c(valor_saldo_total = 13961),
  start_date = "2008-09-01",
  end_date = "2017-12-31"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_saldo_total = number(valor_saldo_total, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_saldo_total, date)

cambio_saldo_total2 <- get_series(
  code = c(valor_saldo_total = 13961),
  start_date = "2018-01-01"
) %>%
  mutate(
    data_fmt = format(date, "%d/%m/%Y"),
    valor_saldo_total = number(valor_saldo_total, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>%
  select(data_fmt, valor_saldo_total, date)

cambio_saldo_total <- bind_rows(cambio_saldo_total1, cambio_saldo_total2) %>%
  arrange(desc(date))

cambio_contratado <- full_join(cambio_contratado, cambio_saldo_total)

# Transações correntes (códigos 22701, 22702 e 22703):

trans_cor_rec <- get_series(
  code = c(valor_rec = 22702)
)

trans_cor_desp <- get_series(
  code = c(valor_desp = 22703)
)

trans_cor_saldo <- get_series(
  code = c(valor_saldo = 22701)
)

trans_cor <- left_join(trans_cor_rec, trans_cor_desp)
trans_cor <- left_join(trans_cor, trans_cor_saldo)

trans_cor <- trans_cor %>% mutate(
    valor_rec = valor_rec / 1000,
    valor_desp = valor_desp / 1000,
    valor_saldo = valor_saldo / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rec = number(valor_rec, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_desp = number(valor_desp, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_saldo = number(valor_saldo, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  ) %>% select(data_fmt, valor_rec, valor_desp, valor_saldo, date) %>% 
  arrange(desc(date))

# Transações correntes como % do PIB:
pib_dol <- get_series(
  code = c(valor_pib_dol = 4385)
)

pib_dol <- pib_dol %>% mutate(
  pib_dol_12m = rollsum(valor_pib_dol, k = 12,  align = "right", na.pad = TRUE)
)

trans_corr_12m <- get_series(
  code = c(valor_trans_corr_12m = 22701)
)

trans_corr_12m <- trans_corr_12m %>% mutate(
  trans_corr_12m = rollsum(valor_trans_corr_12m, k = 12,  align = "right", na.pad = TRUE)
)

trans_corr_pib <- left_join(as_tibble(trans_corr_12m), as_tibble(pib_dol)) %>% drop_na() %>% select(
  date, trans_corr_12m, pib_dol_12m
) %>% mutate(
  trans_corr_pib = (trans_corr_12m/pib_dol_12m) * 100
)

trans_corr_pib <- trans_corr_pib %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    trans_corr_pib = number(trans_corr_pib, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, trans_corr_pib, date)

trans_cor <- left_join(trans_cor, trans_corr_pib) %>%
  select(data_fmt, valor_rec, valor_desp, valor_saldo, trans_corr_pib, date)


# Balança comercial (códigos 22707, 22708 e 22709)
bc_exp <- get_series(
  code = c(valor_exp = 22708)
)

bc_imp <- get_series(
  code = c(valor_imp = 22709)
)

bc_saldo <- get_series(
  code = c(valor_saldo = 22707)
)

bal_com <- left_join(bc_exp, bc_imp)
bal_com <- left_join(bal_com, bc_saldo)

bal_com <- bal_com %>% mutate(
    valor_exp = valor_exp / 1000,
    valor_imp = valor_imp / 1000,
    valor_saldo = valor_saldo / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_exp = number(valor_exp, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_imp = number(valor_imp, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_saldo = number(valor_saldo, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  ) %>% select(data_fmt, valor_exp, valor_imp, valor_saldo, date) %>% 
  arrange(desc(date))

# Balança comercial como % do PIB:
bal_com_12m <- get_series(
  code = c(valor_bal_com_12m = 22707)
)

bal_com_12m <- bal_com_12m %>% mutate(
  bal_com_12m = rollsum(valor_bal_com_12m, k = 12,  align = "right", na.pad = TRUE)
)

bal_com_pib <- left_join(as_tibble(bal_com_12m), as_tibble(pib_dol)) %>% drop_na() %>% select(
  date, bal_com_12m, pib_dol_12m
) %>% mutate(
  bal_com_pib = (bal_com_12m/pib_dol_12m) * 100
)

bal_com_pib <- bal_com_pib %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    bal_com_pib = number(bal_com_pib, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, bal_com_pib, date)

bal_com <- left_join(bal_com, bal_com_pib) %>%
  select(data_fmt, valor_exp, valor_imp, valor_saldo, bal_com_pib, date)

# Importações
imp1 <- ipeadata(code = "SECEX12_MVTOT12") %>% mutate(
  valor_imp = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_imp = valor_imp / 1000000000
) %>% mutate(
  valor_imp = number(valor_imp, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
) %>% select(data_fmt, valor_imp, date) %>% filter(date >= "1997-01-01") %>% 
  arrange(desc(date))

imp2 <- ipeadata(code = "FUNCEX12_MDPT12") %>% mutate(
  ind_imp = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  ind_imp = number(ind_imp, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, ind_imp, date) %>% 
  arrange(desc(date))

imp3 <- ipeadata(code = "FUNCEX12_MDQT12") %>% mutate(
  qt_imp = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  qt_imp = number(qt_imp, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, qt_imp, date) %>% 
  arrange(desc(date))

import <- left_join(imp1, imp2)
import <- left_join(import, imp3) %>% select(data_fmt, valor_imp, ind_imp, qt_imp, date)

# Importações como % do PIB:
imp_12m <- get_series(
  code = c(valor_imp_12m = 22712)
)

imp_12m <- imp_12m %>% mutate(
  imp_12m = rollsum(valor_imp_12m, k = 12,  align = "right", na.pad = TRUE)
)

imp_pib <- left_join(as_tibble(imp_12m), as_tibble(pib_dol)) %>% drop_na() %>% select(
  date, imp_12m, pib_dol_12m
) %>% mutate(
  imp_pib = (imp_12m/pib_dol_12m) * 100
)

imp_pib <- imp_pib %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    imp_pib = number(imp_pib, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, imp_pib, date)

import <- left_join(import, imp_pib) %>%
  select(data_fmt, valor_imp, ind_imp, qt_imp, imp_pib, date)

# Exportações
exp1 <- ipeadata(code = "SECEX12_XVTOT12") %>% mutate(
  valor_exp = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_exp = valor_exp/1000000000
) %>% mutate(
  valor_exp = number(valor_exp, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_exp, date) %>% filter(date >= "1997-01-01") %>% 
  arrange(desc(date))

exp2 <- ipeadata(code = "FUNCEX12_XPT12") %>% mutate(
  ind_exp = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  ind_exp = number(ind_exp, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, ind_exp, date) %>% 
  arrange(desc(date))

exp3 <- ipeadata(code = "FUNCEX12_XQT12") %>% mutate(
  qt_exp = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  qt_exp = number(qt_exp, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, qt_exp, date) %>% 
  arrange(desc(date))

export <- left_join(exp1, exp2)
export <- left_join(export, exp3) %>% select(data_fmt, valor_exp, ind_exp, qt_exp, date)

# Exportações como % do PIB:
exp_12m <- get_series(
  code = c(valor_exp_12m = 22711)
)

exp_12m <- exp_12m %>% mutate(
  exp_12m = rollsum(valor_exp_12m, k = 12,  align = "right", na.pad = TRUE)
)

exp_pib <- left_join(as_tibble(exp_12m), as_tibble(pib_dol)) %>% drop_na() %>% select(
  date, exp_12m, pib_dol_12m
) %>% mutate(
  exp_pib = (exp_12m/pib_dol_12m) * 100
)

exp_pib <- exp_pib %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    exp_pib = number(exp_pib, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, exp_pib, date)

export <- left_join(export, exp_pib) %>%
  select(data_fmt, valor_exp, ind_exp, qt_exp, exp_pib, date)

# Exportações de bens de capital
bk1_exp <- ipeadata(code = "FUNCEX12_XVBKGCE12") %>% mutate(
  valor_bk = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_bk = valor_bk / 1000
) %>% mutate(
  valor_bk = number(valor_bk, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_bk, date) %>% 
  arrange(desc(date))

bk2_exp <- ipeadata(code = "FUNCEX12_XQBKGCE12") %>% mutate(
  qt_bk = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  qt_bk = number(qt_bk, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, qt_bk, date) %>% 
  arrange(desc(date))

bk_exp <- left_join(bk1_exp, bk2_exp) %>% select(data_fmt, valor_bk, qt_bk, date)

# Importações de bens de capital
bk1 <- ipeadata(code = "FUNCEX12_MDVBKGCE12") %>% mutate(
  valor_bk = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_bk = valor_bk / 1000
) %>% mutate(
  valor_bk = number(valor_bk, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_bk, date) %>% 
  arrange(desc(date))

bk2 <- ipeadata(code = "FUNCEX12_MDPBKGCE12") %>% mutate(
  ind_bk = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  ind_bk = number(ind_bk, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, ind_bk, date) %>% 
  arrange(desc(date))

bk3 <- ipeadata(code = "FUNCEX12_MDQBKGCE12") %>% mutate(
  qt_bk = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  qt_bk = number(qt_bk, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, qt_bk, date) %>% 
  arrange(desc(date))

bk <- left_join(bk1, bk2)
bk <- left_join(bk, bk3)

bk <- bk %>% select(data_fmt, valor_bk, ind_bk, qt_bk, date)

# Importações de bens intermediários
bi1 <- ipeadata(code = "FUNCEX12_MDVBIGCE12") %>% mutate(
  valor_bi = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_bi = valor_bi / 1000
) %>% mutate(
  valor_bi = number(valor_bi, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_bi, date) %>% 
  arrange(desc(date))

bi2 <- ipeadata(code = "FUNCEX12_MDPBIGCE12") %>% mutate(
  ind_bi = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  ind_bi = number(ind_bi, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, ind_bi, date) %>% 
  arrange(desc(date))

bi3 <- ipeadata(code = "FUNCEX12_MDQBIGCE12") %>% mutate(
  qt_bi = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  qt_bi = number(qt_bi, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, qt_bi, date) %>% 
  arrange(desc(date))

bi <- left_join(bi1, bi2)
bi <- left_join(bi, bi3)

bi <- bi %>% select(data_fmt, valor_bi, ind_bi, qt_bi, date)

# Exportações de bens intermediários
bi1_exp <- ipeadata(code = "FUNCEX12_XVBIGCE12") %>% mutate(
  valor_bi = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_bi = valor_bi / 1000
) %>% mutate(
  valor_bi = number(valor_bi, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_bi, date) %>% 
  arrange(desc(date))

bi2_exp <- ipeadata(code = "FUNCEX12_XQBIGCE12") %>% mutate(
  qt_bi = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  qt_bi = number(qt_bi, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, qt_bi, date) %>% 
  arrange(desc(date))

bi_exp <- left_join(bi1_exp, bi2_exp) %>% select(data_fmt, valor_bi, qt_bi, date)

# Importações de bens de consumo
bc <- ipeadata(code = "SECEX12_MBENCONGCE12") %>% mutate(
  valor_bc = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_bc = valor_bc / 1000000000
) %>% mutate(
  valor_bc = number(valor_bc, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_bc, date) %>% 
  arrange(desc(date))

# Exportações de bens de consumo
exp_bc <- ipeadata(code = "SECEX12_XBENCONGCE12") %>% mutate(
  valor_bc = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_bc = valor_bc / 1000000000
) %>% mutate(
  valor_bc = number(valor_bc, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_bc, date) %>% 
  arrange(desc(date))

# Importações de bens de consumo duráveis
bcd1 <- ipeadata(code = "FUNCEX12_MDVBCDGCE12") %>% mutate(
  valor_bcd = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_bcd = valor_bcd / 1000
) %>% mutate(
  valor_bcd = number(valor_bcd, bcdg.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_bcd, date) %>% 
  arrange(desc(date))

bcd2 <- ipeadata(code = "FUNCEX12_MDQBCDGCE12") %>% mutate(
  qt_bcd = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  qt_bcd = number(qt_bcd, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, qt_bcd, date) %>% 
  arrange(desc(date))

bcd <- left_join(bcd1, bcd2) %>% select(data_fmt, valor_bcd, qt_bcd, date)

# Exportações de bens de consumo duráveis
bcd1_exp <- ipeadata(code = "FUNCEX12_XVBCDGCE12") %>% mutate(
  valor_bcd = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_bcd = valor_bcd / 1000
) %>% mutate(
  valor_bcd = number(valor_bcd, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_bcd, date) %>% 
  arrange(desc(date))

bcd2_exp <- ipeadata(code = "FUNCEX12_XPBCDGCE12") %>% mutate(
  ind_bcd = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  ind_bcd = number(ind_bcd, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, ind_bcd, date) %>% 
  arrange(desc(date))

bcd3_exp <- ipeadata(code = "FUNCEX12_XQBCDGCE12") %>% mutate(
  qt_bcd = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  qt_bcd = number(qt_bcd, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, qt_bcd, date) %>% 
  arrange(desc(date))

bcd_exp <- left_join(bcd1_exp, bcd2_exp)
bcd_exp <- left_join(bcd_exp, bcd3_exp)

bcd_exp <- bcd_exp %>% select(data_fmt, valor_bcd, ind_bcd, qt_bcd, date)

# Importações de bens de consumo não duráveis
bcnd1 <- ipeadata(code = "FUNCEX12_MDVBCNDGCE12") %>% mutate(
  valor_bcnd = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_bcnd = valor_bcnd / 1000
) %>% mutate(
  valor_bcnd = number(valor_bcnd, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_bcnd, date) %>% 
  arrange(desc(date))

bcnd2 <- ipeadata(code = "FUNCEX12_MDQBCNDGCE12") %>% mutate(
  qt_bcnd = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  qt_bcnd = number(qt_bcnd, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, qt_bcnd, date) %>% 
  arrange(desc(date))

bcnd <- left_join(bcnd1, bcnd2) %>% select(data_fmt, valor_bcnd, qt_bcnd, date)

# Exportações de bens de consumo não duráveis
bcnd1_exp <- ipeadata(code = "FUNCEX12_XVBCNDGCE12") %>% mutate(
  valor_bcnd = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_bcnd = valor_bcnd / 1000
) %>% mutate(
  valor_bcnd = number(valor_bcnd, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_bcnd, date) %>% 
  arrange(desc(date))

bcnd2_exp <- ipeadata(code = "FUNCEX12_XQBCNDGCE12") %>% mutate(
  qt_bcnd = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  qt_bcnd = number(qt_bcnd, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, qt_bcnd, date) %>% 
  arrange(desc(date))

bcnd_exp <- left_join(bcnd1_exp, bcnd2_exp) %>% select(data_fmt, valor_bcnd, qt_bcnd, date)

# Importações de combustíveis
comb1 <- ipeadata(code = "FUNCEX12_MDVCOMBGCE12") %>% mutate(
  valor_comb = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_comb = valor_comb / 1000
) %>% mutate(
  valor_comb = number(valor_comb, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_comb, date) %>% 
  arrange(desc(date))

comb2 <- ipeadata(code = "FUNCEX12_MDPCOMBGCE12") %>% mutate(
  ind_comb = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  ind_comb = number(ind_comb, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, ind_comb, date) %>% 
  arrange(desc(date))

comb3 <- ipeadata(code = "FUNCEX12_MDQCOMBGCE12") %>% mutate(
  qt_comb = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  qt_comb = number(qt_comb, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, qt_comb, date) %>% 
  arrange(desc(date))

comb <- left_join(comb1, comb2)
comb <- left_join(comb, comb3)

comb <- comb %>% select(data_fmt, valor_comb, ind_comb, qt_comb, date)

# Exportações de combustíveis
comb1_exp <- ipeadata(code = "FUNCEX12_XVCOMBGCE12") %>% mutate(
  valor_comb = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  valor_comb = valor_comb / 1000
) %>% mutate(
  valor_comb = number(valor_comb, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
)%>% select(data_fmt, valor_comb, date) %>% 
  arrange(desc(date))

comb2_exp <- ipeadata(code = "FUNCEX12_XPCOMBGCE12") %>% mutate(
  ind_comb = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  ind_comb = number(ind_comb, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, ind_comb, date) %>% 
  arrange(desc(date))

comb3_exp <- ipeadata(code = "FUNCEX12_XQCOMBGCE12") %>% mutate(
  qt_comb = value,
  data_fmt = format(date, "%m/%Y")
) %>% mutate(
  qt_comb = number(qt_comb, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
)%>% select(data_fmt, qt_comb, date) %>% 
  arrange(desc(date))

comb_exp <- left_join(comb1_exp, comb2_exp)
comb_exp <- left_join(comb_exp, comb3_exp)

comb_exp <- comb_exp %>% select(data_fmt, valor_comb, ind_comb, qt_comb, date)

# Balança de serviços (códigos 22719, 22720 e 22721)
bs_rec <- get_series(
  code = c(valor_rec = 22720)
)

bs_desp <- get_series(
  code = c(valor_desp = 22721)
)

bs_saldo <- get_series(
  code = c(valor_saldo = 22719)
)

bs <- left_join(bs_rec, bs_desp)
bs <- left_join(bs, bs_saldo)

bs <- bs %>% mutate(
    valor_rec = valor_rec / 1000,
    valor_desp = valor_desp / 1000,
    valor_saldo = valor_saldo / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rec = number(valor_rec, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_desp = number(valor_desp, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_saldo = number(valor_saldo, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  ) %>% select(data_fmt, valor_rec, valor_desp, valor_saldo, date) %>% 
  arrange(desc(date))

# Balança de serviços como % do PIB:
bs_12m <- get_series(
  code = c(valor_bs_12m = 22719)
)

bs_12m <- bs_12m %>% mutate(
  bs_12m = rollsum(valor_bs_12m, k = 12,  align = "right", na.pad = TRUE)
)

bs_pib <- left_join(as_tibble(bs_12m), as_tibble(pib_dol)) %>% drop_na() %>% select(
  date, bs_12m, pib_dol_12m
) %>% mutate(
  bs_pib = (bs_12m/pib_dol_12m) * 100
)

bs_pib <- bs_pib %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    bs_pib = number(bs_pib, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, bs_pib, date)

bs <- left_join(bs, bs_pib) %>%
  select(data_fmt, valor_rec, valor_desp, valor_saldo, bs_pib, date)

# Renda primária (códigos 22800, 22801 e 22802)
rp_rec <- get_series(
  code = c(valor_rec = 22801)
)

rp_desp <- get_series(
  code = c(valor_desp = 22802)
)

rp_saldo <- get_series(
  code = c(valor_saldo = 22800)
)

rp <- left_join(rp_rec, rp_desp)
rp <- left_join(rp, rp_saldo)

rp <- rp %>% mutate(
    valor_rec = valor_rec / 1000,
    valor_desp = valor_desp / 1000,
    valor_saldo = valor_saldo / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rec = number(valor_rec, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_desp = number(valor_desp, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_saldo = number(valor_saldo, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  ) %>% select(data_fmt, valor_rec, valor_desp, valor_saldo, date) %>% 
  arrange(desc(date))

# Renda primária como % do PIB:
rp_12m <- get_series(
  code = c(valor_rp_12m = 22800)
)

rp_12m <- rp_12m %>% mutate(
  rp_12m = rollsum(valor_rp_12m, k = 12,  align = "right", na.pad = TRUE)
)

rp_pib <- left_join(as_tibble(rp_12m), as_tibble(pib_dol)) %>% drop_na() %>% select(
  date, rp_12m, pib_dol_12m
) %>% mutate(
  rp_pib = (rp_12m/pib_dol_12m) * 100
)

rp_pib <- rp_pib %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    rp_pib = number(rp_pib, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, rp_pib, date)

rp <- left_join(rp, rp_pib) %>%
  select(data_fmt, valor_rec, valor_desp, valor_saldo, rp_pib, date)

# Renda secundária (códigos 22838, 22839 e 22840)
rs_rec <- get_series(
  code = c(valor_rec = 22839)
)

rs_desp <- get_series(
  code = c(valor_desp = 22840)
)

rs_saldo <- get_series(
  code = c(valor_saldo = 22838)
)

rs <- left_join(rs_rec, rs_desp)
rs <- left_join(rs, rs_saldo)

rs <- rs %>% mutate(
    valor_rec = valor_rec / 1000,
    valor_desp = valor_desp / 1000,
    valor_saldo = valor_saldo / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rec = number(valor_rec, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_desp = number(valor_desp, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_saldo = number(valor_saldo, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  ) %>% select(data_fmt, valor_rec, valor_desp, valor_saldo, date) %>% 
  arrange(desc(date))

# Renda secundária como % do PIB:
rs_12m <- get_series(
  code = c(valor_rs_12m = 22838)
)

rs_12m <- rs_12m %>% mutate(
  rs_12m = rollsum(valor_rs_12m, k = 12,  align = "right", na.pad = TRUE)
)

rs_pib <- left_join(as_tibble(rs_12m), as_tibble(pib_dol)) %>% drop_na() %>% select(
  date, rs_12m, pib_dol_12m
) %>% mutate(
  rs_pib = (rs_12m/pib_dol_12m) * 100
)

rs_pib <- rs_pib %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    rs_pib = number(rs_pib, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, rs_pib, date)

rs <- left_join(rs, rs_pib) %>%
  select(data_fmt, valor_rec, valor_desp, valor_saldo, rs_pib, date)

# Conta capital (códigos 22851, 22852 e 22853)
cc_rec <- get_series(
  code = c(valor_rec = 22852)
)

cc_desp <- get_series(
  code = c(valor_desp = 22853)
)

cc_saldo <- get_series(
  code = c(valor_saldo = 22851)
)

cc <- left_join(cc_rec, cc_desp)
cc <- left_join(cc, cc_saldo)

cc <- cc %>% mutate(
    valor_rec = valor_rec / 1000,
    valor_desp = valor_desp / 1000,
    valor_saldo = valor_saldo / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rec = number(valor_rec, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_desp = number(valor_desp, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_saldo = number(valor_saldo, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  ) %>% select(data_fmt, valor_rec, valor_desp, valor_saldo, date) %>% 
  arrange(desc(date))

# Conta capital como % do PIB:
cc_12m <- get_series(
  code = c(valor_cc_12m = 22851)
)

cc_12m <- cc_12m %>% mutate(
  cc_12m = rollsum(valor_cc_12m, k = 12,  align = "right", na.pad = TRUE)
)

cc_pib <- left_join(as_tibble(cc_12m), as_tibble(pib_dol)) %>% drop_na() %>% select(
  date, cc_12m, pib_dol_12m
) %>% mutate(
  cc_pib = (cc_12m/pib_dol_12m) * 100
)

cc_pib <- cc_pib %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    cc_pib = number(cc_pib, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, cc_pib, date)

cc <- left_join(cc, cc_pib) %>%
  select(data_fmt, valor_rec, valor_desp, valor_saldo, cc_pib, date)

# Conta capital - Ativos não financeiros não produzidos (códigos 22854, 22855 e 22856)
cc_anfnp_rec <- get_series(
  code = c(valor_rec = 22855)
)

cc_anfnp_desp <- get_series(
  code = c(valor_desp = 22856)
)

cc_anfnp_saldo <- get_series(
  code = c(valor_saldo = 22854)
)

cc_anfnp <- left_join(cc_anfnp_rec, cc_anfnp_desp)
cc_anfnp <- left_join(cc_anfnp, cc_anfnp_saldo)

cc_anfnp <- cc_anfnp %>% mutate(
    valor_rec = valor_rec / 1000,
    valor_desp = valor_desp / 1000,
    valor_saldo = valor_saldo / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rec = number(valor_rec, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_desp = number(valor_desp, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_saldo = number(valor_saldo, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  ) %>% select(data_fmt, valor_rec, valor_desp, valor_saldo, date) %>% 
  arrange(desc(date))

# Conta capital - Ativos não financeiros não produzidos (passes de atletas) (códigos 22857, 22858 e 22859)
cc_anfnp_ps_rec <- get_series(
  code = c(valor_rec = 22858)
)

cc_anfnp_ps_desp <- get_series(
  code = c(valor_desp = 22859)
)

cc_anfnp_ps_saldo <- get_series(
  code = c(valor_saldo = 22857)
)

cc_anfnp_ps <- left_join(cc_anfnp_ps_rec, cc_anfnp_ps_desp)
cc_anfnp_ps <- left_join(cc_anfnp_ps, cc_anfnp_ps_saldo)

cc_anfnp_ps <- cc_anfnp_ps %>% mutate(
    valor_rec = valor_rec / 1000 * 1000,
    valor_desp = valor_desp / 1000 * 1000,
    valor_saldo = valor_saldo / 1000 * 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rec = number(valor_rec, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_desp = number(valor_desp, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_saldo = number(valor_saldo, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  ) %>% select(data_fmt, valor_rec, valor_desp, valor_saldo, date) %>% 
  arrange(desc(date))

# Conta financeira (código 22863)
cf <- get_series(
  code = c(valor = 22863)
)

cf <- cf %>% mutate(
    valor = valor / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor = number(valor, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  ) %>% select(data_fmt, valor, date) %>% 
  arrange(desc(date))

# Conta financeira como % do PIB:
cf_12m <- get_series(
  code = c(valor_cf_12m = 22863)
)

cf_12m <- cf_12m %>% mutate(
  cf_12m = rollsum(valor_cf_12m, k = 12,  align = "right", na.pad = TRUE)
)

cf_pib <- left_join(as_tibble(cf_12m), as_tibble(pib_dol)) %>% drop_na() %>% select(
  date, cf_12m, pib_dol_12m
) %>% mutate(
  cf_pib = (cf_12m/pib_dol_12m) * 100
)

cf_pib <- cf_pib %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    cf_pib = number(cf_pib, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, cf_pib, date)

cf <- left_join(cf, cf_pib) %>%
  select(data_fmt, valor, cf_pib, date)

# Investimento direto (códigos 22864, 22865 e 22885)
ide <- get_series(
  code = c(valor_ide = 22865)
)

idp <- get_series(
  code = c(valor_idp = 22885)
)

id <- get_series(
  code = c(valor_id = 22864)
)

inv_dir <- left_join(ide, idp)
inv_dir <- left_join(inv_dir, id)

inv_dir <- inv_dir %>% mutate(
    valor_ide = valor_ide / 1000,
    valor_idp = valor_idp / 1000,
    valor_id = valor_id / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_ide = number(valor_ide, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_idp = number(valor_idp, big.mark = ".", decimal.mark = ",", accuracy = 0.001),
    valor_id = number(valor_id, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  ) %>% select(data_fmt, valor_ide, valor_idp, valor_id, date) %>% 
  arrange(desc(date))

# IDE como % do PIB:
ide_12m <- get_series(
  code = c(valor_ide_12m = 22865)
)

ide_12m <- ide_12m %>% mutate(
  ide_12m = rollsum(valor_ide_12m, k = 12,  align = "right", na.pad = TRUE)
)

ide_pib <- left_join(as_tibble(ide_12m), as_tibble(pib_dol)) %>% drop_na() %>% select(
  date, ide_12m, pib_dol_12m
) %>% mutate(
  ide_pib = (ide_12m/pib_dol_12m) * 100
)

ide_pib <- ide_pib %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    ide_pib = number(ide_pib, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, ide_pib, date)

ide <- left_join(ide, ide_pib) %>%
  select(data_fmt, valor_ide, ide_pib, date) %>% drop_na()

# IDP como % do PIB:
idp_12m <- get_series(
  code = c(valor_idp_12m = 22885)
)

idp_12m <- idp_12m %>% mutate(
  idp_12m = rollsum(valor_idp_12m, k = 12,  align = "right", na.pad = TRUE)
)

idp_pib <- left_join(as_tibble(idp_12m), as_tibble(pib_dol)) %>% drop_na() %>% select(
  date, idp_12m, pib_dol_12m
) %>% mutate(
  idp_pib = (idp_12m/pib_dol_12m) * 100
)

idp_pib <- idp_pib %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    idp_pib = number(idp_pib, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, idp_pib, date)

idp <- left_join(idp, idp_pib) %>%
  select(data_fmt, valor_idp, idp_pib, date) %>% drop_na()

# ID como % do PIB:
id_12m <- get_series(
  code = c(valor_id_12m = 22864)
)

id_12m <- id_12m %>% mutate(
  id_12m = rollsum(valor_id_12m, k = 12,  align = "right", na.pad = TRUE)
)

id_pib <- left_join(as_tibble(id_12m), as_tibble(pib_dol)) %>% drop_na() %>% select(
  date, id_12m, pib_dol_12m
) %>% mutate(
  id_pib = (id_12m/pib_dol_12m) * 100
)

id_pib <- id_pib %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    id_pib = number(id_pib, decimal.mark = ",", accuracy = 0.01)
  ) %>%
  arrange(desc(date)) %>%
  select(data_fmt, id_pib, date)

id <- left_join(id, id_pib) %>%
  select(data_fmt, valor_id, id_pib, date) %>% drop_na()

inv_dir <- left_join(inv_dir, ide, by = "date")
inv_dir <- left_join(inv_dir, idp, by = "date")
inv_dir <- left_join(inv_dir, id, by = "date")

names(inv_dir)[names(inv_dir) == "data_fmt.x"] <- "data_fmt"
names(inv_dir)[names(inv_dir) == "valor_ide.x"] <- "valor_ide"
names(inv_dir)[names(inv_dir) == "valor_idp.x"] <- "valor_idp"
names(inv_dir)[names(inv_dir) == "valor_id.x"] <- "valor_id"

inv_dir <- inv_dir %>% dplyr::select(data_fmt, valor_ide, valor_idp,
                         valor_id, ide_pib, idp_pib, id_pib, date)

# Investimento em carteira (código 22905)
inv_cart <- get_series(
  code = c(valor = 22905)
)

inv_cart <- inv_cart %>% mutate(
    valor = valor / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor = number(valor, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  ) %>% select(data_fmt, valor, date) %>% 
  arrange(desc(date))

# Conta financeira (outros investimentos) (códigos 22969, 22970 e 22971)
outros_inv_ativos <- get_series(
  code = c(valor_outros_inv_ativos = 22970)
)

outros_inv_passivos <- get_series(
  code = c(valor_outros_inv_passivos = 22971)
)

outros_inv_liq <- get_series(
  code = c(valor_outros_inv_liq = 22969)
)

outros_inv <- left_join(outros_inv_ativos, outros_inv_passivos)
outros_inv <- left_join(outros_inv, outros_inv_liq)

outros_inv <- outros_inv %>% mutate(
    valor_outros_inv_ativos = valor_outros_inv_ativos / 1000,
    valor_outros_inv_passivos = valor_outros_inv_passivos / 1000,
    valor_outros_inv_liq = valor_outros_inv_liq / 1000
) %>% mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_outros_inv_ativos = number(valor_outros_inv_ativos, big.mark = ".",
                                     decimal.mark = ",", accuracy = 0.001),
    valor_outros_inv_passivos = number(valor_outros_inv_passivos, big.mark = ".",
                                       decimal.mark = ",", accuracy = 0.001),
    valor_outros_inv_liq = number(valor_outros_inv_liq, big.mark = ".",
                                  decimal.mark = ",", accuracy = 0.001)) %>% select(
                                    data_fmt, valor_outros_inv_ativos, valor_outros_inv_passivos, valor_outros_inv_liq, date) %>% arrange(desc(date))

# Erros e omissões (código 23060)
eo <- get_series(
  code = c(valor = 23060)
) %>% mutate(
    valor = valor / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor = number(valor, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  ) %>% select(data_fmt, valor, date) %>% 
  arrange(desc(date))

# Ativos de reservas (código 23043)
ativ_res <- get_series(
  code = c(valor = 23043)
) %>% mutate(
    valor = valor / 1000
) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor = number(valor, big.mark = ".", decimal.mark = ",", accuracy = 0.001)
  ) %>% select(data_fmt, valor, date) %>% 
  arrange(desc(date))

# Índice de commodities - Brasil (códigos 22574 e 29042)
commod_bra <- get_series(
  code = c(valor_rs = 27574)
) %>% mutate(
  valor_rs_mg = (valor_rs/lag(valor_rs) - 1) * 100,
  valor_rs_12m = (valor_rs/lag(valor_rs, 12) - 1) * 100
)

commod_usd <- get_series(
  code = c(valor_usd = 29042)
) %>% mutate(
  valor_usd_mg = (valor_usd/lag(valor_usd) - 1) * 100,
  valor_usd_12m = (valor_usd/lag(valor_usd, 12) - 1) * 100
)

commod <- left_join(commod_bra, commod_usd) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rs = number(valor_rs, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_rs_mg = number(valor_rs_mg, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_rs_12m = number(valor_rs_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd = number(valor_usd, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd_mg = number(valor_usd_mg, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd_12m = number(valor_usd_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>% select(data_fmt, valor_rs, valor_rs_mg, valor_rs_12m, valor_usd, valor_usd_mg, valor_usd_12m, date) %>% 
  arrange(desc(date))

# Índice de commodities - Agropecuária (códigos 22574 e 29042)
commod_agrop <- get_series(
  code = c(valor_rs = 27575)
) %>% mutate(
  valor_rs_mg = (valor_rs/lag(valor_rs) - 1) * 100,
  valor_rs_12m = (valor_rs/lag(valor_rs, 12) - 1) * 100
)

commod_usd_agrop <- get_series(
  code = c(valor_usd = 29041)
) %>% mutate(
  valor_usd_mg = (valor_usd/lag(valor_usd) - 1) * 100,
  valor_usd_12m = (valor_usd/lag(valor_usd, 12) - 1) * 100
)

commod_agrop <- left_join(commod_agrop, commod_usd_agrop) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rs = number(valor_rs, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_rs_mg = number(valor_rs_mg, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_rs_12m = number(valor_rs_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd = number(valor_usd, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd_mg = number(valor_usd_mg, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd_12m = number(valor_usd_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>% select(data_fmt, valor_rs, valor_rs_mg, valor_rs_12m, valor_usd, valor_usd_mg, valor_usd_12m, date) %>% 
  arrange(desc(date))

# Índice de commodities - Metal (códigos 27576 e 29040)
commod_metal <- get_series(
  code = c(valor_rs = 27576)
) %>% mutate(
  valor_rs_mg = (valor_rs/lag(valor_rs) - 1) * 100,
  valor_rs_12m = (valor_rs/lag(valor_rs, 12) - 1) * 100
)

commod_usd_metal <- get_series(
  code = c(valor_usd = 29040)
) %>% mutate(
  valor_usd_mg = (valor_usd/lag(valor_usd) - 1) * 100,
  valor_usd_12m = (valor_usd/lag(valor_usd, 12) - 1) * 100
)

commod_metal <- left_join(commod_metal, commod_usd_metal) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rs = number(valor_rs, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_rs_mg = number(valor_rs_mg, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_rs_12m = number(valor_rs_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd = number(valor_usd, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd_mg = number(valor_usd_mg, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd_12m = number(valor_usd_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>% select(data_fmt, valor_rs, valor_rs_mg, valor_rs_12m, valor_usd, valor_usd_mg, valor_usd_12m, date) %>% 
  arrange(desc(date))

# Índice de commodities - Energia (códigos 27577 e 29039)
commod_energia <- get_series(
  code = c(valor_rs = 27577)
) %>% mutate(
  valor_rs_mg = (valor_rs/lag(valor_rs) - 1) * 100,
  valor_rs_12m = (valor_rs/lag(valor_rs, 12) - 1) * 100
)

commod_usd_energia <- get_series(
  code = c(valor_usd = 29039)
) %>% mutate(
  valor_usd_mg = (valor_usd/lag(valor_usd) - 1) * 100,
  valor_usd_12m = (valor_usd/lag(valor_usd, 12) - 1) * 100
)

commod_energia <- left_join(commod_energia, commod_usd_energia) %>% 
  mutate(
    data_fmt = format(date, "%m/%Y"),
    valor_rs = number(valor_rs, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_rs_mg = number(valor_rs_mg, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_rs_12m = number(valor_rs_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd = number(valor_usd, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd_mg = number(valor_usd_mg, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
    valor_usd_12m = number(valor_usd_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
  ) %>% select(data_fmt, valor_rs, valor_rs_mg, valor_rs_12m, valor_usd, valor_usd_mg, valor_usd_12m, date) %>% 
  arrange(desc(date))

# Petróleo Brent e WTI
brent <- ipeadata(code = "EIA366_PBRENT366") %>% mutate(
  var_mg_brent = (value / lag(value) - 1) * 100
) %>% mutate(
  data_fmt = format(date, "%d/%m/%Y"),
  valor_brent = value
) %>% mutate(
  valor_brent = number(valor_brent, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
  var_mg_brent = number(var_mg_brent, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
) %>% select(data_fmt, valor_brent, var_mg_brent, date) %>%
    arrange(desc(date))

brent_mensal <- ipeadata(code = "EIA366_PBRENT366") %>% mutate(
  valor_brent = value,
  ano_mes = format(date, "%Y-%m")
) %>% aggregate(
  valor_brent ~ ano_mes,
  FUN = "mean"
) %>% mutate(
  var_mg_brent = (valor_brent / lag(valor_brent) - 1) * 100,
  var_12m_brent = (valor_brent / lag(valor_brent, 12) - 1) * 100
) %>% mutate(
  valor_brent = number(valor_brent, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
  var_mg_brent = number(var_mg_brent, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
  var_12m_brent = number(var_12m_brent, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
) %>% select(ano_mes, valor_brent, var_mg_brent, var_12m_brent) %>%
    arrange(desc(ano_mes))

wti <- wti <- wti <- ipeadata(code = "EIA366_PWTI366") %>% mutate(
  var_mg_wti = (value / lag(value) - 1) * 100
) %>% mutate(
  data_fmt = format(date, "%d/%m/%Y"),
  valor_wti = value
) %>% mutate(
  valor_wti = number(valor_wti, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
  var_mg_wti = number(var_mg_wti, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
) %>% select(data_fmt, valor_wti, var_mg_wti, date) %>%
    arrange(desc(date))

wti_mensal <- ipeadata(code = "EIA366_PWTI366") %>% mutate(
  valor_wti = value,
  ano_mes = format(date, "%Y-%m")
) %>% aggregate(
  valor_wti ~ ano_mes,
  FUN = "mean"
) %>% mutate(
  var_mg_wti = (valor_wti / lag(valor_wti) - 1) * 100,
  var_12m_wti = (valor_wti / lag(valor_wti, 12) - 1) * 100
) %>% mutate(
  valor_wti = number(valor_wti, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
  var_mg_wti = number(var_mg_wti, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
  var_12m_wti = number(var_12m_wti, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
) %>% select(ano_mes, valor_wti, var_mg_wti, var_12m_wti) %>%
    arrange(desc(ano_mes))

petroleo <- left_join(brent, wti) %>% select(
  data_fmt, valor_brent, var_mg_brent, valor_wti, var_mg_wti, date
)

petroleo_mensal <- left_join(brent_mensal, wti_mensal) %>% mutate(
  date = ym(ano_mes)
) %>% mutate(
  data_fmt = format(date, "%m/%Y")
) %>% select(data_fmt, valor_brent, var_mg_brent, var_12m_brent, valor_wti, var_mg_wti, var_12m_wti,
             date)

# Soja
soja <- ipeadata(code = "IFS12_SOJAGP12") %>% mutate(
  var_mg = (value / lag(value) - 1) * 100,
  var_12m = (value / lag(value, 12) - 1) * 100
) %>% mutate(
  data_fmt = format(date, "%m/%Y"),
  valor = value
) %>% mutate(
  valor = number(valor, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
  var_mg = number(var_mg, big.mark = ".", decimal.mark = ",", accuracy = 0.01),
  var_12m = number(var_12m, big.mark = ".", decimal.mark = ",", accuracy = 0.01)
) %>% select(data_fmt, valor, var_mg, var_12m, date) %>%
    arrange(desc(date))

```

# Visão geral
Columns {.sidebar} {data-width=250}
-----------------------------------------------------------------------

<br><br><br><br>

<div style="font-size:18px">
Este _dashboard_ apresenta de forma centralizada uma série de dados macroeconômicos brasileiros nas últimas décadas.
São apresentadas informações referentes ao balanço de pagamentos, termos de troca, preços e índices de commodities, estatísticas fiscais, inflação, estatísticas monetárias, produção, reservas internacionais e taxa de câmbio através de dados com frequências diárias, mensais, trimestrais e anuais coletados junto a órgãos como Banco Central do Brasil (BCB), Instituto Brasileiro de Geografia e Estatística (IBGE) e Instituto de Pesquisa Econômica Aplicada (IPEA).

<br>

O painel é automatizado e atualizado diariamente.

<br><br>

**Autor:** [Daniel Consul de Antoni](http://lattes.cnpq.br/3579437273217709)
<br>
Historiador (UFRGS)
<br>
Mestre e Doutorando em Economia (UFF)

**Contato:** daniel.consul@outlook.com

<br><br>

**Última atualização:** `r format(Sys.Date(), format = "%d/%m/%Y")`
</div>

Columns {data-width=750}
-----------------------------------------------------------------------

```{r, out.width="90%", fig.align='center', vertical_layout = fill}
knitr::include_graphics("visao_geral.png")
```

# 1) Transações correntes {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

O **balanço de pagamentos (BP)** é uma peça contábil que resume as transações econômicas entre residentes no país e não residentes em um determinado período de tempo. O BP brasileiro é compilado fundamentalmente a partir dos registros individuais das transações (microdados), permitindo ao Banco Central do Brasil o acompanhamento tempestivo dos fluxos da economia brasileira com o exterior.

<br>

A rubrica de **transações correntes (TC)** agrega os seguintes itens: balança comercial (bens), balança de serviços, renda primária e renda secundária, e **registra todas as transações entre os residentes no Brasil e os residentes no exterior, independentemente da moeda utilizada**, realizadas por intermédio do sistema bancário ou de agentes credenciados pelo Banco Central do Brasil.

<br>

Os dados como % do PIB referem-se ao acumulado em 12 meses.

<br>

**Fonte:** Códigos 22702 (receita), 22703 (despesa), 22701 (saldo TC) e 4385 (PIB em dólares) no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=500}  {.tabset}
-----------------------------------------------------------------------

### Receitas (1)
```{r}
plot_ly(
  data = trans_cor, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_rec)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### Despesas (2)
```{r}
plot_ly(
  data = trans_cor, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_desp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### Saldo TC (3) (1-2)
```{r}
plot_ly(
  data = trans_cor, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_saldo)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### % do PIB
```{r}
plot_ly(
  data = trans_corr_pib, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", trans_corr_pib)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "% do PIB")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=300}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  trans_cor[, -6],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rec = colDef(
      name = "Receitas (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_desp = colDef(
      name = "Despesas (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo = colDef(
      name = "Saldo TC (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    trans_corr_pib = colDef(
      name = "% do PIB",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1) Balança comercial (bens) {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A **balança Comercial (bens) (BC)** contabiliza as transações de itens que são resultados de atividades produtivas, tangíveis, e sobre os quais direitos de propriedade podem ser estabelecidos e transferidos através de transações. A BC é dividida em exportações e importações. As **exportações** registram a venda de bens de residentes a não residentes, enquanto as **importações** registram a compra de bens por residentes de não residentes. A rubrica é fundada nas estatísticas de comércio exterior compiladas pelo Ministério do Desenvolvimento, Indústria, Comércio e Serviços (MDIC), com base nos registros alfandegários do Siscomex, que são ajustadas pelo Banco Central com o intuito de ampliação da cobertura. Por conta disso, às importações publicadas pelo MDIC são incorporadas as compras de energia elétrica sem registro no Siscomex. Adicionalmente, exportações e importações são ajustadas pela inclusão das operações fictas, nas quais o produto é transacionado com um não residente, mas não atravessa a fronteira do país em que se encontra; e, por fim, a balança comercial do balanço de pagamentos incorpora encomendas postais internacionais.

<br>

Os dados como % do PIB referem-se ao acumulado em 12 meses.

<br>

**Fonte**: Códigos 22708 (exportações), 22709 (importações), 22707 (saldo BC) e 4385 (PIB em dólares) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Exportações (1)
```{r}
plot_ly(
  data = bal_com, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_exp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### Importações (2)
```{r}
plot_ly(
  data = bal_com, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_imp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### Saldo BC (3) (1-2)
```{r}
plot_ly(
  data = bal_com, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_saldo)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### % do PIB
```{r}
plot_ly(
  data = bal_com, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", bal_com_pib)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "% do PIB")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  bal_com[, -6],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_exp = colDef(
      name = "Exportações (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_imp = colDef(
      name = "Importações (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo = colDef(
      name = "Saldo BC (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    bal_com_pib = colDef(
      name = "% do PIB",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.1) Exportações {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

As **exportações** são os valores das vendas para o exterior e outras remessas de bens de propriedade de residentes no país, registrado na Balança Comercial do Balanço de Pagamentos. O valor _free on board_ (FOB) representa o preço em dólares no embarque, sendo o importador responsável pelo frete, seguro e custos posteriores. Neste caso, considera-se a exportação referente ao volume total do país.

<br>

Os dados como % do PIB referem-se ao acumulado em 12 meses.

<br>

**Fonte:** Secretaria de Comércio Exterior (SECEX) do Ministério do Desenvolvimento, Indústria, Comércio e Serviços (MDIC), Fundação Centro de Estudos do Comércio Exterior (FUNCEX) via Ipeadata e códigos 22711 (exportações) e 4385 (PIB em dólares) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil (SGST/BCB).

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = export, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_exp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 5
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índíce de preços
```{r}
plot_ly(
  data = export, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", ind_exp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 10
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de quantum
```{r}
plot_ly(
  data = export, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", qt_exp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 20
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### % do PIB
```{r}
plot_ly(
  data = export, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", exp_pib)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "% do PIB",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  export[, -6],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_exp = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    ind_exp = colDef(
      name = "Índice de preços",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    qt_exp = colDef(
      name = "Índice de quantum",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    exp_pib = colDef(
      name = "% do PIB",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.1.1) Bens de capital {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

O setor de exportação de **bens de capital** (BK) é utilizado para a produção de outros bens e inclui, por exemplo, máquinas e ferramentas, tratores e material de transporte.

O índice de preços e o índice de quantum (médias 2018 = 100) captam o efeito das variações das quantidades físicas exportadas sobre a evolução do valor de exportação. São obtidos, implicitamente, por meio do deflacionamento dos valores exportados pelas variações dos índices de preço de exportação.

<br>

**Fonte:** Fundação Centro de Estudos do Comércio Exterior (FUNCEX) via Ipeadata.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = bk_exp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_bk)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de quantum
```{r}
plot_ly(
  data = bk_exp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", qt_bk)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 20
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  bk_exp[, -4],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_bk = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    qt_bk = colDef(
      name = "Índice de quantum",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.1.2) Bens intermediários {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

O setor de exportação de **bens intermediários** (BI) é utilizado como insumo para a produção de outros bens e incluem, entre outros itens, partes e peças para veículos, componentes eletro-eletrônicos, minérios e produtos siderúrgicos básicos, elementos e compostos químicos e soja em grão. 

O índice de preços e o índice de quantum (médias 2018 = 100) captam o efeito das variações das quantidades físicas exportadas sobre a evolução do valor de exportação. São obtidos, implicitamente, por meio do deflacionamento dos valores exportados pelas variações dos índices de preço de exportação.

<br>

**Fonte:** Fundação Centro de Estudos do Comércio Exterior (FUNCEX) via Ipeadata.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = bi_exp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_bi)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 2
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de quantum
```{r}
plot_ly(
  data = bi_exp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", qt_bi)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 20
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  bi_exp[, -4],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_bi = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    qt_bi = colDef(
      name = "Índice de quantum",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.1.3) Bens de consumo {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A exportação de **bens de consumo** refere-se a bens duráveis e não duráveis destinados ao uso de consumidores finais.

<br>

**Fonte:** Secretaria de Comércio Exterior (SECEX) do Ministério do Desenvolvimento, Indústria, Comércio e Serviços (MDIC) via Ipeadata.

Column {data-width=600} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = exp_bc, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_bc)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=200} {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  exp_bc[, -3],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_bc = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.1.3.1) Bens de consumo duráveis {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

O setor de exportação de **bens de consumo duráveis** compreende bens que possuem uma vida útil esperada de 1 a 3 anos ou mais e com valores relativamente elevados, tais como refrigeradores, máquinas de lavar, automóveis de passeio, motocicletas, aparelhos eletrodomésticos e aparelhos celulares.

Os índices de preços e de quantum (médias 2018 = 100) captam o efeito das variações das quantidades físicas exportadas sobre a evolução do valor de exportação. São obtidos, implicitamente, por meio do deflacionamento dos valores exportados pelas variações dos índices de preço de exportação.

<br>

**Fonte:** Fundação Centro de Estudos do Comércio Exterior (FUNCEX) via Ipeadata.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = bcd_exp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_bcd)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 0.1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de preços
```{r}
plot_ly(
  data = bcd_exp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", ind_bcd)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 5
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de quantum
```{r}
plot_ly(
  data = bcd_exp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", qt_bcd)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 10
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  bcd_exp[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_bcd = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
      ind_bcd = colDef(
      name = "Índice de preços",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    qt_bcd = colDef(
      name = "Índice de quantum",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.1.3.2) Bens de consumo não duráveis {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

O setor de exportação de **bens de consumo não duráveis** é compreendido por bens que possuem uma vida útil inferior a um ano e inclui produtos de alimentação e bebidas em geral, os artigos de vestuário e os brinquedos, entre outros.

O índice de quantum (média 2018 = 100) capta o efeito das variações das quantidades físicas exportadas sobre a evolução do valor de exportação. É obtido, implicitamente, por meio do deflacionamento dos valores exportados pelas variações dos índices de preço de exportação.

<br>

**Fonte:** Fundação Centro de Estudos do Comércio Exterior (FUNCEX) via Ipeadata.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = bcnd_exp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_bcnd)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de quantum
```{r}
plot_ly(
  data = bcnd_exp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", qt_bcnd)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 10
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  bcnd_exp[, -4],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_bcnd = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    qt_bcnd = colDef(
      name = "Índice de quantum",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.1.4) Combustíveis {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

Estão agregados, entre outros, na grande categoria econômica **combustíveis** os óleos brutos de petróleo, a gasolina e o álcool carburante e também os combustíveis e lubrificantes utilizados em aeronaves e embarcações de trânsito internacional, ou seja, aqueles considerados como consumo de bordo. 

O índice de preços e o índice de quantum (médias 2018 = 100) captam o efeito das variações das quantidades físicas importadas sobre a evolução do valor de importação. São obtidos, implicitamente, por meio do deflacionamento dos valores importados pelas variações dos índices de preço de importação.

<br>

**Fonte:** Fundação Centro de Estudos do Comércio Exterior (FUNCEX) via Ipeadata.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = comb_exp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_comb)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de preços
```{r}
plot_ly(
  data = comb_exp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", ind_comb)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 20
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de quantum
```{r}
plot_ly(
  data = comb_exp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", qt_comb)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 20
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  comb_exp[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_comb = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    ind_comb = colDef(
      name = "Índice de preços",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    qt_comb = colDef(
      name = "Índice de quantum",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.2) Importações {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

As **importações** correspondem às compras de mercadorias por residentes no país, registradas na Balança Comercial. O valor _free on board_ (FOB) representa o preço em dólares no embarque, sendo o importador responsável pelo frete, seguro e custos posteriores. Neste caso, considera-se a importação referente ao volume total do país.

<br>

Os dados como % do PIB referem-se ao acumulado em 12 meses.

<br>

**Fonte:** Ministério do Desenvolvimento, Indústria, Comércio e Serviços (MDIC), Fundação Centro de Estudos do Comércio Exterior (FUNCEX) via Ipeadata e códigos 22712 (importações) e 4385 (PIB em dólares) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil (SGST/BCB).

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = import, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_imp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 5
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índíce de preços
```{r}
plot_ly(
  data = import, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", ind_imp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 10
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de quantum
```{r}
plot_ly(
  data = import, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", qt_imp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 20
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### % do PIB
```{r}
plot_ly(
  data = import, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", imp_pib)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "%",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  import[, -6],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_imp = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    ind_imp = colDef(
      name = "Índice de preços",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    qt_imp = colDef(
      name = "Índice de quantum",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    imp_pib = colDef(
      name = "% do PIB",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.2.1) Bens de capital {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

O setor de importação de **bens de capital** (BK) é utilizado para a produção de outros bens e inclui, por exemplo, máquinas e ferramentas, tratores e material de transporte.

O índice de preços e o índice de quantum (médias 2018 = 100) captam o efeito das variações das quantidades físicas importadas sobre a evolução do valor de importação. São obtidos, implicitamente, por meio do deflacionamento dos valores importados pelas variações dos índices de preço de importação.

<br>

**Fonte:** Fundação Centro de Estudos do Comércio Exterior (FUNCEX) via Ipeadata.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = bk, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_bk)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de preços
```{r}
plot_ly(
  data = bk, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", ind_bk)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 10
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de quantum
```{r}
plot_ly(
  data = bk, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", qt_bk)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 50
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  bk[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_bk = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    ind_bk = colDef(
      name = "Índice de preços",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    qt_bk = colDef(
      name = "Índice de quantum",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.2.2) Bens intermediários {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

O setor de importação de **bens intermediários** (BI) é utilizado como insumo para a produção de outros bens e incluem, entre outros itens, partes e peças para veículos, componentes eletro-eletrônicos, minérios e produtos siderúrgicos básicos, elementos e compostos químicos e soja em grão. 

O índice de preços e o índice de quantum (médias 2018 = 100) captam o efeito das variações das quantidades físicas importadas sobre a evolução do valor de importação. São obtidos, implicitamente, por meio do deflacionamento dos valores importados pelas variações dos índices de preço de importação.

<br>

**Fonte:** Fundação Centro de Estudos do Comércio Exterior (FUNCEX) via Ipeadata.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = bi, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_bi)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 2
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de preços
```{r}
plot_ly(
  data = bi, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", ind_bi)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 10
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de quantum
```{r}
plot_ly(
  data = bi, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", qt_bi)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 20
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  bi[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_bi = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    ind_bi = colDef(
      name = "Índice de preços",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    qt_bi = colDef(
      name = "Índice de quantum",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.2.3) Bens de consumo {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A importação de **bens de consumo** refere-se a bens duráveis e não duráveis destinados ao uso de consumidores finais.

<br>

**Fonte:** Secretaria de Comércio Exterior (SECEX) do Ministério do Desenvolvimento, Indústria, Comércio e Serviços (MDIC) via Ipeadata.

Column {data-width=600} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = bc, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_bc)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=200} {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  bc[, -3],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_bc = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.2.3.1) Bens de consumo duráveis {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

O setor de importação de **bens de consumo duráveis** compreende bens que possuem uma vida útil esperada de 1 a 3 anos ou mais e com valores relativamente elevados, tais como refrigeradores, máquinas de lavar, automóveis de passeio, motocicletas, aparelhos eletrodomésticos e aparelhos celulares.

O índice de quantum (média 2018 = 100) capta o efeito das variações das quantidades físicas importadas sobre a evolução do valor de importação. É obtido, implicitamente, por meio do deflacionamento dos valores importados pelas variações dos índices de preço de importação.

<br>

**Fonte:** Fundação Centro de Estudos do Comércio Exterior (FUNCEX) via Ipeadata.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = bcd, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_bcd)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de quantum
```{r}
plot_ly(
  data = bcd, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", qt_bcd)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 40
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  bcd[, -4],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_bcd = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    qt_bcd = colDef(
      name = "Índice de quantum",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.2.3.2) Bens de consumo não duráveis {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

O setor de **bens de consumo não duráveis** compreende bens que possuem uma vida útil inferior a um ano e incluem produtos de alimentação e bebidas em geral, os artigos de vestuário e os brinquedos, entre outros.

O índice de quantum (média 2018 = 100) capta o efeito das variações das quantidades físicas importadas sobre a evolução do valor de importação. É obtido, implicitamente, por meio do deflacionamento dos valores importados pelas variações dos índices de preço de importação.

<br>

**Fonte:** Fundação Centro de Estudos do Comércio Exterior (FUNCEX) via Ipeadata.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = bcnd, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_bcnd)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 2
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de quantum
```{r}
plot_ly(
  data = bcnd, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", qt_bcnd)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 20
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  bcnd[, -4],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_bcnd = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    qt_bcnd = colDef(
      name = "Índice de quantum",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.1.2.4) Combustíveis {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

Estão agregados, entre outros, na grande categoria econômica **combustíveis** os óleos brutos de petróleo, a gasolina e o álcool carburante e também os combustíveis e lubrificantes utilizados em aeronaves e embarcações de trânsito internacional, ou seja, aqueles considerados como consumo de bordo. 

O índice de preços e o índice de quantum (médias 2018 = 100) captam o efeito das variações das quantidades físicas importadas sobre a evolução do valor de importação. São obtidos, implicitamente, por meio do deflacionamento dos valores importados pelas variações dos índices de preço de importação.

<br>

**Fonte:** Fundação Centro de Estudos do Comércio Exterior (FUNCEX) via Ipeadata.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = comb, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_comb)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de preços
```{r}
plot_ly(
  data = comb, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", ind_comb)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 20
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Índice de quantum
```{r}
plot_ly(
  data = comb, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", qt_comb)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "Média 2018 = 100",
      tick0 = 0,
      dtick = 20
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  comb[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_comb = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    ind_comb = colDef(
      name = "Índice de preços",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    qt_comb = colDef(
      name = "Índice de quantum",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.2) Balança de serviços {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A **balança de serviços (BS)** é composta por serviços relativos a transportes, viagens internacionais, seguros, financeiros, construção, computação e informações, royalties e licenças, aluguel de equipamentos, serviços pessoais, culturais e de entretenimento e serviços governamentais.

<br>

Os dados como % do PIB referem-se ao acumulado em 12 meses.

<br>

**Fonte**: Códigos 22720 (receitas), 22721 (despesas), 22719 (saldo BS) e 4385 (PIB em dólares) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Receitas (1)
```{r}
plot_ly(
  data = bs, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_rec)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Despesas (2)
```{r}
plot_ly(
  data = bs, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_desp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### Saldo BS (3) (1-2)
```{r}
plot_ly(
  data = bs, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_saldo)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### % do PIB
```{r}
plot_ly(
  data = bs, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", bs_pib)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  bs[, -6],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rec = colDef(
      name = "Receitas (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_desp = colDef(
      name = "Despesas (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo = colDef(
      name = "Saldo BS (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    bs_pib = colDef(
      name = "% do PIB",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.3) Renda primária {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A **renda primária (RP)** indica os montantes a pagar ou a receber em troca do uso temporário de recursos financeiros, trabalho ou ativos não financeiros não produzidos, a saber, remuneração de trabalhadores, renda de investimentos e demais rendas primárias. Fazem parte da primeira a remuneração do trabalho assalariado (salários e ordenados); da segunda, renda de investimento direto, renda de investimento em carteira, renda de outros investimentos e renda de ativos de reserva; e da terceira, tributos sobre a produção e importação, subsídios e aluguéis.

<br>

Os dados como % do PIB referem-se ao acumulado em 12 meses.

<br>

**Fonte**: Códigos 22801 (receitas), 22802 (despesas), 22800 (saldo RP) e 4385 (PIB em dólares) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Receitas (1)
```{r}
plot_ly(
  data = rp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_rec)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Despesas (2)
```{r}
plot_ly(
  data = rp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_desp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Saldo RP (3) (1-2)
```{r}
plot_ly(
  data = rp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_saldo)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### % do PIB
```{r}
plot_ly(
  data = rp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", rp_pib)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "%",
      tick0 = 0,
      dtick = 0.5
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  rp[, -6],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rec = colDef(
      name = "Receitas (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_desp = colDef(
      name = "Despesas (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo = colDef(
      name = "Saldo RP (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    rp_pib = colDef(
      name = "% do PIB",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 1.4) Renda secundária {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A **renda secundária (RS)**, antes denominada “transferências unilaterais correntes”, tem sua nomenclatura ajustada às contas nacionais, e apresenta a renda gerada em uma economia e distribuída para outra. Setoriza as transferências em dois componentes: governo e demais setores. No primeiro caso, estão registrados os tributos correntes sobre a renda, contribuições e benefícios sociais, cooperação internacional corrente e demais transferências correntes do governo; já no segundo, estão as transferências pessoais (transferências correntes entre famílias residentes e não residentes) e outras transferências correntes.

<br>

Os dados como % do PIB referem-se ao acumulado em 12 meses.

<br>

**Fonte**: Códigos 22839 (receitas), 22840 (despesas), 22838 (saldo RS) e 4385 (PIB em dólares) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Receitas (1)
```{r}
plot_ly(
  data = rs, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_rec)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      dtick = 1,
      range = c(0, 2)
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Despesas (2)
```{r}
plot_ly(
  data = rs, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_desp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      range = c(0, 2),
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Saldo RS (3) (1-2)
```{r}
plot_ly(
  data = rs, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_saldo)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      range = c(-1, 1),
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### % do PIB
```{r}
plot_ly(
  data = rs, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", rs_pib)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "%",
      dtick = 0.1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  rs[, -6],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rec = colDef(
      name = "Receitas (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_desp = colDef(
      name = "Despesas (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo = colDef(
      name = "Saldo RS (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    rs_pib = colDef(
      name = "% do PIB",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 2) Conta capital {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A **conta capital (CC)** registra as transações envolvendo compra e venda de ativos não financeiros não produzidos, e transferências de capital. As transferências de capital relacionadas com patrimônio de migrantes não mais impactam essa conta.

<br>

Os dados como % do PIB referem-se ao acumulado em 12 meses.

<br>

**Fonte**: Códigos 22852 (receitas), 22853 (despesas), 22851 (saldo CC) e 4385 (PIB em dólares) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Receitas (1)
```{r}
plot_ly(
  data = cc, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_rec)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Despesas (2)
```{r}
plot_ly(
  data = cc, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_desp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Saldo CC (3) (1-2)
```{r}
plot_ly(
  data = cc, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_saldo)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### % do PIB
```{r}
plot_ly(
  data = cc, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", cc_pib)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "%",
      tick0 = 0,
      dtick = 0.1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  cc[, -6],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rec = colDef(
      name = "Receitas (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_desp = colDef(
      name = "Despesas (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo = colDef(
      name = "Saldo CC (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    cc_pib = colDef(
      name = "% do PIB",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 2.1) Ativos não financeiros não produzidos {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A **conta capital (ativos não financeiros não produzidos)** inclui ativos intangíveis não produzidos e terrenos e outros ativos materiais não produzidos que podem ser usados na produção de bens e serviços. 

<br>

**Fonte**: Códigos 22855 (receitas), 22856 (despesas) e 22855 (saldo CC (ativos não financeiros não produzidos)) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Receitas (1)
```{r}
plot_ly(
  data = cc_anfnp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_rec)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Despesas (2)
```{r}
plot_ly(
  data = cc_anfnp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_desp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Saldo CC (ativos não financeiros não produzidos) (3) (1-2)
```{r}
plot_ly(
  data = cc_anfnp, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_saldo)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  cc_anfnp[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rec = colDef(
      name = "Receitas (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_desp = colDef(
      name = "Despesas (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo = colDef(
      name = "Saldo CC (ativos não financeiros não produzidos) (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 2.1.1) Passes de atletas {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A **conta capital (ativos não financeiros não produzidos - passes de atletas)** registra as transações de compra e venda de passes de atletas profissionais realizadas entre residentes e não-residentes.

<br>

**Fonte**: Códigos 22858 (receitas), 22859 (despesas) e 22857 (saldo CC (ativos não financeiros não produzidos - passes de atletas)) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Receitas (1)
```{r}
plot_ly(
  data = cc_anfnp_ps, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_rec)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 10
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Despesas (2)
```{r}
plot_ly(
  data = cc_anfnp_ps, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_desp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      dtick = 5
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### Saldo CC (ativos não financeiros não produzidos - passes de atletas) (3) (1-2)
```{r}
plot_ly(
  data = cc_anfnp_ps, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_saldo)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      dtick = 10
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  cc_anfnp_ps[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rec = colDef(
      name = "Receitas (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_desp = colDef(
      name = "Despesas (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo = colDef(
      name = "Saldo CC (ativos não financeiros não produzidos - passes de atletas) (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 3) Conta financeira {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A **conta financeira (CF)** registra fluxos decorrentes de transações com ativos e passivos financeiros entre residentes e não residentes, sendo dividida em cinco grupos funcionais: investimento direto, investimentos em carteira, derivativos financeiros (exclusive reservas) e opções de compra de ações por parte de empregados, outros investimentos e ativos de reserva. Cada conta é desdobrada em ativos e passivos, ou seja, há um item destinado a registrar fluxos envolvendo ativos externos detidos por residentes no Brasil e outro para registrar a emissão de passivos por residentes cujo credor é não residente.

<br>

Obs.: Valores negativos indicam entrada líquida de recursos no país.

<br>

Os dados como % do PIB referem-se ao acumulado em 12 meses.

<br>

**Fonte**: Códigos 22863 (conta financeira) e 4385 (PIB em dólares) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Conta financeira
```{r}
plot_ly(
  data = cf, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

### % do PIB
```{r}
plot_ly(
  data = cf, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", cf_pib)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "%",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  cf[, -4],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor = colDef(
      name = "Saldo CF",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    cf_pib = colDef(
      name = "% do PIB",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 3.1) Investimento direto {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

**Investimento direto no exterior (IDE)** registra os fluxos financeiros de ativos externos detidos por residentes brasileiros, nos quais os agentes institucionais possuem uma relação de controle ou forte poder de influência entre si. Divide-se em dois instrumentos principais: participação no capital e operações intercompanhia.

**Investimento direto no país (IDP)** registra os fluxos financeiros de passivos emitidos por residentes brasileiros para credores não residentes, nos quais os agentes institucionais possuem uma relação de controle ou forte poder de influência entre si. Divide-se em dois instrumentos principais: participação no capital e operações intercompanhia.

**Investimento direto (ID)** representa o fluxo líquido entre os investimentos diretos no exterior (ativos) e os investimentos diretos no país (passivos).

<br>

Obs.: Valores negativos indicam entrada líquida de recursos no país.

<br>

<br>

Os dados como % do PIB referem-se ao acumulado em 12 meses.

<br>

**Fonte**: Códigos 22865 (IDE), 22885 (IDP), 22864 (saldo ID) e 4385 (PIB em dólares) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### IDE (1)
```{r}
plot_ly(
  data = inv_dir, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_ide)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### IDP (2)
```{r}
plot_ly(
  data = inv_dir, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_idp)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### Saldo ID (3) (1-2)
```{r}
plot_ly(
  data = inv_dir, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_id)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### IDE % do PIB
```{r}
plot_ly(
  data = inv_dir, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", ide_pib)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

### IDP % do PIB
```{r}
plot_ly(
  data = inv_dir, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", idp_pib)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

### ID % do PIB
```{r}
plot_ly(
  data = inv_dir, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", id_pib)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  inv_dir[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_ide = colDef(
      name = "IDE (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_idp = colDef(
      name = "IDP (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_id = colDef(
      name = "Saldo ID (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    ide_pib = colDef(
      name = "IDE % do PIB",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    idp_pib = colDef(
      name = "IDP % do PIB",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    id_pib = colDef(
      name = "ID % do PIB",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 3.2) Investimento em carteira {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=300}
-----------------------------------------------------------------------

**Investimento em carteira** é dividido em ativos e passivos. **Investimento em carteira ativos** são definidos como transações e posições realizadas através de títulos de dívida ou de capital, distintos dos incluídos em investimento direto ou ativos de reserva. São registrados fluxos constituídos pela emissão de títulos de crédito comumente negociados em mercados secundários. Divide-se em dois instrumentos principais: ações e cotas em fundos, e título de renda fixa. Ações e cotas em fundos compreendem todos os instrumentos e registros que reconhecem, uma vez liquidados todos os direitos dos credores, os direitos frente ao valor residual da empresa. Os títulos de participação no capital englobam as ações negociadas ou não em bolsa e outros tipos de participação no capital. Títulos de renda fixa são os instrumentos de dívida que exigem pagamento de juros e/ou principal em algum momento futuro. Os instrumentos de dívida que sensibilizam essa conta são aqueles que podem ser negociados em mercados secundários. Os papéis com prazo de vencimento original inferior a um ano são considerados de curto prazo, e os com vencimento original superior a esse prazo, de longo prazo. **Investimento em carteira passivos** são definidos como transações e posições realizadas através de títulos de dívida ou de capital, distintos dos incluídos em investimento direto. São registrados fluxos constituídos pela emissão de títulos de crédito comumente negociados em mercados secundários. Divide-se em dois instrumentos principais: ações e cotas em fundos e título de renda fixa. Ações e cotas em fundos compreendem todos os instrumentos e registros que reconhecem, uma vez liquidados todos os direitos dos credores, os direitos frente ao valor residual da empresa. Os títulos de participação no capital englobam as ações negociadas ou não em bolsa e outros tipos de participação no capital. Títulos de renda fixa são os instrumentos de dívida exigem pagamento de juros e/ou principal em algum momento futuro. Os instrumentos de dívida que sensibilizam essa conta são aqueles que podem ser negociados em mercados secundários. Os papéis com prazo de vencimento original inferior a um ano são considerados de curto prazo, e os com vencimento original superior a esse prazo, de longo prazo.

<br>

Obs.: Valores negativos indicam entrada líquida de recursos no país.

<br>

**Fonte**: Código 22905 do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=350}  {.tabset}
-----------------------------------------------------------------------

### CF (investimento em carteira)
```{r}
plot_ly(
  data = inv_cart, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 5
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=350}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  inv_cart[, -3],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor = colDef(
      name = "CF (investimento em carteira)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 3.3) Outros investimentos {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

**Outros investimentos** é uma conta residual da conta financeira, dividida em ativos e passivos. Transações não incluídas em investimento direto, de carteira, derivativos financeiros ou ativos de reserva são registradas como outros investimentos, a exemplo de empréstimos, financiamento, créditos comerciais e depósitos. Os fluxos ativos e passivos se classificam principalmente por categorias dos instrumentos, por setores institucionais do residente e por prazo de vencimento.

<br>

Obs.: Valores negativos indicam entrada líquida de recursos no país.

<br>

**Fonte**: Códigos 22970 (ativos), 22971 (passivos) e 22969 (saldo outros investimentos) do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Ativos (1)
```{r}
plot_ly(
  data = outros_inv, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_outros_inv_ativos)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### Passivos (2)
```{r}
plot_ly(
  data = outros_inv, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_outros_inv_passivos)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### Saldo CF (outros investimentos) (3) (1-2)
```{r}
plot_ly(
  data = outros_inv, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_outros_inv_liq)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  outros_inv[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_outros_inv_ativos = colDef(
      name = "Ativos (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_outros_inv_passivos = colDef(
      name = "Passivos (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_outros_inv_liq = colDef(
      name = "Saldo outros investimentos (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 3.4) Ativos de reserva {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

Os **ativos de reserva** compreendem as operações com os ativos externos que estão à disposição imediata e sob controle da autoridade monetária para satisfazer suas necessidades de financiamento de balanço de pagamentos, intervir no mercado de cambio e outros fins conexos. Ativos de reservas é dividido em **ouro monetário, direitos especiais de saque (DES), posição de reserva no FMI, outros ativos de reserva e demais ativos**.

<br>

**Fonte**: Código 23043 do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Ativos de reserva
```{r}
plot_ly(
  data = ativ_res, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 10
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  ativ_res[, -3],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor = colDef(
      name = "Ativos de reserva",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# 4) Erros e omissões {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

As partidas a crédito e a débito lançadas no balanço de pagamentos provêm de diversas fontes de informações, gerando, na prática, total líquido diferente de zero. A principal razão está nas discrepâncias temporais das diversas origens dos dados utilizados. Com isso, torna-se necessário o lançamento de partida equilibradora para o balanceamento das contas. Os **erros e omissões(EOs)** se prestam, portanto, a compensar toda sobrestimação ou subestimação dos componentes registrados. É uma conta residual, portanto.

<br>

**Fonte**: Código 23060 do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Gráfico
```{r}
plot_ly(
  data = eo, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(
      title = "US$ bilhões",
      tick0 = 0,
      dtick = 1
    )
  ) %>%
  rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  eo[, -3],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor = colDef(
      name = "Erros e omissões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Termos de troca {data-navmenu="Balanço de pagamentos"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

Os **termos de troca** são definidos como a relação entre os preços das exportações do país (PX) e os das suas importações (PM).

<br>

**Fonte:** Fundação Centro de Estudos do Comércio Exterior (FUNCEX).

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Termos de troca
```{r}
plot_ly(
  data = tt, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_tt)),
  type = "scatter",
  mode = "line"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "Média 2018 = 100")
  ) %>% rangeslider(thickness = 0.05)
```

### Var. mensal (%)
```{r}
plot_ly(
  data = tt, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", var_mg_tt)),
  type = "scatter",
  mode = "line"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

### Var. em 12 meses (%)
```{r}
plot_ly(
  data = tt, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", var_12m_tt)),
  type = "scatter",
  mode = "line"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  tt[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_tt = colDef(
      name = "Termos de troca",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg_tt = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m_tt = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Índice de commodities - Brasil {data-navmenu="Commodities"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------
 	
O **Índice de commodities - Brasil** (IC-Br) exprime a média mensal ponderada dos preços em reais e em dólares das commodities relevantes para a dinâmica da inflação brasileira. O IC-Br agrega de forma ponderada os indicadores relativos aos segmentos Agropecuária (série 27575), Metal (série 27576) e Energia (série 27577). Dez/2005 = 100.

<br> 

Tomando como base o mês de janeiro de 2024, os pesos para cada commodity no índice são os seguintes:

Boi gordo: 21,54%, Brent: 12,35%, Açúcar: 7,37%, Milho: 6,27%, Óleo de soja: 6,17%, Algodão: 6,11%, Suco de laranja: 4,69%, Café: 4,25%, Estanho: 4,06%, Arroz: 3,82%, Cacau: 3,25%, Alumínio: 3,24%, Carvão: 2,95%, Trigo: 2,18%, Prata: 2,11%, Zinco: 2,10%, Gás natural: 2,05%, Cobre: 1,60%, Porco: 1,34%, Chumbo: 1,12%, Minério de ferro: 0,52%, Níquel: 0,50%, Ouro: 0,42%.

<br>

**Fonte:** Códigos 27574 (real) e 29042 (dólar) no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### IC-Br (R$ e US$)
```{r}
plot_ly() %>%
  add_trace(
    data = commod,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br (R$)"
  ) %>%
  add_trace(
    data = commod,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br (US$)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "Dez/2005 = 100", autorange = TRUE),
    legend = list(
      orientation = "h",  # horizontal
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Var. mensal (%)
```{r}
plot_ly() %>%
  add_trace(
    data = commod,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs_mg)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br (R$)"
  ) %>%
  add_trace(
    data = commod,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd_mg)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br (US$)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",  # horizontal
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Var. em 12 meses (%)
```{r}
plot_ly() %>%
  add_trace(
    data = commod,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs_12m)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br (R$)"
  ) %>%
  add_trace(
    data = commod,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd_12m)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br (US$)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",  # horizontal
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  commod[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs = colDef(
      name = "IC-Br (R$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd = colDef(
      name = "IC-Br (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Índice de commodities - IC-Br Agropecuária {data-navmenu="Commodities"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------
 	
O **IC-Br Agropecuária** é um subíndice do IC-Br (série 27574). É uma média mensal ponderada dos preços em reais de boi gordo, algodão, óleo de soja, trigo, açúcar, milho, café, arroz, porco, suco de laranja e cacau. Dez/2005 = 100.

**Fonte:** Códigos 27575 (real) e 29041 (dólar) no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### IC-Br Agropecuária (R$ e US$)
```{r}
plot_ly() %>%
  add_trace(
    data = commod_agrop,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Agropecuária (R$)"
  ) %>%
  add_trace(
    data = commod_agrop,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Agropecuária (US$)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "Dez/2005 = 100", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Var. mensal (%)
```{r}
plot_ly() %>%
  add_trace(
    data = commod_agrop,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs_mg)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Agropecuária (R$)"
  ) %>%
  add_trace(
    data = commod_agrop,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd_mg)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Agropecuária (US$)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Var. em 12 meses (%)
```{r}
plot_ly() %>%
  add_trace(
    data = commod_agrop,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs_12m)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Agropecuária (R$)"
  ) %>%
  add_trace(
    data = commod_agrop,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd_12m)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Agropecuária (US$)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  commod_agrop[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs = colDef(
      name = "IC-Br Agropecuária (R$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd = colDef(
      name = "IC-Br Agropecuária (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Índice de commodities - IC-Br Energia {data-navmenu="Commodities"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------
 	
O **IC-Br Energia** é um subíndice do IC-Br (série 27574). É uma média mensal ponderada dos preços em reais de petróleo Brent, gás natural e carvão. Dez/2005 = 100.

**Fonte:** Códigos 27577 (real) e 29039 (dólar) no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### IC-Br Energia (R$ e US$)
```{r}
plot_ly() %>%
  add_trace(
    data = commod_energia,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Energia (R$)"
  ) %>%
  add_trace(
    data = commod_metal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Energia (US$)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "Dez/2005 = 100", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Var. mensal (%)
```{r}
plot_ly() %>%
  add_trace(
    data = commod_energia,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs_mg)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Energia (R$)"
  ) %>%
  add_trace(
    data = commod_metal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd_mg)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Energia (US$)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Var. em 12 meses (%)
```{r}
plot_ly() %>%
  add_trace(
    data = commod_energia,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs_12m)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Energia (R$)"
  ) %>%
  add_trace(
    data = commod_energia,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd_12m)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Energia (US$)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  commod_energia[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs = colDef(
      name = "IC-Br Energia (R$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd = colDef(
      name = "IC-Br Energia (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Índice de commodities - IC-Br Metal {data-navmenu="Commodities"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------
 	
O **IC-Br Metal** é um subíndice do IC-Br (série 27574). É uma média mensal ponderada dos preços em reais de alumínio, minério de ferro, cobre, estanho, zinco, chumbo, níquel, ouro e prata. Dez/2005 = 100.

**Fonte:** Códigos 27576 (real) e 29040 (dólar) no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### IC-Br Metal (R$ e US$)
```{r}
plot_ly() %>%
  add_trace(
    data = commod_metal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Metal (R$)"
  ) %>%
  add_trace(
    data = commod_metal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Metal (US$)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "Dez/2005 = 100", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Var. mensal (%)
```{r}
plot_ly() %>%
  add_trace(
    data = commod_metal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs_mg)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Metal (R$)"
  ) %>%
  add_trace(
    data = commod_metal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd_mg)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Metal (US$)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Var. em 12 meses (%)
```{r}
plot_ly() %>%
  add_trace(
    data = commod_metal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rs_12m)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Metal (R$)"
  ) %>%
  add_trace(
    data = commod_metal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_usd_12m)),
    type = "scatter",
    mode = "lines",
    name = "IC-Br Metal (US$)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  commod_metal[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs = colDef(
      name = "IC-Br Metal (R$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rs_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd = colDef(
      name = "IC-Br Metal (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Café {data-navmenu="Commodities"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------
**Global price of coffee (other mild arabica and robustas)**. Value represents the benchmark prices which are representative of the global market. They are determined by the largest exporter of a given commodity. Prices are period averages in nominal U.S. dollars (cents per pound).

<br>

**Fonte:** Federal Reserve Economic Data (FRED).


Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Cotação
```{r}
plot_ly() %>%
  add_trace(
    data = cafe,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_arab)),
    type = "scatter",
    mode = "lines",
    name = "Other mild arabica"
  ) %>%
  add_trace(
    data = cafe,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_rob)),
    type = "scatter",
    mode = "lines",
    name = "Robustas"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "US$", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Var. mensal (%)
```{r}
plot_ly() %>%
  add_trace(
    data = cafe,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_mg_arab)),
    type = "scatter",
    mode = "lines",
    name = "Other mild arabica"
  ) %>%
  add_trace(
    data = cafe,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_mg_rob)),
    type = "scatter",
    mode = "lines",
    name = "Robustas"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Var. em 12 meses (%)
```{r}
plot_ly() %>%
  add_trace(
    data = cafe,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_12m_arab)),
    type = "scatter",
    mode = "lines",
    name = "Other nukd arabica"
  ) %>%
  add_trace(
    data = cafe,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_12m_rob)),
    type = "scatter",
    mode = "lines",
    name = "Robustas"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  cafe[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Data",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_arab = colDef(
      name = "Other mild arabica (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg_arab = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m_arab = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_rob = colDef(
      name = "Robustas (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg_rob = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m_rob = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )   
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Minério de ferro {data-navmenu="Commodities"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------
**Global price of iron ore**. Value represents the benchmark prices which are representative of the global market. They are determined by the largest exporter of a given commodity. Prices are period averages in nominal U.S. dollars.

<br>

**Fonte:** Federal Reserve Economic Data (FRED).


Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Cotação
```{r}
plot_ly(
  data = miner_ferro, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$")
  ) %>% rangeslider(thickness = 0.05)
```

### Var. mensal (%)
```{r}
plot_ly(
  data = miner_ferro, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", var_mg)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

### Var. em 12 meses (%)
```{r}
plot_ly(
  data = miner_ferro, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", var_12m)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  miner_ferro[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Data",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor = colDef(
      name = "Minério de ferro (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ) 
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Petróleo bruto {data-navmenu="Commodities"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------
Produzido no Mar do Norte (Europa), **Brent** é uma classe de petróleo bruto que serve como benchmark para o preço internacional de diferentes tipos de petróleo.

Produzido no Texas e no sul de Oklahoma, **West Texas Intermediate (WTI)** é uma classe de petróleo bruto que serve como benchmark para o preço internacional de diferentes tipos de petróleo.

Os preços por barris de ambos os tipos de petróleo são _free on board_ (FOB), isto é, desconsideram despesas com fretes e seguros.

As cotações mensais são as médias das cotações diárias.

<br>

**Fonte:** Energy Information Administration (EIA) via Ipeadata.


Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Cotação diária
```{r}
plot_ly() %>%
  add_trace(
    data = petroleo,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_brent)),
    type = "scatter",
    mode = "lines",
    name = "Brent"
  ) %>%
  add_trace(
    data = petroleo,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_wti)),
    type = "scatter",
    mode = "lines",
    name = "WTI"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "US$", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Cotação Mensal
```{r}
plot_ly() %>%
  add_trace(
    data = petroleo_mensal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_brent)),
    type = "scatter",
    mode = "lines",
    name = "Brent"
  ) %>%
  add_trace(
    data = petroleo_mensal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_wti)),
    type = "scatter",
    mode = "lines",
    name = "WTI"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "US$", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Var. Mensal (%)
```{r}
plot_ly() %>%
  add_trace(
    data = petroleo_mensal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_mg_brent)),
    type = "scatter",
    mode = "lines",
    name = "Brent"
  ) %>%
  add_trace(
    data = petroleo_mensal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_mg_wti)),
    type = "scatter",
    mode = "lines",
    name = "WTI"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "US$", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Var. em 12 meses (%)
```{r}
plot_ly() %>%
  add_trace(
    data = petroleo_mensal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_12m_brent)),
    type = "scatter",
    mode = "lines",
    name = "Brent"
  ) %>%
  add_trace(
    data = petroleo_mensal,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_12m_wti)),
    type = "scatter",
    mode = "lines",
    name = "WTI"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "US$", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```


Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese (cotação diária)
```{r}
reactable(
  petroleo[, -6],
  columns = list(
    data_fmt = colDef(
      name = "Data",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_brent = colDef(
      name = "Brent (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg_brent = colDef(
      name = "Variação diária (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_wti = colDef(
      name = "WTI (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg_wti = colDef(
      name = "Variação diária (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )    
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Quadro-síntese (cotação mensal)
```{r}
reactable(
  petroleo_mensal[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_brent = colDef(
      name = "Brent (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg_brent = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m_brent = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_wti = colDef(
      name = "WTI (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg_wti = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m_wti = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Soja em grãos {data-navmenu="Commodities"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------
Preço dos contratos futuros da soja negociados na bolsa de Chicago (Chicago Board of Trade - CBOT), contrato futuro mais próximo (primeiro vencimento), tipo padrão No. 2 yellow, cotado em **dólares por tonelada métrica**.

<br>

**Fonte:** International Financial Statistics (FMI/IFS) via Ipeadata.


Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Cotação
```{r}
plot_ly(
  data = soja, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$")
  ) %>% rangeslider(thickness = 0.05)
```

### Var. mensal (%)
```{r}
plot_ly(
  data = soja, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", var_mg)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

### Var. em 12 meses (%)
```{r}
plot_ly(
  data = soja, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", var_12m)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  soja[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Data",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor = colDef(
      name = "Soja em grãos (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Trigo {data-navmenu="Commodities"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

**Global price of wheat**. Value represents the benchmark prices which are representative of the global market. They are determined by the largest exporter of a given commodity. Prices are period averages in nominal U.S. dollars per metric ton.

<br>

**Fonte:** Federal Reserve Economic Data (FRED).


Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Cotação
```{r}
plot_ly(
  data = trigo, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$")
  ) %>% rangeslider(thickness = 0.05)
```

### Var. mensal (%)
```{r}
plot_ly(
  data = trigo, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", var_mg)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

### Var. em 12 meses (%)
```{r}
plot_ly(
  data = trigo, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", var_12m)),
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%",
                       dtick = 20)
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  soja[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Data",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor = colDef(
      name = "Trigo (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Dívida externa bruta {data-navmenu="Fiscal"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A série trimestral **dívida externa bruta** compreende o total apurado em determinada data dos débitos contratuais efetivamente desembolsados e ainda não quitados, devidos por residentes de uma economia aos não residentes, quando houver a obrigatoriedade de pagamento de principal e/ou juros em algum(s) ponto(s) no futuro. O valor de mercado da dívida externa bruta impacta os valores a partir de dezembro de 2011 e abrange os títulos de dívida emitidos pela República no mercado internacional, ajustados segundo seu preço de mercado, e os demais instrumentos e emissores de dívida externa, apurados em valor nominal.

<br>

**Fonte:** Código 3684 no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = div_bruta, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_usd)),
  type = "scatter",
  mode = "lines",
  fill = "tozeroy"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "% bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### % do PIB
```{r}
plot_ly(
  data = div_bruta, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_pib)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "% PIB")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  div_bruta[, -4],
  columns = list(
    data_fmt = colDef(
      name = "Trimestre",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_pib = colDef(
      name = "% PIB",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Dívida externa líquida {data-navmenu="Fiscal"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A série trimestral **dívida externa líquida** refere-se à dívida externa bruta excluindo do cálculo os ativos de reservas, os haveres de bancos comerciais e os créditos brasileiros no exterior.

<br>

**Fonte:** Código 3685 no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = div_liq, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_usd)),
  type = "scatter",
  mode = "lines",
  fill = "tozeroy"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### % do PIB
```{r}
plot_ly(
  data = div_liq, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_pib)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "% PIB")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  div_liq[, -4],
  columns = list(
    data_fmt = colDef(
      name = "Trimestre",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_usd = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_pib = colDef(
      name = "% PIB",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Dívida líquida do setor público {data-navmenu="Fiscal"}

# Resultado nominal {data-navmenu="Fiscal"}

Column {.sidebar} {data-width=80}
-----------------------------------------------------------------------

Column {data-width=920}  {.tabset}
-----------------------------------------------------------------------

### Governo Central (GF + BC)

### Governo Central (Gráfico)

### Governo Federal (GF)

### Banco Central (BC)

### Governos estaduais e municipais

### Governos estaduais

### Governos municipais

### Empresas Estatais

### Empresas Estatais Federais

### Empresas Estatais estaduais

### Empresas Estatais municipais

### Setor público consolidado

### Setor público consolidado (Gráfico)


# Juros nominais {data-navmenu="Fiscal"}

Column {.sidebar} {data-width=80}
-----------------------------------------------------------------------

Column {data-width=920}  {.tabset}
-----------------------------------------------------------------------

### Governo Central (GF + BC)

### Governo Central (Gráfico)

### Governo Federal (GF)

### Banco Central (BC)

### Governos estaduais e municipais

### Governos estaduais

### Governos municipais

### Empresas Estatais

### Empresas Estatais Federais

### Empresas Estatais estaduais

### Empresas Estatais municipais

### Setor público consolidado

### Setor público consolidado (Gráfico)


# Resultado primário {data-navmenu="Fiscal"}

Column {.sidebar} {data-width=80}
-----------------------------------------------------------------------

Column {data-width=920}  {.tabset}
-----------------------------------------------------------------------

### Governo Central (GF + BC)

### Governo Central (Gráfico)

### Governo Federal (GF)

### Banco Central (BC)

### Governos estaduais e municipais

### Governos estaduais

### Governos municipais

### Empresas Estatais

### Empresas Estatais Federais

### Empresas Estatais estaduais

### Empresas Estatais municipais

### Setor público consolidado

### Setor público consolidado (Gráfico)

### Governo Federal sem INSS

### INSS


# Índice de Preços ao Consumidor Amplo (IPCA) {data-navmenu="Inflação"}

Column {.sidebar} {data-width=80}
-----------------------------------------------------------------------

O **Índice de Preços ao Consumidor Amplo (IPCA)** tem como unidade de coleta estabelecimentos comerciais e de prestação de serviços, concessionária de serviços públicos e intenet e sua coleta estende-se, em geral, do dia 01 a 30 do mês de referência. Atualmente, a população-objetivo do IPCA abrange as **famílias com rendimentos de 1 a 40 salários mínimos**, qualquer que seja a fonte, residentes nas áreas urbanas das regiões de abrangência do Sistema Nacional de Índices de Preços ao Consumidor (SNIPC), as quais são: regiões metropolitanas de Belém, Fortaleza, Recife, Salvador, Belo Horizonte, Vitória, Rio de Janeiro, São Paulo, Curitiba, Porto Alegre, além do Distrito Federal e dos municípios de Goiânia, Campo Grande, Rio Branco, São Luís e Aracaju.

<br>

**Fonte:** Instituto Brasileiro de Geografia e Estatística (IBGE).

Column {data-width=920}  {.tabset}
-----------------------------------------------------------------------

### Tx. M/M-1 (Gráfico)
```{r}
plot_ly(
  data = ipca, 
  x = ~data, 
  y = ~as.numeric(gsub(",", ".", `IPCA - Variação mensal`)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

### Tx. M/M-1 (Grupos) (%)
```{r}
reactable(
  ipca_grupos_mg[, -12],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Índice geral` = colDef(
      name = "Índice geral",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `1.Alimentação e bebidas` = colDef(
      name = "1. Alimentação e bebidas",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `2.Habitação` = colDef(
      name = "2. Habitação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.Artigos de residência` = colDef(
      name = "3. Artigos de residência",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `4.Vestuário` = colDef(
      name = "4. Vestuário",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `5.Transportes` = colDef(
      name = "5. Transportes",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `6.Saúde e cuidados pessoais` = colDef(
      name = "6. Saúde e cuidados pessoais",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `7.Despesas pessoais` = colDef(
      name = "7. Despesas pessoais",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `8.Educação` = colDef(
      name = "8. Educação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `9.Comunicação` = colDef(
      name = "9. Comunicação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Tx. acum. no ano (Gráfico)
```{r}
plot_ly(
  data = ipca, 
  x = ~data, 
  y = ~as.numeric(gsub(",", ".", `IPCA - Variação acumulada no ano`)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

### Tx. acum. no ano (Grupos) (%)
```{r}
reactable(
  ipca_grupos_acum_ano[, -12],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Índice geral` = colDef(
      name = "Índice geral",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `1.Alimentação e bebidas` = colDef(
      name = "1. Alimentação e bebidas",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `2.Habitação` = colDef(
      name = "2. Habitação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.Artigos de residência` = colDef(
      name = "3. Artigos de residência",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `4.Vestuário` = colDef(
      name = "4. Vestuário",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `5.Transportes` = colDef(
      name = "5. Transportes",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `6.Saúde e cuidados pessoais` = colDef(
      name = "6. Saúde e cuidados pessoais",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `7.Despesas pessoais` = colDef(
      name = "7. Despesas pessoais",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `8.Educação` = colDef(
      name = "8. Educação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `9.Comunicação` = colDef(
      name = "9. Comunicação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Tx. acum. em 12 meses (Gráfico)
```{r}
plot_ly(
  data = ipca, 
  x = ~data, 
  y = ~as.numeric(gsub(",", ".", `IPCA - Variação acumulada em 12 meses`)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

### Tx. acum. em 12 meses (Grupos) (%)
```{r}
reactable(
  ipca_grupos_acum_12m[, -12],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Índice geral` = colDef(
      name = "Índice geral",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `1.Alimentação e bebidas` = colDef(
      name = "1. Alimentação e bebidas",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `2.Habitação` = colDef(
      name = "2. Habitação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.Artigos de residência` = colDef(
      name = "3. Artigos de residência",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `4.Vestuário` = colDef(
      name = "4. Vestuário",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `5.Transportes` = colDef(
      name = "5. Transportes",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `6.Saúde e cuidados pessoais` = colDef(
      name = "6. Saúde e cuidados pessoais",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `7.Despesas pessoais` = colDef(
      name = "7. Despesas pessoais",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `8.Educação` = colDef(
      name = "8. Educação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `9.Comunicação` = colDef(
      name = "9. Comunicação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Peso mensal (Grupos) (%)
```{r}
reactable(
  ipca_grupos_peso[, -12],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Índice geral` = colDef(
      name = "Índice geral",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `1.Alimentação e bebidas` = colDef(
      name = "1. Alimentação e bebidas",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `2.Habitação` = colDef(
      name = "2. Habitação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.Artigos de residência` = colDef(
      name = "3. Artigos de residência",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `4.Vestuário` = colDef(
      name = "4. Vestuário",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `5.Transportes` = colDef(
      name = "5. Transportes",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `6.Saúde e cuidados pessoais` = colDef(
      name = "6. Saúde e cuidados pessoais",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `7.Despesas pessoais` = colDef(
      name = "7. Despesas pessoais",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `8.Educação` = colDef(
      name = "8. Educação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `9.Comunicação` = colDef(
      name = "9. Comunicação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Índice de Preços ao Consumidor - Disponibilidade interna (IPC-DI) {data-navmenu="Inflação"}

# Índice de Preços ao Produtor (IPP) {data-navmenu="Inflação"}

Column {.sidebar} {data-width=120}
-----------------------------------------------------------------------

O **Índice de Preços ao Produtor (IPP)**, cujo âmbito são as indústrias extrativas e de transformação, tem como principal objetivo mensurar a mudança média dos preços de venda recebidos pelos produtores domésticos de bens e serviços, bem como sua evolução ao longo do tempo, sinalizando as tendências inflacionárias de curto prazo no país. Constitui, assim, um indicador essencial para o acompanhamento macroeconômico e, por conseguinte, um valioso instrumento analítico para tomadores de decisão, públicos ou privados.

O IPP investiga, em pouco mais de 1.700 empresas, os preços recebidos pelo produtor, isentos de impostos, tarifas e fretes e definidos segundo as práticas comerciais mais usuais. Os produtos coletados são especificados em detalhes (aspectos físicos e de transação), garantindo, dessa forma, que sejam comparados produtos homogêneos ao longo do tempo. Com isso, coletam-se cerca de 5.000 preços mensalmente.

<br>

**Fonte:** Instituto Brasileiro de Geografia e Estatística (IBGE).

Column {data-width=880}  {.tabset}
-----------------------------------------------------------------------

### Tx. M/M-1 (Gráfico)
```{r}
plot_ly() %>%
  add_trace(
    data = ipp_mg,
    x = ~data,
    y = ~as.numeric(gsub(",", ".", `Indústria Geral`)),
    type = "scatter",
    mode = "lines",
    name = "Indústria geral"
  ) %>%
  add_trace(
    data = ipp_mg,
    x = ~data,
    y = ~as.numeric(gsub(",", ".", `B Indústrias Extrativas`)),
    type = "scatter",
    mode = "lines",
    name = "Indústrias extrativas"
  ) %>%
  add_trace(
    data = ipp_mg,
    x = ~data,
    y = ~as.numeric(gsub(",", ".", `C Indústrias de Transformação`)),
    type = "scatter",
    mode = "lines",
    name = "Indústrias de transformação"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Tx. M/M-1 (Seções e atividades) (%)
```{r}
reactable(
  ipp_mg[, -28],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Indústria Geral` = colDef(
      name = "Índice geral",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `B Indústrias Extrativas` = colDef(
      name = "Indústrias extrativas",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `C Indústrias de Transformação` = colDef(
      name = "Indústrias de transformação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `10 FABRICAÇÃO DE PRODUTOS ALIMENTÍCIOS` = colDef(
      name = "Alimentos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `11 FABRICAÇÃO DE BEBIDAS` = colDef(
      name = "Bebidas",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `12 FABRICAÇÃO DE PRODUTOS DO FUMO` = colDef(
      name = "Fumo",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `13 FABRICAÇÃO DE PRODUTOS TÊXTEIS` = colDef(
      name = "Têxtil",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `14 CONFECÇÃO DE ARTIGOS DO VESTUÁRIO E ACESSÓRIOS` = colDef(
      name = "Vestuário",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `15 PREPARAÇÃO DE COUROS E FABRICAÇÃO DE ARTEFATOS DE COURO, ARTIGOS PARA VIAGEM E CALÇADOS` = colDef(
      name = "Calçados e produtos de couro",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `16 FABRICAÇÃO DE PRODUTOS DE MADEIRA` = colDef(
      name = "Madeira",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `17 FABRICAÇÃO DE CELULOSE, PAPEL E PRODUTOS DE PAPEL` = colDef(
      name = "Papel e celulose",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `18 IMPRESSÃO E REPRODUÇÃO DE GRAVAÇÕES` = colDef(
      name = "Impressão e reprodução de gravações",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `19 FABRICAÇÃO DE COQUE, DE PRODUTOS DERIVADOS DO PETRÓLEO E DE BIOCOMBUSTÍVEIS` = colDef(
      name = "Refino de petróleo e biocombustíveis",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `20B FABRICAÇÃO DE SABÕES, DETERGENTES, PRODUTOS DE LIMPEZA, COSMÉTICOS, PRODUTOS DE PERFUMARIA E DE HIGIENE PESSOAL` = colDef(
      name = "Perfumaria, sabões e produtos de limpeza",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `20C FABRICAÇÃO DE OUTROS PRODUTOS QUÍMICOS` = colDef(
      name = "Outros produtos químicos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `21 FABRICAÇÃO DE PRODUTOS FARMOQUÍMICOS E FARMACÊUTICOS` = colDef(
      name = "Farmacêutica",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `22 FABRICAÇÃO DE PRODUTOS DE BORRACHA E DE MATERIAL PLÁSTICO` = colDef(
      name = "Borracha e plástico",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `23 FABRICAÇÃO DE PRODUTOS DE MINERAIS NÃO METÁLICOS` = colDef(
      name = "Minerais não metálicos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `24 METALURGIA` = colDef(
      name = "Metalurgia",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `25 FABRICAÇÃO DE PRODUTOS DE METAL, EXCETO MÁQUINAS E EQUIPAMENTOS` = colDef(
      name = "Produtos de metal",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `26 FABRICAÇÃO DE EQUIPAMENTOS DE INFORMÁTICA, PRODUTOS ELETRÔNICOS E ÓPTICOS` = colDef(
      name = "Equipamentos de informática, produtos eletrônicos e ópticos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `27 FABRICAÇÃO DE MÁQUINAS, APARELHOS E MATERIAIS ELÉTRICOS` = colDef(
      name = "Máquinas, aparelhos e materiais elétricos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `28 FABRICAÇÃO DE MÁQUINAS E EQUIPAMENTOS` = colDef(
      name = "Máquinas e equipamentos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `29 FABRICAÇÃO DE VEÍCULOS AUTOMOTORES, REBOQUES E CARROCERIAS` = colDef(
      name = "Veículos automotores",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `30 FABRICAÇÃO DE OUTROS EQUIPAMENTOS DE TRANSPORTE, EXCETO VEÍCULOS AUTOMOTORES` = colDef(
      name = "Outros equipamentos de transporte",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `31 FABRICAÇÃO DE MÓVEIS` = colDef(
      name = "Móveis",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Tx. acum. no ano (Gráfico)
```{r}
```{r}
plot_ly() %>%
  add_trace(
    data = ipp_acum_ano,
    x = ~data,
    y = ~as.numeric(gsub(",", ".", `Indústria Geral`)),
    type = "scatter",
    mode = "lines",
    name = "Indústria geral"
  ) %>%
  add_trace(
    data = ipp_acum_ano,
    x = ~data,
    y = ~as.numeric(gsub(",", ".", `B Indústrias Extrativas`)),
    type = "scatter",
    mode = "lines",
    name = "Indústrias extrativas"
  ) %>%
  add_trace(
    data = ipp_acum_ano,
    x = ~data,
    y = ~as.numeric(gsub(",", ".", `C Indústrias de Transformação`)),
    type = "scatter",
    mode = "lines",
    name = "Indústrias de transformação"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Tx. acum. no ano (seções e atividades) (%)
```{r}
reactable(
  ipp_acum_ano[, -28],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Indústria Geral` = colDef(
      name = "Índice geral",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `B Indústrias Extrativas` = colDef(
      name = "Indústrias extrativas",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `C Indústrias de Transformação` = colDef(
      name = "Indústrias de transformação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `10 FABRICAÇÃO DE PRODUTOS ALIMENTÍCIOS` = colDef(
      name = "Alimentos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `11 FABRICAÇÃO DE BEBIDAS` = colDef(
      name = "Bebidas",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `12 FABRICAÇÃO DE PRODUTOS DO FUMO` = colDef(
      name = "Fumo",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `13 FABRICAÇÃO DE PRODUTOS TÊXTEIS` = colDef(
      name = "Têxtil",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `14 CONFECÇÃO DE ARTIGOS DO VESTUÁRIO E ACESSÓRIOS` = colDef(
      name = "Vestuário",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `15 PREPARAÇÃO DE COUROS E FABRICAÇÃO DE ARTEFATOS DE COURO, ARTIGOS PARA VIAGEM E CALÇADOS` = colDef(
      name = "Calçados e produtos de couro",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `16 FABRICAÇÃO DE PRODUTOS DE MADEIRA` = colDef(
      name = "Madeira",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `17 FABRICAÇÃO DE CELULOSE, PAPEL E PRODUTOS DE PAPEL` = colDef(
      name = "Papel e celulose",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `18 IMPRESSÃO E REPRODUÇÃO DE GRAVAÇÕES` = colDef(
      name = "Impressão e reprodução de gravações",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `19 FABRICAÇÃO DE COQUE, DE PRODUTOS DERIVADOS DO PETRÓLEO E DE BIOCOMBUSTÍVEIS` = colDef(
      name = "Refino de petróleo e biocombustíveis",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `20B FABRICAÇÃO DE SABÕES, DETERGENTES, PRODUTOS DE LIMPEZA, COSMÉTICOS, PRODUTOS DE PERFUMARIA E DE HIGIENE PESSOAL` = colDef(
      name = "Perfumaria, sabões e produtos de limpeza",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `20C FABRICAÇÃO DE OUTROS PRODUTOS QUÍMICOS` = colDef(
      name = "Outros produtos químicos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `21 FABRICAÇÃO DE PRODUTOS FARMOQUÍMICOS E FARMACÊUTICOS` = colDef(
      name = "Farmacêutica",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `22 FABRICAÇÃO DE PRODUTOS DE BORRACHA E DE MATERIAL PLÁSTICO` = colDef(
      name = "Borracha e plástico",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `23 FABRICAÇÃO DE PRODUTOS DE MINERAIS NÃO METÁLICOS` = colDef(
      name = "Minerais não metálicos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `24 METALURGIA` = colDef(
      name = "Metalurgia",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `25 FABRICAÇÃO DE PRODUTOS DE METAL, EXCETO MÁQUINAS E EQUIPAMENTOS` = colDef(
      name = "Produtos de metal",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `26 FABRICAÇÃO DE EQUIPAMENTOS DE INFORMÁTICA, PRODUTOS ELETRÔNICOS E ÓPTICOS` = colDef(
      name = "Equipamentos de informática, produtos eletrônicos e ópticos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `27 FABRICAÇÃO DE MÁQUINAS, APARELHOS E MATERIAIS ELÉTRICOS` = colDef(
      name = "Máquinas, aparelhos e materiais elétricos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `28 FABRICAÇÃO DE MÁQUINAS E EQUIPAMENTOS` = colDef(
      name = "Máquinas e equipamentos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `29 FABRICAÇÃO DE VEÍCULOS AUTOMOTORES, REBOQUES E CARROCERIAS` = colDef(
      name = "Veículos automotores",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `30 FABRICAÇÃO DE OUTROS EQUIPAMENTOS DE TRANSPORTE, EXCETO VEÍCULOS AUTOMOTORES` = colDef(
      name = "Outros equipamentos de transporte",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `31 FABRICAÇÃO DE MÓVEIS` = colDef(
      name = "Móveis",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Tx. acum. em 12 meses (Gráfico)
```{r}
plot_ly() %>%
  add_trace(
    data = ipp_12m,
    x = ~data,
    y = ~as.numeric(gsub(",", ".", `Indústria Geral`)),
    type = "scatter",
    mode = "lines",
    name = "Indústria geral"
  ) %>%
  add_trace(
    data = ipp_12m,
    x = ~data,
    y = ~as.numeric(gsub(",", ".", `B Indústrias Extrativas`)),
    type = "scatter",
    mode = "lines",
    name = "Indústrias extrativas"
  ) %>%
  add_trace(
    data = ipp_12m,
    x = ~data,
    y = ~as.numeric(gsub(",", ".", `C Indústrias de Transformação`)),
    type = "scatter",
    mode = "lines",
    name = "Indústrias de transformação"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Tx. acum. em 12 meses (Seções e atividades) (%)
```{r}
reactable(
  ipp_12m[, -28],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Indústria Geral` = colDef(
      name = "Índice geral",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `B Indústrias Extrativas` = colDef(
      name = "Indústrias extrativas",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `C Indústrias de Transformação` = colDef(
      name = "Indústrias de transformação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `10 FABRICAÇÃO DE PRODUTOS ALIMENTÍCIOS` = colDef(
      name = "Alimentos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `11 FABRICAÇÃO DE BEBIDAS` = colDef(
      name = "Bebidas",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `12 FABRICAÇÃO DE PRODUTOS DO FUMO` = colDef(
      name = "Fumo",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `13 FABRICAÇÃO DE PRODUTOS TÊXTEIS` = colDef(
      name = "Têxtil",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `14 CONFECÇÃO DE ARTIGOS DO VESTUÁRIO E ACESSÓRIOS` = colDef(
      name = "Vestuário",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `15 PREPARAÇÃO DE COUROS E FABRICAÇÃO DE ARTEFATOS DE COURO, ARTIGOS PARA VIAGEM E CALÇADOS` = colDef(
      name = "Calçados e produtos de couro",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `16 FABRICAÇÃO DE PRODUTOS DE MADEIRA` = colDef(
      name = "Madeira",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `17 FABRICAÇÃO DE CELULOSE, PAPEL E PRODUTOS DE PAPEL` = colDef(
      name = "Papel e celulose",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `18 IMPRESSÃO E REPRODUÇÃO DE GRAVAÇÕES` = colDef(
      name = "Impressão e reprodução de gravações",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `19 FABRICAÇÃO DE COQUE, DE PRODUTOS DERIVADOS DO PETRÓLEO E DE BIOCOMBUSTÍVEIS` = colDef(
      name = "Refino de petróleo e biocombustíveis",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `20B FABRICAÇÃO DE SABÕES, DETERGENTES, PRODUTOS DE LIMPEZA, COSMÉTICOS, PRODUTOS DE PERFUMARIA E DE HIGIENE PESSOAL` = colDef(
      name = "Perfumaria, sabões e produtos de limpeza",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `20C FABRICAÇÃO DE OUTROS PRODUTOS QUÍMICOS` = colDef(
      name = "Outros produtos químicos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `21 FABRICAÇÃO DE PRODUTOS FARMOQUÍMICOS E FARMACÊUTICOS` = colDef(
      name = "Farmacêutica",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `22 FABRICAÇÃO DE PRODUTOS DE BORRACHA E DE MATERIAL PLÁSTICO` = colDef(
      name = "Borracha e plástico",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `23 FABRICAÇÃO DE PRODUTOS DE MINERAIS NÃO METÁLICOS` = colDef(
      name = "Minerais não metálicos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `24 METALURGIA` = colDef(
      name = "Metalurgia",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `25 FABRICAÇÃO DE PRODUTOS DE METAL, EXCETO MÁQUINAS E EQUIPAMENTOS` = colDef(
      name = "Produtos de metal",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `26 FABRICAÇÃO DE EQUIPAMENTOS DE INFORMÁTICA, PRODUTOS ELETRÔNICOS E ÓPTICOS` = colDef(
      name = "Equipamentos de informática, produtos eletrônicos e ópticos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `27 FABRICAÇÃO DE MÁQUINAS, APARELHOS E MATERIAIS ELÉTRICOS` = colDef(
      name = "Máquinas, aparelhos e materiais elétricos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `28 FABRICAÇÃO DE MÁQUINAS E EQUIPAMENTOS` = colDef(
      name = "Máquinas e equipamentos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `29 FABRICAÇÃO DE VEÍCULOS AUTOMOTORES, REBOQUES E CARROCERIAS` = colDef(
      name = "Veículos automotores",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `30 FABRICAÇÃO DE OUTROS EQUIPAMENTOS DE TRANSPORTE, EXCETO VEÍCULOS AUTOMOTORES` = colDef(
      name = "Outros equipamentos de transporte",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `31 FABRICAÇÃO DE MÓVEIS` = colDef(
      name = "Móveis",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Número-índice (Gráfico)
```{r}
plot_ly() %>%
  add_trace(
    data = ipp_num_ind,
    x = ~data,
    y = ~as.numeric(gsub(",", ".", `Indústria Geral`)),
    type = "scatter",
    mode = "lines",
    name = "Indústria geral"
  ) %>%
  add_trace(
    data = ipp_num_ind,
    x = ~data,
    y = ~as.numeric(gsub(",", ".", `B Indústrias Extrativas`)),
    type = "scatter",
    mode = "lines",
    name = "Indústrias extrativas"
  ) %>%
  add_trace(
    data = ipp_num_ind,
    x = ~data,
    y = ~as.numeric(gsub(",", ".", `C Indústrias de Transformação`)),
    type = "scatter",
    mode = "lines",
    name = "Indústrias de transformação"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "Dez/2018 = 100", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Número-índice (Seções e atividades) (%)
```{r}
reactable(
  ipp_num_ind[, -28],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Indústria Geral` = colDef(
      name = "Índice geral",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `B Indústrias Extrativas` = colDef(
      name = "Indústrias extrativas",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `C Indústrias de Transformação` = colDef(
      name = "Indústrias de transformação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `10 FABRICAÇÃO DE PRODUTOS ALIMENTÍCIOS` = colDef(
      name = "Alimentos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `11 FABRICAÇÃO DE BEBIDAS` = colDef(
      name = "Bebidas",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `12 FABRICAÇÃO DE PRODUTOS DO FUMO` = colDef(
      name = "Fumo",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `13 FABRICAÇÃO DE PRODUTOS TÊXTEIS` = colDef(
      name = "Têxtil",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `14 CONFECÇÃO DE ARTIGOS DO VESTUÁRIO E ACESSÓRIOS` = colDef(
      name = "Vestuário",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `15 PREPARAÇÃO DE COUROS E FABRICAÇÃO DE ARTEFATOS DE COURO, ARTIGOS PARA VIAGEM E CALÇADOS` = colDef(
      name = "Calçados e produtos de couro",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `16 FABRICAÇÃO DE PRODUTOS DE MADEIRA` = colDef(
      name = "Madeira",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `17 FABRICAÇÃO DE CELULOSE, PAPEL E PRODUTOS DE PAPEL` = colDef(
      name = "Papel e celulose",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `18 IMPRESSÃO E REPRODUÇÃO DE GRAVAÇÕES` = colDef(
      name = "Impressão e reprodução de gravações",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `19 FABRICAÇÃO DE COQUE, DE PRODUTOS DERIVADOS DO PETRÓLEO E DE BIOCOMBUSTÍVEIS` = colDef(
      name = "Refino de petróleo e biocombustíveis",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `20B FABRICAÇÃO DE SABÕES, DETERGENTES, PRODUTOS DE LIMPEZA, COSMÉTICOS, PRODUTOS DE PERFUMARIA E DE HIGIENE PESSOAL` = colDef(
      name = "Perfumaria, sabões e produtos de limpeza",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `20C FABRICAÇÃO DE OUTROS PRODUTOS QUÍMICOS` = colDef(
      name = "Outros produtos químicos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `21 FABRICAÇÃO DE PRODUTOS FARMOQUÍMICOS E FARMACÊUTICOS` = colDef(
      name = "Farmacêutica",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `22 FABRICAÇÃO DE PRODUTOS DE BORRACHA E DE MATERIAL PLÁSTICO` = colDef(
      name = "Borracha e plástico",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `23 FABRICAÇÃO DE PRODUTOS DE MINERAIS NÃO METÁLICOS` = colDef(
      name = "Minerais não metálicos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `24 METALURGIA` = colDef(
      name = "Metalurgia",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `25 FABRICAÇÃO DE PRODUTOS DE METAL, EXCETO MÁQUINAS E EQUIPAMENTOS` = colDef(
      name = "Produtos de metal",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `26 FABRICAÇÃO DE EQUIPAMENTOS DE INFORMÁTICA, PRODUTOS ELETRÔNICOS E ÓPTICOS` = colDef(
      name = "Equipamentos de informática, produtos eletrônicos e ópticos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `27 FABRICAÇÃO DE MÁQUINAS, APARELHOS E MATERIAIS ELÉTRICOS` = colDef(
      name = "Máquinas, aparelhos e materiais elétricos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `28 FABRICAÇÃO DE MÁQUINAS E EQUIPAMENTOS` = colDef(
      name = "Máquinas e equipamentos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `29 FABRICAÇÃO DE VEÍCULOS AUTOMOTORES, REBOQUES E CARROCERIAS` = colDef(
      name = "Veículos automotores",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `30 FABRICAÇÃO DE OUTROS EQUIPAMENTOS DE TRANSPORTE, EXCETO VEÍCULOS AUTOMOTORES` = colDef(
      name = "Outros equipamentos de transporte",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `31 FABRICAÇÃO DE MÓVEIS` = colDef(
      name = "Móveis",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Tx. M/M-1 (GCE) (%)
```{r}
reactable(
  ipp_gce_mg[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Indústria geral` = colDef(
      name = "Índice geral",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Bens de capital (BK)` = colDef(
      name = "Bens de capital",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Bens intermediários (BI)` = colDef(
      name = "Bens intermediários",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Bens de consumo (BC)` = colDef(
      name = "Bens de consumo",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Bens de consumo duráveis (BCD)` = colDef(
      name = "Bens de consumo duráveis",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Bens de consumo semiduráveis e não duráveis (BCND)` = colDef(
      name = "Bens de consumo semiduráveis e não duráveis",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Tx. acum. no ano (GCE) (%)
```{r}
reactable(
  ipp_gce_acum_ano[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Indústria geral` = colDef(
      name = "Índice geral",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Bens de capital (BK)` = colDef(
      name = "Bens de capital",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Bens intermediários (BI)` = colDef(
      name = "Bens intermediários",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Bens de consumo (BC)` = colDef(
      name = "Bens de consumo",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Bens de consumo duráveis (BCD)` = colDef(
      name = "Bens de consumo duráveis",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Bens de consumo semiduráveis e não duráveis (BCND)` = colDef(
      name = "Bens de consumo semiduráveis e não duráveis",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Tx. acum. em 12 meses (GCE) (%)
```{r}
reactable(
  ipp_gce_12m[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Indústria geral` = colDef(
      name = "Índice geral",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Bens de capital (BK)` = colDef(
      name = "Bens de capital",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Bens intermediários (BI)` = colDef(
      name = "Bens intermediários",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Bens de consumo (BC)` = colDef(
      name = "Bens de consumo",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Bens de consumo duráveis (BCD)` = colDef(
      name = "Bens de consumo duráveis",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Bens de consumo semiduráveis e não duráveis (BCND)` = colDef(
      name = "Bens de consumo semiduráveis e não duráveis",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Tx. M/M-1 (Grupos) (%)
```{r}
reactable(
  ipp_gis_mg[, -25],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `101 Abate e fabricação de produtos de carne` = colDef(
      name = "Abate e fabricação de produtos de carne",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `104 Fabricação de óleos e gorduras vegetais e animais` = colDef(
      name = "Fabricação de óleos e gorduras vegetais e animais",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `105 Laticínios` = colDef(
      name = "Laticínios",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `106 Moagem, fabricação de produtos amiláceos e de alimentos para animais` = colDef(
      name = "Moagem, fabricação de produtos amiláceos e de alimentos para animais",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `107 Fabricação e refino de açúcar` = colDef(
      name = "Fabricação e refino de açúcar",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `108 Torrefação e moagem de café` = colDef(
      name = "Torrefação e moagem de café",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `151 Curtimento e outras preparações de couro` = colDef(
      name = "Curtimento e outras preparações de couro",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `153 Fabricação de calçados` = colDef(
      name = "153 Fabricação de calçados",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `201 Fabricação de produtos químicos inorgânicos` = colDef(
      name = "Fabricação de produtos químicos inorgânicos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `203 Fabricação de resinas e elastômeros` = colDef(
      name = "Fabricação de resinas e elastômeros",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `205 Fabricação de defensivos agrícolas e desinfestantes domissanitários` = colDef(
      name = "Fabricação de defensivos agrícolas e desinfestantes domissanitários",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `221 Fabricação de produtos de borracha` = colDef(
      name = "Fabricação de produtos de borracha",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `222 Fabricação de produtos de material plástico` = colDef(
      name = "Fabricação de produtos de material plástico",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `233 Fabricação de artefatos de concreto, cimento, fibrocimento, gesso e materiais semelhantes` = colDef(
      name = "Fabricação de artefatos de concreto, cimento, fibrocimento, gesso e materiais semelhantes",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `234 Fabricação de produtos cerâmicos` = colDef(
      name = "Fabricação de produtos cerâmicos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `242 Siderurgia` = colDef(
      name = "Siderurgia",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `262 Fabricação de equipamentos de informática e periféricos` = colDef(
      name = "Fabricação de equipamentos de informática e periféricos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `264 Fabricação de aparelhos de recepção, reprodução, gravação e amplificação de áudio e vídeo` = colDef(
      name = "Fabricação de aparelhos de recepção, reprodução, gravação e amplificação de áudio e vídeo",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `271 Fabricação de geradores, transformadores e motores elétricos` = colDef(
      name = "Fabricação de geradores, transformadores e motores elétricos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `275 Fabricação de eletrodomésticos` = colDef(
      name = "Fabricação de eletrodomésticos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `281 Fabricação de motores, bombas, compressores e equipamentos de transmissão` = colDef(
      name = "Fabricação de motores, bombas, compressores e equipamentos de transmissão",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `283 Fabricação de tratores e de máquinas e equipamentos para a agricultura e pecuária` = colDef(
      name = "Fabricação de tratores e de máquinas e equipamentos para a agricultura e pecuária",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `291 Fabricação de automóveis, camionetas e utilitários` = colDef(
      name = "291 Fabricação de automóveis, camionetas e utilitários",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Tx. acum. no ano (Grupos) (%)
```{r}
reactable(
  ipp_gis_acum_ano[, -25],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `101 Abate e fabricação de produtos de carne` = colDef(
      name = "Abate e fabricação de produtos de carne",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `104 Fabricação de óleos e gorduras vegetais e animais` = colDef(
      name = "Fabricação de óleos e gorduras vegetais e animais",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `105 Laticínios` = colDef(
      name = "Laticínios",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `106 Moagem, fabricação de produtos amiláceos e de alimentos para animais` = colDef(
      name = "Moagem, fabricação de produtos amiláceos e de alimentos para animais",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `107 Fabricação e refino de açúcar` = colDef(
      name = "Fabricação e refino de açúcar",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `108 Torrefação e moagem de café` = colDef(
      name = "Torrefação e moagem de café",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `151 Curtimento e outras preparações de couro` = colDef(
      name = "Curtimento e outras preparações de couro",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `153 Fabricação de calçados` = colDef(
      name = "153 Fabricação de calçados",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `201 Fabricação de produtos químicos inorgânicos` = colDef(
      name = "Fabricação de produtos químicos inorgânicos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `203 Fabricação de resinas e elastômeros` = colDef(
      name = "Fabricação de resinas e elastômeros",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `205 Fabricação de defensivos agrícolas e desinfestantes domissanitários` = colDef(
      name = "Fabricação de defensivos agrícolas e desinfestantes domissanitários",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `221 Fabricação de produtos de borracha` = colDef(
      name = "Fabricação de produtos de borracha",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `222 Fabricação de produtos de material plástico` = colDef(
      name = "Fabricação de produtos de material plástico",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `233 Fabricação de artefatos de concreto, cimento, fibrocimento, gesso e materiais semelhantes` = colDef(
      name = "Fabricação de artefatos de concreto, cimento, fibrocimento, gesso e materiais semelhantes",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `234 Fabricação de produtos cerâmicos` = colDef(
      name = "Fabricação de produtos cerâmicos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `242 Siderurgia` = colDef(
      name = "Siderurgia",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `262 Fabricação de equipamentos de informática e periféricos` = colDef(
      name = "Fabricação de equipamentos de informática e periféricos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `264 Fabricação de aparelhos de recepção, reprodução, gravação e amplificação de áudio e vídeo` = colDef(
      name = "Fabricação de aparelhos de recepção, reprodução, gravação e amplificação de áudio e vídeo",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `271 Fabricação de geradores, transformadores e motores elétricos` = colDef(
      name = "Fabricação de geradores, transformadores e motores elétricos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `275 Fabricação de eletrodomésticos` = colDef(
      name = "Fabricação de eletrodomésticos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `281 Fabricação de motores, bombas, compressores e equipamentos de transmissão` = colDef(
      name = "Fabricação de motores, bombas, compressores e equipamentos de transmissão",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `283 Fabricação de tratores e de máquinas e equipamentos para a agricultura e pecuária` = colDef(
      name = "Fabricação de tratores e de máquinas e equipamentos para a agricultura e pecuária",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `291 Fabricação de automóveis, camionetas e utilitários` = colDef(
      name = "291 Fabricação de automóveis, camionetas e utilitários",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Tx. acum. em 12 meses (Grupos) (%)
```{r}
reactable(
  ipp_gis_12m[, -25],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `101 Abate e fabricação de produtos de carne` = colDef(
      name = "Abate e fabricação de produtos de carne",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `104 Fabricação de óleos e gorduras vegetais e animais` = colDef(
      name = "Fabricação de óleos e gorduras vegetais e animais",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `105 Laticínios` = colDef(
      name = "Laticínios",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `106 Moagem, fabricação de produtos amiláceos e de alimentos para animais` = colDef(
      name = "Moagem, fabricação de produtos amiláceos e de alimentos para animais",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `107 Fabricação e refino de açúcar` = colDef(
      name = "Fabricação e refino de açúcar",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `108 Torrefação e moagem de café` = colDef(
      name = "Torrefação e moagem de café",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `151 Curtimento e outras preparações de couro` = colDef(
      name = "Curtimento e outras preparações de couro",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `153 Fabricação de calçados` = colDef(
      name = "153 Fabricação de calçados",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `201 Fabricação de produtos químicos inorgânicos` = colDef(
      name = "Fabricação de produtos químicos inorgânicos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `203 Fabricação de resinas e elastômeros` = colDef(
      name = "Fabricação de resinas e elastômeros",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `205 Fabricação de defensivos agrícolas e desinfestantes domissanitários` = colDef(
      name = "Fabricação de defensivos agrícolas e desinfestantes domissanitários",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `221 Fabricação de produtos de borracha` = colDef(
      name = "Fabricação de produtos de borracha",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `222 Fabricação de produtos de material plástico` = colDef(
      name = "Fabricação de produtos de material plástico",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `233 Fabricação de artefatos de concreto, cimento, fibrocimento, gesso e materiais semelhantes` = colDef(
      name = "Fabricação de artefatos de concreto, cimento, fibrocimento, gesso e materiais semelhantes",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `234 Fabricação de produtos cerâmicos` = colDef(
      name = "Fabricação de produtos cerâmicos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `242 Siderurgia` = colDef(
      name = "Siderurgia",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `262 Fabricação de equipamentos de informática e periféricos` = colDef(
      name = "Fabricação de equipamentos de informática e periféricos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `264 Fabricação de aparelhos de recepção, reprodução, gravação e amplificação de áudio e vídeo` = colDef(
      name = "Fabricação de aparelhos de recepção, reprodução, gravação e amplificação de áudio e vídeo",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `271 Fabricação de geradores, transformadores e motores elétricos` = colDef(
      name = "Fabricação de geradores, transformadores e motores elétricos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `275 Fabricação de eletrodomésticos` = colDef(
      name = "Fabricação de eletrodomésticos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `281 Fabricação de motores, bombas, compressores e equipamentos de transmissão` = colDef(
      name = "Fabricação de motores, bombas, compressores e equipamentos de transmissão",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `283 Fabricação de tratores e de máquinas e equipamentos para a agricultura e pecuária` = colDef(
      name = "Fabricação de tratores e de máquinas e equipamentos para a agricultura e pecuária",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `291 Fabricação de automóveis, camionetas e utilitários` = colDef(
      name = "Fabricação de automóveis, camionetas e utilitários",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Índice de Preços ao Produtor Amplo - Disponibilidade Interna (IPA-DI) {data-navmenu="Inflação"}

# Índice Geral de Preços - Disponibilidade Interna (IGP-DI) {data-navmenu="Inflação"}

# Índice Geral de Preços do Mercado (IGP-M) {data-navmenu="Inflação"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

O **Índice Geral de Preços do Mercado (IGP-M)** é um indicador do movimento de preços que cobre todo o processo produtivo, desde preços de matérias-primas agrícolas e industriais, passando pelos preços de produtos intermediários até os de bens e serviços finais. É composto pela média ponderada do Índice de Preços ao Produtor Amplo do Mercado (IPA-M) (60%), do Índice de Preços ao Consumidor do Mercado (IPC-M) (30%) e do Índice Nacional de Custo da Construção do Mercado (INCC-M) (10%). Para efeito de coleta de preços, o IGP-M mede a evolução de preços no período compreendido entre os dias 21 do mês anterior e o dia 20 do mês de referência.

<br>

**Fonte:** Fundação Getúlio Vargas (FGV) via Ipeadata.

Column {data-width=500}  {.tabset}
-----------------------------------------------------------------------

### Var. mensal (%)
```{r}
plot_ly(
  data = igpm, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor_igpm)),
  type = "scatter",
  mode = "line"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

### Var. em 12 meses (%)
```{r}
plot_ly(
  data = igpm, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", igpm_12m)),
  type = "scatter",
  mode = "line"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=300}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese (%)
```{r}
reactable(
  igpm[, -4],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `valor_igpm` = colDef(
      name = "IGP-M mensal",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `igpm_12m` = colDef(
      name = "IGP-M acum. em 12 meses",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Índice Nacional de Preços ao Consumidor (INPC) {data-navmenu="Inflação"}

Column {.sidebar} {data-width=150}
-----------------------------------------------------------------------

O **Índice Nacional de Preços ao Consumidor (INPC)** tem como unidade de coleta estabelecimentos comerciais e de prestação de serviços, concessionária de serviços públicos e internet e sua coleta estende-se, em geral, do dia 01 a 30 do mês de referência. Atualmente, a população-objetivo do INPC abrange as **famílias com rendimentos de 1 a 5 salários mínimos**, cuja pessoa de referência é assalariada, residentes nas áreas urbanas das regiões de abrangência do Sistema Nacional de Índices de Preços ao Consumidor (SNIPC), as quais são: regiões metropolitanas de Belém, Fortaleza, Recife, Salvador, Belo Horizonte, Vitória, Rio de Janeiro, São Paulo, Curitiba, Porto Alegre, além do Distrito Federal e dos municípios de Goiânia, Campo Grande, Rio Branco, São Luís e Aracaju. Para além de seu objetivo principal, medir a variação dos preços, o índice tem sido usualmente utilizado como base para correção monetária dos salários no Brasil. 

<br>

**Fonte:** Instituto Brasileiro de Geografia e Estatística (IBGE).

Column {data-width=850}  {.tabset}
-----------------------------------------------------------------------

### Tx. M/M-1 (Gráfico)
```{r}
plot_ly(
  data = inpc, 
  x = ~data, 
  y = ~as.numeric(gsub(",", ".", `INPC - Variação mensal`)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

### Tx. M/M-1 (Grupos) (%)
```{r}
reactable(
  inpc_grupos_mg[, -12],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Índice geral` = colDef(
      name = "Índice geral",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `1.Alimentação e bebidas` = colDef(
      name = "1. Alimentação e bebidas",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `2.Habitação` = colDef(
      name = "2. Habitação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.Artigos de residência` = colDef(
      name = "3. Artigos de residência",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `4.Vestuário` = colDef(
      name = "4. Vestuário",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `5.Transportes` = colDef(
      name = "5. Transportes",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `6.Saúde e cuidados pessoais` = colDef(
      name = "6. Saúde e cuidados pessoais",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `7.Despesas pessoais` = colDef(
      name = "7. Despesas pessoais",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `8.Educação` = colDef(
      name = "8. Educação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `9.Comunicação` = colDef(
      name = "9. Comunicação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Tx. acum. no ano (Gráfico)
```{r}
plot_ly(
  data = inpc, 
  x = ~data, 
  y = ~as.numeric(gsub(",", ".", `INPC - Variação acumulada no ano`)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

### Tx. acum. no ano (Grupos) (%)
```{r}
reactable(
  inpc_grupos_acum_ano[, -12],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Índice geral` = colDef(
      name = "Índice geral",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `1.Alimentação e bebidas` = colDef(
      name = "1. Alimentação e bebidas",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `2.Habitação` = colDef(
      name = "2. Habitação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.Artigos de residência` = colDef(
      name = "3. Artigos de residência",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `4.Vestuário` = colDef(
      name = "4. Vestuário",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `5.Transportes` = colDef(
      name = "5. Transportes",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `6.Saúde e cuidados pessoais` = colDef(
      name = "6. Saúde e cuidados pessoais",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `7.Despesas pessoais` = colDef(
      name = "7. Despesas pessoais",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `8.Educação` = colDef(
      name = "8. Educação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `9.Comunicação` = colDef(
      name = "9. Comunicação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Tx. acum. em 12 meses (Gráfico)
```{r}
plot_ly(
  data = inpc, 
  x = ~data, 
  y = ~as.numeric(gsub(",", ".", `INPC - Variação acumulada em 12 meses`)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

### Tx. acum. em 12 meses (Grupos) (%)
```{r}
reactable(
  inpc_grupos_acum_12m[, -12],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Índice geral` = colDef(
      name = "Índice geral",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `1.Alimentação e bebidas` = colDef(
      name = "1. Alimentação e bebidas",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `2.Habitação` = colDef(
      name = "2. Habitação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.Artigos de residência` = colDef(
      name = "3. Artigos de residência",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `4.Vestuário` = colDef(
      name = "4. Vestuário",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `5.Transportes` = colDef(
      name = "5. Transportes",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `6.Saúde e cuidados pessoais` = colDef(
      name = "6. Saúde e cuidados pessoais",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `7.Despesas pessoais` = colDef(
      name = "7. Despesas pessoais",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `8.Educação` = colDef(
      name = "8. Educação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `9.Comunicação` = colDef(
      name = "9. Comunicação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Peso mensal (Grupos) (%)
```{r}
reactable(
  inpc_grupos_peso[, -12],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Índice geral` = colDef(
      name = "Índice geral",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `1.Alimentação e bebidas` = colDef(
      name = "1. Alimentação e bebidas",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `2.Habitação` = colDef(
      name = "2. Habitação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.Artigos de residência` = colDef(
      name = "3. Artigos de residência",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `4.Vestuário` = colDef(
      name = "4. Vestuário",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `5.Transportes` = colDef(
      name = "5. Transportes",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `6.Saúde e cuidados pessoais` = colDef(
      name = "6. Saúde e cuidados pessoais",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `7.Despesas pessoais` = colDef(
      name = "7. Despesas pessoais",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `8.Educação` = colDef(
      name = "8. Educação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `9.Comunicação` = colDef(
      name = "9. Comunicação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Base monetária {data-navmenu="Monetário"}

# Meios de pagamento {data-navmenu="Monetário"}

# Multiplicador monetário {data-navmenu="Monetário"}

# Taxa Selic {data-navmenu="Monetário"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------
A **Taxa Selic**, definida a cada 45 dias pelo Comitê de Política Monetária (Copom) do Banco Central do Brasil (BCB), é a taxa de juros básica da economia brasileira e serve de referência para outras taxas de juros do país. A taxa utilizada aqui é acumulada no mês e anualizada na base 252.

<br>

A taxa de juros real _ex-post_ é definida a partir do deflacionamento da taxa Selic pelo Índice de Preços ao Consumidor Amplo (IPCA) acumulado nos últimos 12 meses.

<br>

O diferencial de juros é definido a partir da divisão do fator da Taxa Selic pela _Federal Funds Effective Rate_ (FED rate), a taxa básica de juros definida pelo Federal Reserve dos Estados Unidos da América.

<br>

**Fonte**: Código 4189 do Sistema Gerenciador de Séries Temporais do Banco Central do Brasil (SGS/BCB) para taxa Selic, Instituto Brasileiro de Geografia e Estatística (IBGE) para IPCA e Federal Reserve Economic Data (FRED) para FED rate.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Taxas Selic Over nominal e real
```{r}
plot_ly() %>%
  add_trace(
    data = selic,
    x = ~data,
    y = ~as.numeric(gsub(",", ".", valor_selic_over)),
    type = "scatter",
    mode = "lines",
    name = "Selic Over nominal"
  ) %>%
  add_trace(
    data = selic,
    x = ~data,
    y = ~as.numeric(gsub(",", ".", selic_real)),
    type = "scatter",
    mode = "lines",
    name = "Selic real ex-post (IPCA)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Diferencial de juros (Brasil/EUA)
```{r}
plot_ly() %>%
  add_trace(
    data = selic,
    x = ~data,
    y = ~as.numeric(gsub(",", ".", valor_selic_over)),
    type = "scatter",
    mode = "lines",
    name = "Selic Over"
  ) %>%
  add_trace(
    data = selic,
    x = ~data,
    y = ~as.numeric(gsub(",", ".", dif_juros)),
    type = "scatter",
    mode = "lines",
    name = "Diferencial de juros (Selic/FED Rate)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese (%)
```{r}
reactable(
  selic[, -7],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_selic_over = colDef(
      name = "Selic Over",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_ipca12m = colDef(
      name = "IPCA acum. em 12 meses",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_fed_rate = colDef(
      name = "FED rate",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    selic_real = colDef(
      name = "Selic real ex-post (IPCA)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    dif_juros = colDef(
      name = "Diferencial de juros (Selic/FED rate)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# IBC-Br {data-navmenu="Produção"}

Column {.sidebar} {data-width=150}
-----------------------------------------------------------------------

O **IBC-Br** é um indicador de atividade produzido pelo BC. Divulgado desde março de 2010, tem como objetivo mensurar a atividade econômica de forma tempestiva e em frequência mensal. A partir de abril de 2025, o BC passou a divulgar também os componentes do IBC-Br (IBC-Br Agropecuária, IBC-Br Indústria, IBC-Br serviços e IBC-Br Impostos), além do IBC-Br excluindo a agropecuária (IBC-Br ex-Agropecuária).
O IBC-Br e seus componentes são construídos com base em proxies representativas da evolução em volume do valor adicionado bruto (VAB) da agropecuária, da indústria e do setor de serviços, e do volume de impostos. Essas proxies são agregadas com pesos derivados, em especial, das tabelas de recursos e usos do Sistema de Contas Nacionais (IBGE). Também são utilizadas outras informações de caráter estrutural, como as obtidas na Pesquisa Industrial Anual (PIA-IBGE), na Pesquisa Anual de Serviços (PAS-IBGE) e na Produção Agrícola Municipal (PAM-IBGE).

<br>

**Fonte:** Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=850} {.tabset}
-----------------------------------------------------------------------

### Gráfico
```{r}
plot_ly() %>%
  add_trace(
    data = ibc,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", `valor_ibc`)),
    type = "scatter",
    mode = "lines",
    name = "IBC-Br (Geral)"
  ) %>%
  add_trace(
    data = ibc,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", `valor_ibc_agro`)),
    type = "scatter",
    mode = "lines",
    name = "Agropecuária"
  ) %>%
  add_trace(
    data = ibc,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", `valor_ibc_ind`)),
    type = "scatter",
    mode = "lines",
    name = "Indústria"
  )%>%
  add_trace(
    data = ibc,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", `valor_ibc_serv`)),
    type = "scatter",
    mode = "lines",
    name = "Serviços"
  ) %>%
  add_trace(
    data = ibc,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", `valor_ibc_ex_agro`)),
    type = "scatter",
    mode = "lines",
    name = "Ex-agropecuária"
  ) %>%
  add_trace(
    data = ibc,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", `valor_ibc_impostos`)),
    type = "scatter",
    mode = "lines",
    name = "Impostos"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "2002 = 100", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Quadro-síntese
```{r}
reactable(
  ibc[, -14],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `valor_ibc` = colDef(
      name = "IBC-Br (Geral)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `var_ibc_mg` = colDef(
      name = "Var. mensal (Geral) (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `valor_ibc_agro` = colDef(
      name = "Agropecuária",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `var_ibc_mg_agro` = colDef(
      name = "Var. mensal (Agropecuária) (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `valor_ibc_ind` = colDef(
      name = "Indústria",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `var_ibc_mg_ind` = colDef(
      name = "Var. mensal (Indústria) (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `valor_ibc_serv` = colDef(
      name = "Serviços",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `var_ibc_mg_serv` = colDef(
      name = "Var. mensal (Serviços) (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `valor_ibc_ex_agro` = colDef(
      name = "Ex-agropecuária",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `var_ibc_mg_ex_agro` = colDef(
      name = "Var. mensal (Ex-agropecuária) (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `valor_ibc_impostos` = colDef(
      name = "Impostos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `var_ibc_mg_impostos` = colDef(
      name = "Var. mensal (Impostos) (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Indicador IPEA de FBCF {data-navmenu="Produção"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------
A **formação bruta de capital fixo (FBCF)** da economia é composta por investimentos em máquinas e equipamentos e em construção civil. Como os investimentos em máquinas e equipamentos equivalem ao Consumo Aparente (CA) de bens de capital, foi construído um indicador mensal da FBCF por meio da média ponderada deste indicador de CA com um indicador de construção civil.

<br>

**Fonte:** Instituto de Pesquisa Econômica Aplicada (IPEA).

Column {data-width=500} {.tabset}
-----------------------------------------------------------------------

### Gráfico
```{r}
```{r}
plot_ly() %>%
  add_trace(
    data = ind_fbcf,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_ipea_fbcf)),
    type = "scatter",
    mode = "lines",
    name = "Índice real"
  ) %>%
  add_trace(
    data = ind_fbcf,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_ipea_fbcf_cc)),
    type = "scatter",
    mode = "lines",
    name = "Índice real (construção civil)"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "Média 1995 = 100", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

Column {data-width=300} {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  ind_fbcf[, -4],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `valor_ipea_fbcf` = colDef(
      name = "Índice real",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `valor_ipea_fbcf_cc` = colDef(
      name = "Índice real (construção civil)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),  
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```


# Pesquisa Industrial Mensal - Produção física (PIM-PF) {data-navmenu="Produção"}

Column {.sidebar} {data-width=80}
-----------------------------------------------------------------------

A **Pesquisa Industrial Mensal - Produção física (PIM-PF)** produz indicadores de curto prazo relativos ao comportamento do produto real da indústria, tendo como unidade de investigação a empresa formalmente constituída cuja principal fonte de receita seja a atividade industrial.

<br>

**Fonte:** Instituto Brasileiro de Geografia e Estatística (IBGE).

Column {data-width=920} {.tabset}
-----------------------------------------------------------------------

### Tx. M/M-1 (Indústria geral e seções) (Gráfico)
```{r}
plot_ly() %>%
  add_trace(
    data = pim_sec_ativ_mg,
    x = ~data,
    y = ~as.numeric(gsub(",", ".", `1 Indústria geral`)),
    type = "scatter",
    mode = "lines",
    name = "Indústria geral"
  ) %>%
  add_trace(
    data = pim_sec_ativ_mg,
    x = ~data,
    y = ~as.numeric(gsub(",", ".", `2 Indústrias extrativas`)),
    type = "scatter",
    mode = "lines",
    name = "Indústrias extrativas"
  ) %>%
  add_trace(
    data = pim_sec_ativ_mg,
    x = ~data,
    y = ~as.numeric(gsub(",", ".", `3 Indústrias de transformação`)),
    type = "scatter",
    mode = "lines",
    name = "Indústrias de transformação"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Tx. M/M-1 (Indústria geral, seções e atividades) (%)
```{r}
reactable(
  pim_sec_ativ_mg[, -29],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `1 Indústria geral` = colDef(
      name = "Indústria geral",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `2 Indústrias extrativas` = colDef(
      name = "Indústrias extrativas",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3 Indústrias de transformação` = colDef(
      name = "Indústrias de transformação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.10 Fabricação de produtos alimentícios` = colDef(
      name = "Fabricação de produtos alimentícios",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.11 Fabricação de bebidas` = colDef(
      name = "Fabricação de bebidas",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.12 Fabricação de produtos do fumo` = colDef(
      name = "Fabricação de produtos do fumo",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.13 Fabricação de produtos têxteis` = colDef(
      name = "Fabricação de produtos têxteis",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.14 Confecção de artigos do vestuário e acessórios` = colDef(
      name = "Confecção de artigos do vestuário e acessórios",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.15 Preparação de couros e fabricação de artefatos de couro, artigos para viagem e calçados` = colDef(
      name = "Preparação de couros e fabricação de artefatos de couro, artigos para viagem e calçados",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.16 Fabricação de produtos de madeira` = colDef(
      name = "Fabricação de produtos de madeira",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.17 Fabricação de celulose, papel e produtos de papel` = colDef(
      name = "Fabricação de celulose, papel e produtos de papel",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.18 Impressão e reprodução de gravações` = colDef(
      name = "Impressão e reprodução de gravações",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.19 Fabricação de coque, de produtos derivados do petróleo e de biocombustíveis` = colDef(
      name = "Fabricação de coque, de produtos derivados do petróleo e de biocombustíveis",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.20 Fabricação de produtos químicos` = colDef(
      name = "Fabricação de produtos químicos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.21 Fabricação de produtos farmoquímicos e farmacêuticos` = colDef(
      name = "Fabricação de produtos farmoquímicos e farmacêuticos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.22 Fabricação de produtos de borracha e de material plástico` = colDef(
      name = "Fabricação de produtos de borracha e de material plástico",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.23 Fabricação de produtos de minerais não metálicos` = colDef(
      name = "Fabricação de produtos de minerais não metálicos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.24 Metalurgia` = colDef(
      name = "Metalurgia",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.25 Fabricação de produtos de metal, exceto máquinas e equipamentos` = colDef(
      name = "Fabricação de produtos de metal, exceto máquinas e equipamentos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.26 Fabricação de equipamentos de informática, produtos eletrônicos e ópticos` = colDef(
      name = "Fabricação de equipamentos de informática, produtos eletrônicos e ópticos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.27 Fabricação de máquinas, aparelhos e materiais elétricos` = colDef(
      name = "Fabricação de máquinas, aparelhos e materiais elétricos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.28 Fabricação de máquinas e equipamentos` = colDef(
      name = "Fabricação de máquinas e equipamentos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.29 Fabricação de veículos automotores, reboques e carrocerias` = colDef(
      name = "Fabricação de veículos automotores, reboques e carrocerias",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.30 Fabricação de outros equipamentos de transporte, exceto veículos automotores` = colDef(
      name = "Fabricação de outros equipamentos de transporte, exceto veículos automotores",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.31 Fabricação de móveis` = colDef(
      name = "Fabricação de móveis",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.32 Fabricação de produtos diversos` = colDef(
      name = "Fabricação de produtos diversos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.33 Manutenção, reparação e instalação de máquinas e equipamentos` = colDef(
      name = "Manutenção, reparação e instalação de máquinas e equipamentos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Tx. M/M-12 (Indústria geral e seções) (Gráfico)
```{r}
plot_ly() %>%
  add_trace(
    data = pim_sec_ativ_12m,
    x = ~data,
    y = ~as.numeric(gsub(",", ".", `1 Indústria geral`)),
    type = "scatter",
    mode = "lines",
    name = "Indústria geral"
  ) %>%
  add_trace(
    data = pim_sec_ativ_12m,
    x = ~data,
    y = ~as.numeric(gsub(",", ".", `2 Indústrias extrativas`)),
    type = "scatter",
    mode = "lines",
    name = "Indústrias extrativas"
  ) %>%
  add_trace(
    data = pim_sec_ativ_12m,
    x = ~data,
    y = ~as.numeric(gsub(",", ".", `3 Indústrias de transformação`)),
    type = "scatter",
    mode = "lines",
    name = "Indústrias de transformação"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Tx. M/M-12 (Indústria geral, seções e atividades) (%)
```{r}
reactable(
  pim_sec_ativ_12m[, -29],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `1 Indústria geral` = colDef(
      name = "Indústria geral",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `2 Indústrias extrativas` = colDef(
      name = "Indústrias extrativas",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3 Indústrias de transformação` = colDef(
      name = "Indústrias de transformação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.10 Fabricação de produtos alimentícios` = colDef(
      name = "Fabricação de produtos alimentícios",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.11 Fabricação de bebidas` = colDef(
      name = "Fabricação de bebidas",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.12 Fabricação de produtos do fumo` = colDef(
      name = "Fabricação de produtos do fumo",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.13 Fabricação de produtos têxteis` = colDef(
      name = "Fabricação de produtos têxteis",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.14 Confecção de artigos do vestuário e acessórios` = colDef(
      name = "Confecção de artigos do vestuário e acessórios",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.15 Preparação de couros e fabricação de artefatos de couro, artigos para viagem e calçados` = colDef(
      name = "Preparação de couros e fabricação de artefatos de couro, artigos para viagem e calçados",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.16 Fabricação de produtos de madeira` = colDef(
      name = "Fabricação de produtos de madeira",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.17 Fabricação de celulose, papel e produtos de papel` = colDef(
      name = "Fabricação de celulose, papel e produtos de papel",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.18 Impressão e reprodução de gravações` = colDef(
      name = "Impressão e reprodução de gravações",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.19 Fabricação de coque, de produtos derivados do petróleo e de biocombustíveis` = colDef(
      name = "Fabricação de coque, de produtos derivados do petróleo e de biocombustíveis",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.20 Fabricação de produtos químicos` = colDef(
      name = "Fabricação de produtos químicos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.21 Fabricação de produtos farmoquímicos e farmacêuticos` = colDef(
      name = "Fabricação de produtos farmoquímicos e farmacêuticos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.22 Fabricação de produtos de borracha e de material plástico` = colDef(
      name = "Fabricação de produtos de borracha e de material plástico",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.23 Fabricação de produtos de minerais não metálicos` = colDef(
      name = "Fabricação de produtos de minerais não metálicos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.24 Metalurgia` = colDef(
      name = "Metalurgia",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.25 Fabricação de produtos de metal, exceto máquinas e equipamentos` = colDef(
      name = "Fabricação de produtos de metal, exceto máquinas e equipamentos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.26 Fabricação de equipamentos de informática, produtos eletrônicos e ópticos` = colDef(
      name = "Fabricação de equipamentos de informática, produtos eletrônicos e ópticos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.27 Fabricação de máquinas, aparelhos e materiais elétricos` = colDef(
      name = "Fabricação de máquinas, aparelhos e materiais elétricos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.28 Fabricação de máquinas e equipamentos` = colDef(
      name = "Fabricação de máquinas e equipamentos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.29 Fabricação de veículos automotores, reboques e carrocerias` = colDef(
      name = "Fabricação de veículos automotores, reboques e carrocerias",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.30 Fabricação de outros equipamentos de transporte, exceto veículos automotores` = colDef(
      name = "Fabricação de outros equipamentos de transporte, exceto veículos automotores",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.31 Fabricação de móveis` = colDef(
      name = "Fabricação de móveis",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.32 Fabricação de produtos diversos` = colDef(
      name = "Fabricação de produtos diversos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.33 Manutenção, reparação e instalação de máquinas e equipamentos` = colDef(
      name = "Manutenção, reparação e instalação de máquinas e equipamentos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Var. acum. no ano (Indústria geral e seções) (Gráfico)
```{r}
plot_ly() %>%
  add_trace(
    data = pim_sec_ativ_acum_ano,
    x = ~data,
    y = ~as.numeric(gsub(",", ".", `1 Indústria geral`)),
    type = "scatter",
    mode = "lines",
    name = "Indústria geral"
  ) %>%
  add_trace(
    data = pim_sec_ativ_acum_ano,
    x = ~data,
    y = ~as.numeric(gsub(",", ".", `2 Indústrias extrativas`)),
    type = "scatter",
    mode = "lines",
    name = "Indústrias extrativas"
  ) %>%
  add_trace(
    data = pim_sec_ativ_acum_ano,
    x = ~data,
    y = ~as.numeric(gsub(",", ".", `3 Indústrias de transformação`)),
    type = "scatter",
    mode = "lines",
    name = "Indústrias de transformação"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Var. acum. no ano (seções e atividades) (%)
```{r}
reactable(
  pim_sec_ativ_acum_ano[, -29],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `1 Indústria geral` = colDef(
      name = "Indústria geral",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `2 Indústrias extrativas` = colDef(
      name = "Indústrias extrativas",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3 Indústrias de transformação` = colDef(
      name = "Indústrias de transformação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.10 Fabricação de produtos alimentícios` = colDef(
      name = "Fabricação de produtos alimentícios",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.11 Fabricação de bebidas` = colDef(
      name = "Fabricação de bebidas",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.12 Fabricação de produtos do fumo` = colDef(
      name = "Fabricação de produtos do fumo",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.13 Fabricação de produtos têxteis` = colDef(
      name = "Fabricação de produtos têxteis",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.14 Confecção de artigos do vestuário e acessórios` = colDef(
      name = "Confecção de artigos do vestuário e acessórios",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.15 Preparação de couros e fabricação de artefatos de couro, artigos para viagem e calçados` = colDef(
      name = "Preparação de couros e fabricação de artefatos de couro, artigos para viagem e calçados",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.16 Fabricação de produtos de madeira` = colDef(
      name = "Fabricação de produtos de madeira",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.17 Fabricação de celulose, papel e produtos de papel` = colDef(
      name = "Fabricação de celulose, papel e produtos de papel",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.18 Impressão e reprodução de gravações` = colDef(
      name = "Impressão e reprodução de gravações",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.19 Fabricação de coque, de produtos derivados do petróleo e de biocombustíveis` = colDef(
      name = "Fabricação de coque, de produtos derivados do petróleo e de biocombustíveis",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.20 Fabricação de produtos químicos` = colDef(
      name = "Fabricação de produtos químicos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.21 Fabricação de produtos farmoquímicos e farmacêuticos` = colDef(
      name = "Fabricação de produtos farmoquímicos e farmacêuticos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.22 Fabricação de produtos de borracha e de material plástico` = colDef(
      name = "Fabricação de produtos de borracha e de material plástico",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.23 Fabricação de produtos de minerais não metálicos` = colDef(
      name = "Fabricação de produtos de minerais não metálicos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.24 Metalurgia` = colDef(
      name = "Metalurgia",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.25 Fabricação de produtos de metal, exceto máquinas e equipamentos` = colDef(
      name = "Fabricação de produtos de metal, exceto máquinas e equipamentos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.26 Fabricação de equipamentos de informática, produtos eletrônicos e ópticos` = colDef(
      name = "Fabricação de equipamentos de informática, produtos eletrônicos e ópticos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.27 Fabricação de máquinas, aparelhos e materiais elétricos` = colDef(
      name = "Fabricação de máquinas, aparelhos e materiais elétricos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.28 Fabricação de máquinas e equipamentos` = colDef(
      name = "Fabricação de máquinas e equipamentos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.29 Fabricação de veículos automotores, reboques e carrocerias` = colDef(
      name = "Fabricação de veículos automotores, reboques e carrocerias",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.30 Fabricação de outros equipamentos de transporte, exceto veículos automotores` = colDef(
      name = "Fabricação de outros equipamentos de transporte, exceto veículos automotores",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.31 Fabricação de móveis` = colDef(
      name = "Fabricação de móveis",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.32 Fabricação de produtos diversos` = colDef(
      name = "Fabricação de produtos diversos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `3.33 Manutenção, reparação e instalação de máquinas e equipamentos` = colDef(
      name = "Manutenção, reparação e instalação de máquinas e equipamentos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Tx. M/M-1 (GCE) (Gráfico)

### Tx. M/M-1 (GCE) (%)

### Tx. M/M-12 (GCE) (Gráfico)

### Tx. M/M-12 (GCE) (%)

### Var. acum. no ano (GCE) (Gráfico)

### Var. acum. no ano (GCE) (%)







# Pesquisa Mensal de Serviços (PMS) {data-navmenu="Produção"}

# Pesquisa Mensal do Comércio (PMC) {data-navmenu="Produção"}

# Utilização da capacidade instalada (Ind. de transformação) {data-navmenu="Produção"}

# PIB (ótica da oferta) {data-navmenu="Produção"}

Column {.sidebar} {data-width=80}
-----------------------------------------------------------------------
O **Produto Interno Bruto (PIB)** é a medição mais comum usada para auferir a atividade econômica de um país. Ele representa o valor total dos bens e serviços finais produzidos dentro de um país durante um período específico de tempo. Pela **ótica da oferta**, o PIB representa os grande setores da economia: agropecuária, indústria e comércio e serviços.

<br>

Aqui são apresentadas as seguintes taxas percentuais: taxa trimestral contra trimestre imediatamente anterior, taxa acumulada em quatro trimestres, taxa acumulada ao longo do ano e taxa trimestral em relação ao mesmo trimestre do ano anterior.

<br>

**Fonte:** Instituto Brasileiro de Geografia e Estatística (IBGE).

Column {data-width=920} {.tabset}
-----------------------------------------------------------------------

### Tx. trim. contra trim. imediat. anterior (%)
```{r}
reactable(
  pib_var_mg[, -18],
  columns = list(
    data_fmt = colDef(
      name = "Trimestre",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `PIB a preços de mercado` = colDef(
      name = "PIB (preços de mercado)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Agropecuária - total` = colDef(
      name = "Agropec. (total)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Indústria - total` = colDef(
      name = "Indústria (total)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Indústrias extrativas` = colDef(
      name = "Ind. extrativas",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Indústrias de transformação` = colDef(
      name = "Ind. de transf.",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Construção` = colDef(
      name = "Construção",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Eletricidade e gás, água, esgoto, atividades de gestão de resíduos` = colDef(
      name = "Eletricidade e gás, água, esgoto, atividades de gestão de resíduos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Serviços - total` = colDef(
      name = "Serviços (total)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Comércio` = colDef(
      name = "Comércio",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Transporte, armazenagem e correio` = colDef(
      name = "Transporte, armazenagem e correio",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Informação e comunicação` = colDef(
      name = "Informação e comunicação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Atividades financeiras, de seguros e serviços relacionados` = colDef(
      name = "Atividades financeiras, de seguros e serviços relacionados",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Outras atividades de serviços` = colDef(
      name = "Outras atividades de serviços",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Atividades imobiliárias` = colDef(
      name = "Atividades imobiliárias",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Administração, saúde e educação públicas e seguridade social` = colDef(
      name = "Adm., saúde e educação públicas e seguridade social",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Valor adicionado a preços básicos` = colDef(
      name = "Valor adicionado a preços básicos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Tx. acum. em quatro trimestres (%)
```{r}
reactable(
  pib_var_acum4t[, -19],
  columns = list(
    data_fmt = colDef(
      name = "Trimestre",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `PIB a preços de mercado` = colDef(
      name = "PIB (preços de mercado)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Agropecuária - total` = colDef(
      name = "Agropec. (total)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Indústria - total` = colDef(
      name = "Indústria (total)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Indústrias extrativas` = colDef(
      name = "Ind. extrativas",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Indústrias de transformação` = colDef(
      name = "Ind. de transf.",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Construção` = colDef(
      name = "Construção",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Eletricidade e gás, água, esgoto, atividades de gestão de resíduos` = colDef(
      name = "Eletricidade e gás, água, esgoto, atividades de gestão de resíduos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Serviços - total` = colDef(
      name = "Serviços (total)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Comércio` = colDef(
      name = "Comércio",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Transporte, armazenagem e correio` = colDef(
      name = "Transporte, armazenagem e correio",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Informação e comunicação` = colDef(
      name = "Informação e comunicação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Atividades financeiras, de seguros e serviços relacionados` = colDef(
      name = "Atividades financeiras, de seguros e serviços relacionados",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Outras atividades de serviços` = colDef(
      name = "Outras atividades de serviços",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Atividades imobiliárias` = colDef(
      name = "Atividades imobiliárias",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Administração, saúde e educação públicas e seguridade social` = colDef(
      name = "Adm., saúde e educação públicas e seguridade social",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Valor adicionado a preços básicos` = colDef(
      name = "Valor adicionado a preços básicos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Impostos líquidos sobre produtos` = colDef(
      name = "Impostos líquidos sobre produtos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Tx. acum. ao longo do ano (%)
```{r}
reactable(
  pib_var_acum_ano[, -19],
  columns = list(
    data_fmt = colDef(
      name = "Trimestre",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `PIB a preços de mercado` = colDef(
      name = "PIB (preços de mercado)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Agropecuária - total` = colDef(
      name = "Agropec. (total)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Indústria - total` = colDef(
      name = "Indústria (total)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Indústrias extrativas` = colDef(
      name = "Ind. extrativas",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Indústrias de transformação` = colDef(
      name = "Ind. de transf.",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Construção` = colDef(
      name = "Construção",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Eletricidade e gás, água, esgoto, atividades de gestão de resíduos` = colDef(
      name = "Eletricidade e gás, água, esgoto, atividades de gestão de resíduos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Serviços - total` = colDef(
      name = "Serviços (total)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Comércio` = colDef(
      name = "Comércio",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Transporte, armazenagem e correio` = colDef(
      name = "Transporte, armazenagem e correio",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Informação e comunicação` = colDef(
      name = "Informação e comunicação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Atividades financeiras, de seguros e serviços relacionados` = colDef(
      name = "Atividades financeiras, de seguros e serviços relacionados",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Outras atividades de serviços` = colDef(
      name = "Outras atividades de serviços",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Atividades imobiliárias` = colDef(
      name = "Atividades imobiliárias",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Administração, saúde e educação públicas e seguridade social` = colDef(
      name = "Adm., saúde e educação públicas e seguridade social",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Valor adicionado a preços básicos` = colDef(
      name = "Valor adicionado a preços básicos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Impostos líquidos sobre produtos` = colDef(
      name = "Impostos líquidos sobre produtos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Tx. trim. em relação ao mesmo trim. do ano anterior (%)
```{r}
reactable(
  pib_var_ano[, -19],
  columns = list(
    data_fmt = colDef(
      name = "Trimestre",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `PIB a preços de mercado` = colDef(
      name = "PIB (preços de mercado)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Agropecuária - total` = colDef(
      name = "Agropec. (total)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Indústria - total` = colDef(
      name = "Indústria (total)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Indústrias extrativas` = colDef(
      name = "Ind. extrativas",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Indústrias de transformação` = colDef(
      name = "Ind. de transf.",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Construção` = colDef(
      name = "Construção",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Eletricidade e gás, água, esgoto, atividades de gestão de resíduos` = colDef(
      name = "Eletricidade e gás, água, esgoto, atividades de gestão de resíduos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Serviços - total` = colDef(
      name = "Serviços (total)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Comércio` = colDef(
      name = "Comércio",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Transporte, armazenagem e correio` = colDef(
      name = "Transporte, armazenagem e correio",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Informação e comunicação` = colDef(
      name = "Informação e comunicação",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Atividades financeiras, de seguros e serviços relacionados` = colDef(
      name = "Atividades financeiras, de seguros e serviços relacionados",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Outras atividades de serviços` = colDef(
      name = "Outras atividades de serviços",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Atividades imobiliárias` = colDef(
      name = "Atividades imobiliárias",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Administração, saúde e educação públicas e seguridade social` = colDef(
      name = "Adm., saúde e educação públicas e seguridade social",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Valor adicionado a preços básicos` = colDef(
      name = "Valor adicionado a preços básicos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Impostos líquidos sobre produtos` = colDef(
      name = "Impostos líquidos sobre produtos",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# PIB (ótica da demanda) {data-navmenu="Produção"}

Column {.sidebar} {data-width=80}
-----------------------------------------------------------------------
O **Produto Interno Bruto (PIB)** é a medição mais comum usada para auferir a atividade econômica de um país. Ele representa o valor total dos bens e serviços finais produzidos dentro de um país durante um período específico de tempo. Pela **ótica da demanda**, o PIB representa o consumo das famílias, o consumo da adminstração pública, a formação bruta de capital fixo (FBCF) e as exportações líquidas (exportações - importações).

<br>

Aqui são apresentadas as seguintes taxas percentuais: taxa trimestral contra trimestre imediatamente anterior, taxa acumulada em quatro trimestres, taxa acumulada ao longo do ano e taxa trimestral em relação ao mesmo trimestre do ano anterior.

<br>

**Fonte:** Instituto Brasileiro de Geografia e Estatística (IBGE).

Column {data-width=920} {.tabset}
-----------------------------------------------------------------------

### Tx. trim. contra trim. imediat. anterior (%)
```{r}
reactable(
  pib_var_mg_dem[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Trimestre",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `PIB a preços de mercado` = colDef(
      name = "PIB (preços de mercado)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Despesa de consumo das famílias` = colDef(
      name = "Consumo das famílias",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Despesa de consumo da administração pública` = colDef(
      name = "Consumo da adm. pública",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Formação bruta de capital fixo` = colDef(
      name = "FBCF",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Exportação de bens e serviços` = colDef(
      name = "Exportações",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Importação de bens e serviços (-)` = colDef(
      name = "Importações",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Tx. acum. em quatro trimestres (%)
```{r}
reactable(
  pib_var_acum4t_dem[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Trimestre",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `PIB a preços de mercado` = colDef(
      name = "PIB (preços de mercado)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Despesa de consumo das famílias` = colDef(
      name = "Consumo das famílias",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Despesa de consumo da administração pública` = colDef(
      name = "Consumo da adm. pública",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Formação bruta de capital fixo` = colDef(
      name = "FBCF",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Exportação de bens e serviços` = colDef(
      name = "Exportações",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Importação de bens e serviços (-)` = colDef(
      name = "Importações",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Tx. acum. ao longo do ano (%)
```{r}
reactable(
  pib_var_acum_ano_dem[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Trimestre",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `PIB a preços de mercado` = colDef(
      name = "PIB (preços de mercado)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Despesa de consumo das famílias` = colDef(
      name = "Consumo das famílias",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Despesa de consumo da administração pública` = colDef(
      name = "Consumo da adm. pública",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Formação bruta de capital fixo` = colDef(
      name = "FBCF",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Exportação de bens e serviços` = colDef(
      name = "Exportações",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Importação de bens e serviços (-)` = colDef(
      name = "Importações",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Tx. trim. em relação ao mesmo trim. do ano anterior (%)
```{r}
reactable(
  pib_var_ano_dem[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Trimestre",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `PIB a preços de mercado` = colDef(
      name = "PIB (preços de mercado)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Despesa de consumo das famílias` = colDef(
      name = "Consumo das famílias",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Despesa de consumo da administração pública` = colDef(
      name = "Consumo da adm. pública",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Formação bruta de capital fixo` = colDef(
      name = "FBCF",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Exportação de bens e serviços` = colDef(
      name = "Exportações",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    `Importação de bens e serviços (-)` = colDef(
      name = "Importações",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Res. internacionais

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

As **reservas internacionais** compreendem os ativos externos do país prontamente disponíveis e mantidos pelo Banco Central do Brasil com o objetivo de financiar eventuais déficits do balanço de pagamentos.

<br>

De acordo com o [Relatório de Gestão das Reservas Internacionais](https://www.bcb.gov.br/publicacoes/relgestaoreservas) do Banco Central do Brasil de março de 2025, em dezembro de 2024 a alocação das reservas por moedas se dava da seguinte maneira: 78,45% em dólar americano (USD), 5,31% em renminbi (CNY), 5,23% em euro (EUR), 3,69% em libra esterlina (GBP), 3,55% em ouro, 1,73% em iene (JPY), 1,05% em dólar canadense (CAD) e 0,99% em dólar australiano (AUD).

<br>

Também em dezembro de 2024, 84,08% das reservas pelo conceito caixa estavam aplicadas em títulos governamentais soberanos.

<br>

O prazo médio de investimento em 2024 foi de 3,19 anos.

<br>

**Fontes:** Sistema Gerenciador de Séries Temporais do Banco Central do Brasil (código 3546) e DataBank/World Bank.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### US$ bilhões
```{r}
plot_ly(
  data = res_int, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", valor)),
  type = "scatter",
  mode = "lines",
  fill = "tozeroy"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "US$ bilhões")
  ) %>% rangeslider(thickness = 0.05)
```

### Var. mensal (%)
```{r}
plot_ly(
  data = res_int, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", var_mg)), 
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

### Var. em 12 meses (%)
```{r}
plot_ly(
  data = res_int, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", var_12m)), 
  type = "scatter",
  mode = "lines"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%", dtick = 20)
  ) %>% rangeslider(thickness = 0.05)
```

### % dívida externa total
```{r}
plot_ly(
  data = res_int_div_ext, 
  x = ~ano, 
  y = ~as.numeric(gsub(",", ".", valor)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

### Meses de importações
```{r}
plot_ly(
  data = res_int_imports, 
  x = ~ano, 
  y = ~as.numeric(gsub(",", ".", valor)),
  type = "bar"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "Meses de importações")
  ) %>% rangeslider(thickness = 0.05)
```


Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  res_int[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor = colDef(
      name = "US$ bilhões",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### % dívida externa total
```{r}
reactable(
  res_int_div_ext,
  columns = list(
    ano = colDef(
      name = "Ano",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor = colDef(
      name = "% dívida externa total",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Meses de importações
```{r}
reactable(
  res_int_imports,
  columns = list(
    ano = colDef(
      name = "Ano",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor = colDef(
      name = "Meses de importações",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Taxa de câmbio comercial {data-navmenu="Taxa de câmbio"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

**Taxa de câmbio comercial (compra e venda) - cotações diárias e mensais:** refere-se às taxas administradas até 13 de março de 1990 e às taxas livres a partir dessa data (Resolução 1.690, de 18.03.1990). As taxas administradas são aquelas fixadas pelo Banco Central. As taxas livres correspondem à média das taxas efetivas de operações no mercado interbancário, ponderada pelo volume de transações de venda do dia. As transações fechadas em taxas que mais se distanciam da média do mercado (outliers) e aquelas que evidenciam formação artificial de preço ou contrárias às práticas regulares do mercado são excluídas dos cálculos. A partir de março de 1992, essa taxa recebeu a denominação de **taxa PTAX (fechamento)**, isto é, a partir de 01.07.2011, é a média aritmética das taxas de compra e das taxas de venda dos boletins do dia, conforme Circulares 3.506, de 23.09.2010, e 3.537, de 25.05.2011. Até 30.06.2011, é a taxa média ponderada dos negócios realizados no mercado interbancário de câmbio com liquidação em dois dias úteis, calculada pelo Banco Central do Brasil, conforme Comunicado N. 6.815/99. 

<br>

As taxas mensais referem-se aos valores de fim de período.

<br>

**Fonte:** Códigos 10813 (compra diária), 1 (venda diária), 3695 (compra mensal) e 3696 (venda mensal) no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Cotação diária
```{r}
plot_ly(
  data = cambio_nom, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", cambio_nom)),
  type = "scatter",
  mode = "line"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "R$")
  ) %>% rangeslider(thickness = 0.05)
```

### Cotação mensal
```{r}
plot_ly(
  data = cambio_nom_mensal, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", cambio_nom_mensal)),
  type = "scatter",
  mode = "line"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "R$")
  ) %>% rangeslider(thickness = 0.05)
```

### Variação mensal (%)
```{r}
plot_ly(
  data = cambio_nom_mensal, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", var_mg)),
  type = "scatter",
  mode = "line"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

### Variação em 12 meses (%)
```{r}
plot_ly(
  data = cambio_nom_mensal, 
  x = ~date, 
  y = ~as.numeric(gsub(",", ".", var_12m)),
  type = "scatter",
  mode = "line"
) %>%
  layout(
    xaxis = list(title = " "),
    yaxis = list(title = "%")
  ) %>% rangeslider(thickness = 0.05)
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese (cotação diária)
```{r, results='asis'}
reactable(
  cambio_nom[, -6],
  columns = list(
    data_fmt = colDef(
      name = "Data",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_compra = colDef(
      name = "Compra (R$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_venda = colDef(
      name = "Venda (R$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    cambio_nom = colDef(
      name = "Média compra e venda (R$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg = colDef(
      name = "Variação diária (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Quadro-síntese (cotação mensal)
```{r, results='asis'}
reactable(
  cambio_nom_mensal[, -7],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_compra = colDef(
      name = "Compra (R$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_venda = colDef(
      name = "Venda (R$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    cambio_nom_mensal = colDef(
      name = "Média compra e venda (R$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Taxa de câmbio real {data-navmenu="Taxa de câmbio"} 

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------

A série mensal **taxa de câmbio real** reflete a variação da moeda nacional em relação a uma moeda ou a uma cesta de moedas estrangeiras (geralmente ponderada pelo fluxo de comércio exterior), corrigida pelo diferencial entre as inflações doméstica (IPCA) e externa. Jun/1994 = 100.

<br>

**Fonte:** Códigos 11752 (dólar americano) e 11753 (efetiva) no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil.

Column {data-width=400} {.tabset}
-----------------------------------------------------------------------

### Taxa de câmbio real
```{r}
plot_ly() %>%
  add_trace(
    data = cambio_real,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_dol)),
    type = "scatter",
    mode = "lines",
    name = "Taxa de câmbio real (US$)"
  ) %>%
  add_trace(
    data = cambio_real,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", valor_efet)),
    type = "scatter",
    mode = "lines",
    name = "Taxa de câmbio real efetiva"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "Jun/1994 = 100", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Var. mensal (%)
```{r}
plot_ly() %>%
  add_trace(
    data = cambio_real,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_mg_dol)),
    type = "scatter",
    mode = "lines",
    name = "Taxa de câmbio real (US$)"
  ) %>%
  add_trace(
    data = cambio_real,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_mg_efet)),
    type = "scatter",
    mode = "lines",
    name = "Taxa de câmbio real efetiva"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

### Var. em 12 meses (%)
```{r}
plot_ly() %>%
  add_trace(
    data = cambio_real,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_12m_dol)),
    type = "scatter",
    mode = "lines",
    name = "Taxa de câmbio real (US$)"
  ) %>%
  add_trace(
    data = cambio_real,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", var_12m_efet)),
    type = "scatter",
    mode = "lines",
    name = "Taxa de câmbio real efetiva"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "%", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  cambio_real[, -8],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_dol = colDef(
      name = "Taxa de câmbio real (US$)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg_dol = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m_dol = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_efet = colDef(
      name = "Taxa de câmbio real efetiva",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_mg_efet = colDef(
      name = "Variação mensal (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    var_12m_efet = colDef(
      name = "Variação em 12 meses (%)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Movimento de câmbio contratado {data-navmenu="Taxa de câmbio"}

Column {.sidebar} {data-width=250}
-----------------------------------------------------------------------

**Câmbio contratado comercial (exportações):** Somatório das contratações de compra de moeda estrangeira efetuadas pelos bancos comerciais junto ao mercado não financeiro relativas a exportações de bens. Código 13962 no Sistema Gerenciador de Séries Temporais do Banco Central do Brasil (SGST/BCB).

**Câmbio contratado comercial (importações):** Somatório das contratações de venda de moeda estrangeira efetuadas pelos bancos comerciais ao mercado não financeiro relativas a importações de bens. Código 13966 no SGST/BCB.

**Câmbio contratado comercial (saldo):** Resultado líquido de contratações de câmbio comercial de exportação e de importação. Código 13967 no SGST/BCB.

**Câmbio contratado financeiro (compras):** Somatório das contratações de compra de moeda estrangeira efetuadas pelos bancos comerciais junto ao mercado não financeiro relativas a exportação de serviços e ingressos de capitais estrangeiros ou retorno de capitais brasileiros. Não inclui operações de câmbio de compra e venda junto ao Banco Central do Brasil. Código 13968 no SGST/BCB.

**Câmbio contratado financeiro (vendas):** Somatório das contratações de venda de moeda estrangeira efetuadas pelos bancos comerciais junto ao mercado não financeiro relativas a importação de serviços e saídas de capitais estrangeiros ou brasileiros. Não inclui operações de câmbio de compra e venda junto ao Banco Central do Brasil. Código 13969 no SGST/BCB.

**Câmbio contratado financeiro (saldo):** Resultado líquido de contratações de câmbio financeiro de compra e venda. Não inclui operações de câmbio de compra e venda junto ao Banco Central do Brasil. Código 13970 no SGST/BCB.

Todos os valores estão em milhões de dólares.

Column {data-width=750}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese (diário)
```{r, results='asis'}
reactable(
  cambio_contratado[, -9],
  columns = list(
    data_fmt = colDef(
      name = "Data",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_exp = colDef(
      name = "Comercial exportação (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_imp = colDef(
      name = "Comercial importação (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo_com = colDef(
      name = "Saldo comercial (3) (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_compra = colDef(
      name = "Financeiro compra (4)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_venda = colDef(
      name = "Financeiro venda (5)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo_financ = colDef(
      name = "Saldo financeiro (6) (4-5)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    valor_saldo_total = colDef(
      name = "Saldo câmbio contratado (7) (3+6)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

### Quadro-síntese (mensal)

### Quadro-síntese (anual)


# CAGED {data-navmenu="Trabalho"}

Column {.sidebar} {data-width=200}
-----------------------------------------------------------------------
**Cadastro Geral de Empregados e Desempregados**. Para empregados consideram-se aqueles contratados por empregadores, pessoa física ou jurídica, sob o regime da CLT, por prazo indeterminado ou determinado, incluindo-se também os contratados a título de experiência ou para prestação de trabalho intermitente. Esta classificação abrange: empregados sob o regime CLT, trabalhadores temporários, trabalhadores avulsos, agentes públicos, trabalhadores cedidos e dirigentes sindicais. Os dados referem-se ao total de admissões e demissões de empregados.

<br>

**Fonte:** Ministério do Trabalho e Emprego via Ipeadata.

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Gráfico
```{r}
plot_ly() %>%
  add_trace(
    data = caged_graph,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", adm)),
    type = "bar",
    name = "Admissões"
  ) %>%
  add_trace(
    data = caged_graph,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", dem)),
    type = "bar",
    name = "Demissões"
  ) %>%
  add_trace(
    data = caged_graph,
    x = ~date,
    y = ~as.numeric(gsub(",", ".", saldo)),
    type = "bar",
    name = "Saldo"
  ) %>%
  layout(
    xaxis = list(title = " ", rangeslider = list(thickness = 0.05)),
    yaxis = list(title = "Admissões, demissões e saldo", autorange = TRUE),
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.2,
      xanchor = "center"
    )
  )
```

Column {data-width=400}  {.tabset}
-----------------------------------------------------------------------

### Quadro-síntese
```{r}
reactable(
  caged[, -5],
  columns = list(
    data_fmt = colDef(
      name = "Mês",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    adm = colDef(
      name = "Admissões (1)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    dem = colDef(
      name = "Demissões (2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    ),
    saldo = colDef(
      name = "Saldo (1-2)",
      align = "center",
      headerStyle = list(textAlign = "center", verticalAlign = "middle")
    )
  ),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  resizable = TRUE,
  defaultPageSize = 25,
  theme = reactableTheme(
    color = "black",
    backgroundColor = "white",
    borderColor = "black",
    stripedColor = "#D6EAF8",
    cellPadding = "8px 12px",
    style = list(fontFamily = "Segoe UI, sans-serif", fontSize = "14px"),
    headerStyle = list(background = "white", fontWeight = "bold", textAlign = "center", verticalAlign = "middle")
  )
)
```

# Massa de rendimento {data-navmenu="Trabalho"}

# Ocupação e desocupação {data-navmenu="Trabalho"}

# Rendimento médio {data-navmenu="Trabalho"}

# Salário mínimo {data-navmenu="Trabalho"}

